!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$.Widget	lf/common/jquery-ui/jquery-ui.js	/^$.Widget._childConstructors = [];$/;"	c
$.Widget	lf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.Widget	plf/common/jquery-ui/jquery-ui.js	/^$.Widget._childConstructors = [];$/;"	c
$.Widget	plf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.expr.toLowerCase	lf/common/jquery-ui/jquery-ui.js	/^	}$/;"	f
$.expr.toLowerCase	plf/common/jquery-ui/jquery-ui.js	/^	}$/;"	f
$.fn	lf/common/jquery-ui/jquery-ui.js	/^	var fullName = object.prototype.widgetFullName || name;$/;"	f
$.fn	plf/common/jquery-ui/jquery-ui.js	/^	var fullName = object.prototype.widgetFullName || name;$/;"	f
$.fn.addBack	lf/common/jquery-ui/jquery-ui.js	/^	} );$/;"	f
$.fn.addBack	plf/common/jquery-ui/jquery-ui.js	/^	} );$/;"	f
$.fn.position	lf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.fn.position	plf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.ui.focusable	lf/common/jquery-ui/jquery-ui.js	/^} );$/;"	f
$.ui.focusable	plf/common/jquery-ui/jquery-ui.js	/^} );$/;"	f
$.widget	lf/common/jquery-ui/jquery-ui.js	/^} )( $.cleanData );$/;"	f
$.widget	plf/common/jquery-ui/jquery-ui.js	/^} )( $.cleanData );$/;"	f
$.widget.bridge	lf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.widget.bridge	plf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.widget.extend	lf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
$.widget.extend	plf/common/jquery-ui/jquery-ui.js	/^};$/;"	f
.DEFAULT_GOAL	lf/Makefile	/^.DEFAULT_GOAL := all$/;"	m
.DEFAULT_GOAL	plf/Makefile	/^.DEFAULT_GOAL := all$/;"	m
AExp	lf/Imp.html	/^<span class="id" type="keyword">Module<\/span> <a name="AExp"><span class="id" type="module">AExp<\/span><\/a>.<br\/>$/;"	a
AExp.AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.AMinus"><span class="id" type="constructor">AMinus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
AExp.AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.AMult"><span class="id" type="constructor">AMult<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
AExp.ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.ANum"><span class="id" type="constructor">ANum<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
AExp.APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.APlus"><span class="id" type="constructor">APlus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
AExp.BAnd	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BAnd"><span class="id" type="constructor">BAnd<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a>.<br\/>$/;"	a
AExp.BEq	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BEq"><span class="id" type="constructor">BEq<\/span><\/a> : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.BFalse	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BFalse"><span class="id" type="constructor">BFalse<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.BLe	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BLe"><span class="id" type="constructor">BLe<\/span><\/a> : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.BNot	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BNot"><span class="id" type="constructor">BNot<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.BTrue	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.BTrue"><span class="id" type="constructor">BTrue<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.E_AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.E_AMinus"><span class="id" type="constructor">E_AMinus<\/span><\/a> : ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.E_AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.E_AMult"><span class="id" type="constructor">E_AMult<\/span><\/a> :  ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.E_ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.E_ANum"><span class="id" type="constructor">E_ANum<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.E_APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.E_APlus"><span class="id" type="constructor">E_APlus<\/span><\/a> : ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.In10	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.In10"><span class="id" type="lemma">In<sub>10<\/sub><\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Lists.List.html#In"><span class="id" type="definition">In<\/span><\/a> 10 [1;2;3;4;5;6;7;8;9;10].<br\/>$/;"	a
AExp.In10'	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.In10'"><span class="id" type="lemma">In<sub>10<\/sub>'<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Lists.List.html#In"><span class="id" type="definition">In<\/span><\/a> 10 [1;2;3;4;5;6;7;8;9;10].<br\/>$/;"	a
AExp.aeval	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="AExp.aeval"><span class="id" type="definition">aeval<\/span><\/a> (<span class="id" type="var">a<\/span> : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
AExp.aevalR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="AExp.aevalR"><span class="id" type="inductive">aevalR<\/span><\/a> : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
AExp.aevalR_first_try	lf/Imp.html	/^<span class="id" type="keyword">Module<\/span> <a name="AExp.aevalR_first_try"><span class="id" type="module">aevalR_first_try<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
AExp.aevalR_first_try.E_AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.aevalR_first_try.E_AMinus"><span class="id" type="constructor">E_AMinus<\/span><\/a>: ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.aevalR_first_try.E_AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.aevalR_first_try.E_AMult"><span class="id" type="constructor">E_AMult<\/span><\/a> : ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.aevalR_first_try.E_ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.aevalR_first_try.E_ANum"><span class="id" type="constructor">E_ANum<\/span><\/a>  : ∀ (<span class="id" type="var">n<\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.aevalR_first_try.E_APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AExp.aevalR_first_try.E_APlus"><span class="id" type="constructor">E_APlus<\/span><\/a> : ∀ (<span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
AExp.aevalR_first_try.aevalR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="AExp.aevalR_first_try.aevalR"><span class="id" type="inductive">aevalR<\/span><\/a> : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
AExp.aeval_iff_aevalR	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.aeval_iff_aevalR"><span class="id" type="lemma">aeval_iff_aevalR<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
AExp.aeval_iff_aevalR'	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.aeval_iff_aevalR'"><span class="id" type="lemma">aeval_iff_aevalR'<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
AExp.aexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
AExp.beval	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="AExp.beval"><span class="id" type="definition">beval<\/span><\/a> (<span class="id" type="var">b<\/span> : <a class="idref" href="Imp.html#AExp.bexp"><span class="id" type="inductive">bexp<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
AExp.bevalR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="AExp.bevalR"><span class="id" type="inductive">bevalR<\/span><\/a>: <a class="idref" href="Imp.html#AExp.bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
AExp.beval_iff_bevalR	lf/Imp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="AExp.beval_iff_bevalR"><span class="id" type="lemma">beval_iff_bevalR<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">bv<\/span>,<br\/>$/;"	a
AExp.bexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="AExp.bexp"><span class="id" type="inductive">bexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
AExp.foo	lf/Imp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="AExp.foo"><span class="id" type="lemma">foo<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Arith.Compare_dec.html#leb"><span class="id" type="abbreviation">leb<\/span><\/a> 0 <a class="idref" href="Imp.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
AExp.foo'	lf/Imp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="AExp.foo'"><span class="id" type="lemma">foo'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Arith.Compare_dec.html#leb"><span class="id" type="abbreviation">leb<\/span><\/a> 0 <a class="idref" href="Imp.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
AExp.optimize_0plus	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="AExp.optimize_0plus"><span class="id" type="definition">optimize_0plus<\/span><\/a> (<span class="id" type="var">a<\/span>:<a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) : <a class="idref" href="Imp.html#AExp.aexp"><span class="id" type="inductive">aexp<\/span><\/a> :=<br\/>$/;"	a
AExp.optimize_0plus_b	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="AExp.optimize_0plus_b"><span class="id" type="definition">optimize_0plus_b<\/span><\/a> (<span class="id" type="var">b<\/span> : <a class="idref" href="Imp.html#AExp.bexp"><span class="id" type="inductive">bexp<\/span><\/a>) : <a class="idref" href="Imp.html#AExp.bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
AExp.optimize_0plus_b_sound	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.optimize_0plus_b_sound"><span class="id" type="lemma">optimize_0plus_b_sound<\/span><\/a> : ∀ <span class="id" type="var">b<\/span>,<br\/>$/;"	a
AExp.optimize_0plus_sound	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.optimize_0plus_sound"><span class="id" type="lemma">optimize_0plus_sound<\/span><\/a>: ∀ <span class="id" type="var">a<\/span>,<br\/>$/;"	a
AExp.optimize_0plus_sound'	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.optimize_0plus_sound'"><span class="id" type="lemma">optimize_0plus_sound'<\/span><\/a>: ∀ <span class="id" type="var">a<\/span>,<br\/>$/;"	a
AExp.optimize_0plus_sound''	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.optimize_0plus_sound''"><span class="id" type="lemma">optimize_0plus_sound''<\/span><\/a>: ∀ <span class="id" type="var">a<\/span>,<br\/>$/;"	a
AExp.silly1	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.silly1"><span class="id" type="lemma">silly1<\/span><\/a> : ∀ <span class="id" type="var">ae<\/span>, <a class="idref" href="Imp.html#AExp.aeval"><span class="id" type="definition">aeval<\/span><\/a> <a class="idref" href="Imp.html#ae"><span class="id" type="variable">ae<\/span><\/a> = <a class="idref" href="Imp.html#AExp.aeval"><span class="id" type="definition">aeval<\/span><\/a> <a class="idref" href="Imp.html#ae"><span class="id" type="variable">ae<\/span><\/a>.<br\/>$/;"	a
AExp.silly2	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="AExp.silly2"><span class="id" type="lemma">silly2<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>), <a class="idref" href="Imp.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="Imp.html#P"><span class="id" type="variable">P<\/span><\/a>.<br\/>$/;"	a
AExp.silly_presburger_example	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="AExp.silly_presburger_example"><span class="id" type="definition">silly_presburger_example<\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
AExp.test_aeval1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="AExp.test_aeval1"><span class="id" type="definition">test_aeval1<\/span><\/a>:<br\/>$/;"	a
AExp.test_optimize_0plus	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="AExp.test_optimize_0plus"><span class="id" type="definition">test_optimize_0plus<\/span><\/a>:<br\/>$/;"	a
AId	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AId"><span class="id" type="constructor">AId<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>                <span class="comment">(*&nbsp;&lt;-----&nbsp;NEW&nbsp;*)<\/span><br\/>$/;"	a
AId	lf/imp.ml	/^| AId of id$/;"	C	type:aexp
AId	lf/imp.mli	/^| AId of id$/;"	C	type:aexp
AId	lf/imp1.ml	/^| AId of id$/;"	C	type:aexp
AId	lf/imp1.mli	/^| AId of id$/;"	C	type:aexp
AId	lf/imp2.ml	/^| AId of id$/;"	C	type:aexp
AId	lf/imp2.mli	/^| AId of id$/;"	C	type:aexp
ALLNATIVEFILES	lf/Makefile	/^ALLNATIVEFILES=$(OBJFILES:.o=.cmi) $(OBJFILES:.o=.cmo) $(OBJFILES:.o=.cmx) $(OBJFILES:.o=.cmxs)$/;"	m
ALLNATIVEFILES	plf/Makefile	/^ALLNATIVEFILES=$(OBJFILES:.o=.cmi) $(OBJFILES:.o=.cmo) $(OBJFILES:.o=.cmx) $(OBJFILES:.o=.cmxs)$/;"	m
AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AMinus"><span class="id" type="constructor">AMinus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
AMinus	lf/imp.ml	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMinus	lf/imp.mli	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMinus	lf/imp1.ml	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMinus	lf/imp1.mli	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMinus	lf/imp2.ml	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMinus	lf/imp2.mli	/^| AMinus of aexp * aexp$/;"	C	type:aexp
AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="AMult"><span class="id" type="constructor">AMult<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>.<br\/>$/;"	a
AMult	lf/imp.ml	/^| AMult of aexp * aexp$/;"	C	type:aexp
AMult	lf/imp.mli	/^| AMult of aexp * aexp$/;"	C	type:aexp
AMult	lf/imp1.ml	/^| AMult of aexp * aexp$/;"	C	type:aexp
AMult	lf/imp1.mli	/^| AMult of aexp * aexp$/;"	C	type:aexp
AMult	lf/imp2.ml	/^| AMult of aexp * aexp$/;"	C	type:aexp
AMult	lf/imp2.mli	/^| AMult of aexp * aexp$/;"	C	type:aexp
ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="ANum"><span class="id" type="constructor">ANum<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
ANum	lf/imp.ml	/^| ANum of int$/;"	C	type:aexp
ANum	lf/imp.mli	/^| ANum of int$/;"	C	type:aexp
ANum	lf/imp1.ml	/^| ANum of nat$/;"	C	type:aexp
ANum	lf/imp1.mli	/^| ANum of nat$/;"	C	type:aexp
ANum	lf/imp2.ml	/^| ANum of int$/;"	C	type:aexp
ANum	lf/imp2.mli	/^| ANum of int$/;"	C	type:aexp
APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="APlus"><span class="id" type="constructor">APlus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
APlus	lf/imp.ml	/^| APlus of aexp * aexp$/;"	C	type:aexp
APlus	lf/imp.mli	/^| APlus of aexp * aexp$/;"	C	type:aexp
APlus	lf/imp1.ml	/^| APlus of aexp * aexp$/;"	C	type:aexp
APlus	lf/imp1.mli	/^| APlus of aexp * aexp$/;"	C	type:aexp
APlus	lf/imp2.ml	/^| APlus of aexp * aexp$/;"	C	type:aexp
APlus	lf/imp2.mli	/^| APlus of aexp * aexp$/;"	C	type:aexp
AS_Id	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Id"><span class="id" type="constructor">AS_Id<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">i<\/span>,<br\/>$/;"	a
AS_Minus	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Minus"><span class="id" type="constructor">AS_Minus<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Minus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Minus1"><span class="id" type="constructor">AS_Minus1<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Minus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Minus2"><span class="id" type="constructor">AS_Minus2<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
AS_Mult	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Mult"><span class="id" type="constructor">AS_Mult<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Mult1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Mult1"><span class="id" type="constructor">AS_Mult1<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Mult2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Mult2"><span class="id" type="constructor">AS_Mult2<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
AS_Plus	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Plus"><span class="id" type="constructor">AS_Plus<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Plus1"><span class="id" type="constructor">AS_Plus1<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
AS_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="AS_Plus2"><span class="id" type="constructor">AS_Plus2<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
All	lf/Logic.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="All"><span class="id" type="definition">All<\/span><\/a> {<span class="id" type="var">T<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">P<\/span> : <a class="idref" href="Logic.html#T"><span class="id" type="variable">T<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#T"><span class="id" type="variable">T<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span><br\/>$/;"	a
All_In	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="All_In"><span class="id" type="lemma">All_In<\/span><\/a> :<br\/>$/;"	a
Alpha	lf/imp.mli	/^| Alpha$/;"	C	type:chartype
Animation	lf/common/jquery-ui/external/jquery/jquery.js	/^function Animation( elem, properties, options ) {$/;"	f
Animation	plf/common/jquery-ui/external/jquery/jquery.js	/^function Animation( elem, properties, options ) {$/;"	f
App	lf/IndProp.html	/^| <a name="App"><span class="id" type="constructor">App<\/span><\/a> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a><br\/>$/;"	a
Ascii	lf/imp1.ml	/^  let Ascii (b8, b9, b10, b11, b12, b13, b14, b15) = b in$/;"	v
Ascii	lf/imp1.mli	/^| Ascii of bool * bool * bool * bool * bool * bool * bool * bool$/;"	C	type:ascii
Ascii	lf/imp2.ml	/^  let Ascii (b8, b9, b10, b11, b12, b13, b14, b15) = b in$/;"	v
Ascii	lf/imp2.mli	/^| Ascii of bool * bool * bool * bool * bool * bool * bool * bool$/;"	C	type:ascii
Assertion	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Assertion"><span class="id" type="definition">Assertion<\/span><\/a> := <span class="id" type="definition">state<\/span> → <span class="id" type="keyword">Prop<\/span>.<br\/>$/;"	a
Assign	plf/PE.html	/^&nbsp;&nbsp;| <a name="Assign"><span class="id" type="constructor">Assign<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <span class="id" type="var">Label<\/span> → <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <span class="id" type="var">Label<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
BAnd	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BAnd"><span class="id" type="constructor">BAnd<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a>.<br\/>$/;"	a
BAnd	lf/imp.ml	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BAnd	lf/imp.mli	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BAnd	lf/imp1.ml	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BAnd	lf/imp1.mli	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BAnd	lf/imp2.ml	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BAnd	lf/imp2.mli	/^| BAnd of bexp * bexp$/;"	C	type:bexp
BEq	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BEq"><span class="id" type="constructor">BEq<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
BEq	lf/imp.ml	/^| BEq of aexp * aexp$/;"	C	type:bexp
BEq	lf/imp.mli	/^| BEq of aexp * aexp$/;"	C	type:bexp
BEq	lf/imp1.ml	/^| BEq of aexp * aexp$/;"	C	type:bexp
BEq	lf/imp1.mli	/^| BEq of aexp * aexp$/;"	C	type:bexp
BEq	lf/imp2.ml	/^| BEq of aexp * aexp$/;"	C	type:bexp
BEq	lf/imp2.mli	/^| BEq of aexp * aexp$/;"	C	type:bexp
BFalse	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BFalse"><span class="id" type="constructor">BFalse<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
BFalse	lf/imp.ml	/^| BFalse$/;"	C	type:bexp
BFalse	lf/imp.mli	/^| BFalse$/;"	C	type:bexp
BFalse	lf/imp1.ml	/^| BFalse$/;"	C	type:bexp
BFalse	lf/imp1.mli	/^| BFalse$/;"	C	type:bexp
BFalse	lf/imp2.ml	/^| BFalse$/;"	C	type:bexp
BFalse	lf/imp2.mli	/^| BFalse$/;"	C	type:bexp
BLe	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BLe"><span class="id" type="constructor">BLe<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
BLe	lf/imp.ml	/^| BLe of aexp * aexp$/;"	C	type:bexp
BLe	lf/imp.mli	/^| BLe of aexp * aexp$/;"	C	type:bexp
BLe	lf/imp1.ml	/^| BLe of aexp * aexp$/;"	C	type:bexp
BLe	lf/imp1.mli	/^| BLe of aexp * aexp$/;"	C	type:bexp
BLe	lf/imp2.ml	/^| BLe of aexp * aexp$/;"	C	type:bexp
BLe	lf/imp2.mli	/^| BLe of aexp * aexp$/;"	C	type:bexp
BNot	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BNot"><span class="id" type="constructor">BNot<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
BNot	lf/imp.ml	/^| BNot of bexp$/;"	C	type:bexp
BNot	lf/imp.mli	/^| BNot of bexp$/;"	C	type:bexp
BNot	lf/imp1.ml	/^| BNot of bexp$/;"	C	type:bexp
BNot	lf/imp1.mli	/^| BNot of bexp$/;"	C	type:bexp
BNot	lf/imp2.ml	/^| BNot of bexp$/;"	C	type:bexp
BNot	lf/imp2.mli	/^| BNot of bexp$/;"	C	type:bexp
BODY	lf/common/jquery-ui/external/jquery/jquery.js	/^		HTML: "block",$/;"	p	class:iframe
BODY	plf/common/jquery-ui/external/jquery/jquery.js	/^		HTML: "block",$/;"	p	class:iframe
BS_AndFalse	plf/Smallstep.html	/^| <a name="BS_AndFalse"><span class="id" type="constructor">BS_AndFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_AndStep	plf/Smallstep.html	/^| <a name="BS_AndStep"><span class="id" type="constructor">BS_AndStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>1<\/sub>'<\/span> <span class="id" type="var">b<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_AndTrueFalse	plf/Smallstep.html	/^| <a name="BS_AndTrueFalse"><span class="id" type="constructor">BS_AndTrueFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
BS_AndTrueStep	plf/Smallstep.html	/^| <a name="BS_AndTrueStep"><span class="id" type="constructor">BS_AndTrueStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<sub>2<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
BS_AndTrueTrue	plf/Smallstep.html	/^| <a name="BS_AndTrueTrue"><span class="id" type="constructor">BS_AndTrueTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
BS_Eq	plf/Smallstep.html	/^| <a name="BS_Eq"><span class="id" type="constructor">BS_Eq<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_Eq<sub	plf/Smallstep.html	/^| <a name="BS_Eq<sub>1<\/sub>"><span class="id" type="constructor">BS_Eq<sub>1<\/sub><\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_Eq<sub	plf/Smallstep.html	/^| <a name="BS_Eq<sub>2<\/sub>"><span class="id" type="constructor">BS_Eq<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
BS_LtEq	plf/Smallstep.html	/^| <a name="BS_LtEq"><span class="id" type="constructor">BS_LtEq<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_LtEq1	plf/Smallstep.html	/^| <a name="BS_LtEq1"><span class="id" type="constructor">BS_LtEq1<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
BS_LtEq2	plf/Smallstep.html	/^| <a name="BS_LtEq2"><span class="id" type="constructor">BS_LtEq2<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
BS_NotFalse	plf/Smallstep.html	/^| <a name="BS_NotFalse"><span class="id" type="constructor">BS_NotFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
BS_NotStep	plf/Smallstep.html	/^| <a name="BS_NotStep"><span class="id" type="constructor">BS_NotStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
BS_NotTrue	plf/Smallstep.html	/^| <a name="BS_NotTrue"><span class="id" type="constructor">BS_NotTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
BTrue	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BTrue"><span class="id" type="constructor">BTrue<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a><br\/>$/;"	a
BTrue	lf/imp.ml	/^| BTrue$/;"	C	type:bexp
BTrue	lf/imp.mli	/^| BTrue$/;"	C	type:bexp
BTrue	lf/imp1.ml	/^| BTrue$/;"	C	type:bexp
BTrue	lf/imp1.mli	/^| BTrue$/;"	C	type:bexp
BTrue	lf/imp2.ml	/^| BTrue$/;"	C	type:bexp
BTrue	lf/imp2.mli	/^| BTrue$/;"	C	type:bexp
Baz1	lf/Lists.html	/^&nbsp;&nbsp;| <a name="Baz1"><span class="id" type="constructor">Baz1<\/span><\/a> : <a class="idref" href="Lists.html#baz"><span class="id" type="inductive">baz<\/span><\/a> → <a class="idref" href="Lists.html#baz"><span class="id" type="inductive">baz<\/span><\/a><br\/>$/;"	a
Baz2	lf/Lists.html	/^&nbsp;&nbsp;| <a name="Baz2"><span class="id" type="constructor">Baz2<\/span><\/a> : <a class="idref" href="Lists.html#baz"><span class="id" type="inductive">baz<\/span><\/a> → <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> → <a class="idref" href="Lists.html#baz"><span class="id" type="inductive">baz<\/span><\/a>.<br\/>$/;"	a
Boxer	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Boxer"><span class="id" type="inductive">Boxer<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
BreakImp	lf/Imp.html	/^<span class="id" type="keyword">Module<\/span> <a name="BreakImp"><span class="id" type="module">BreakImp<\/span><\/a>.<br\/>$/;"	a
BreakImp.CAss	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CAss"><span class="id" type="constructor">CAss<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
BreakImp.CBreak	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CBreak"><span class="id" type="constructor">CBreak<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>               <span class="comment">(*&nbsp;&lt;--&nbsp;new&nbsp;*)<\/span><br\/>$/;"	a
BreakImp.CIf	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
BreakImp.CSeq	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
BreakImp.CSkip	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
BreakImp.CWhile	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
BreakImp.E_Skip	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
BreakImp.SBreak	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.SBreak"><span class="id" type="constructor">SBreak<\/span><\/a> : <a class="idref" href="Imp.html#result"><span class="id" type="inductive">result<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
BreakImp.SContinue	lf/Imp.html	/^&nbsp;&nbsp;| <a name="BreakImp.SContinue"><span class="id" type="constructor">SContinue<\/span><\/a> : <a class="idref" href="Imp.html#result"><span class="id" type="inductive">result<\/span><\/a><br\/>$/;"	a
BreakImp.break_ignore	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="BreakImp.break_ignore"><span class="id" type="lemma">break_ignore<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">s<\/span>,<br\/>$/;"	a
BreakImp.ceval	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="BreakImp.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Imp.html#BreakImp.com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <a class="idref" href="Imp.html#BreakImp.result"><span class="id" type="inductive">result<\/span><\/a> → <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
BreakImp.ceval_deterministic	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="BreakImp.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ (<span class="id" type="var">c<\/span>:<a class="idref" href="Imp.html#BreakImp.com"><span class="id" type="inductive">com<\/span><\/a>) <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span> <span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span>,<br\/>$/;"	a
BreakImp.com	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="BreakImp.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
BreakImp.result	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="BreakImp.result"><span class="id" type="inductive">result<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
BreakImp.while_break_true	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="BreakImp.while_break_true"><span class="id" type="lemma">while_break_true<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
BreakImp.while_continue	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="BreakImp.while_continue"><span class="id" type="lemma">while_continue<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">s<\/span>,<br\/>$/;"	a
BreakImp.while_stops_on_break	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="BreakImp.while_stops_on_break"><span class="id" type="lemma">while_stops_on_break<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
C	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="C"><span class="id" type="constructor">C<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>         <span class="comment">(*&nbsp;Constant&nbsp;*)<\/span><br\/>$/;"	a
C<sub	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="C<sub>1<\/sub>"><span class="id" type="constructor">C<sub>1<\/sub><\/span><\/a> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span> → <a class="idref" href="IndPrinciples.html#foo'"><span class="id" type="inductive">foo'<\/span><\/a> <span class="id" type="var">X<\/span> → <a class="idref" href="IndPrinciples.html#foo'"><span class="id" type="inductive">foo'<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
C<sub	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="C<sub>2<\/sub>"><span class="id" type="constructor">C<sub>2<\/sub><\/span><\/a> : <a class="idref" href="IndPrinciples.html#foo'"><span class="id" type="inductive">foo'<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/>$/;"	a
CAss	lf/Imp.html	/^&nbsp;&nbsp;| <a name="CAss"><span class="id" type="constructor">CAss<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CAss	lf/imp.ml	/^| CAss of id * aexp$/;"	C	type:com
CAss	lf/imp.mli	/^| CAss of id * aexp$/;"	C	type:com
CAss	lf/imp1.mli	/^| CAss of id * aexp$/;"	C	type:com
CAss	lf/imp2.ml	/^| CAss of id * aexp$/;"	C	type:com
CAss	lf/imp2.mli	/^| CAss of id * aexp$/;"	C	type:com
CAss_congruence	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="CAss_congruence"><span class="id" type="lemma">CAss_congruence<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
CIf	lf/Imp.html	/^&nbsp;&nbsp;| <a name="CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CIf	lf/imp.ml	/^| CIf of bexp * com * com$/;"	C	type:com
CIf	lf/imp.mli	/^| CIf of bexp * com * com$/;"	C	type:com
CIf	lf/imp1.mli	/^| CIf of bexp * com * com$/;"	C	type:com
CIf	lf/imp2.ml	/^| CIf of bexp * com * com$/;"	C	type:com
CIf	lf/imp2.mli	/^| CIf of bexp * com * com$/;"	C	type:com
CIf_congruence	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="CIf_congruence"><span class="id" type="lemma">CIf_congruence<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">b'<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
CImp	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="CImp"><span class="id" type="module">CImp<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
CImp.CAss	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CAss"><span class="id" type="constructor">CAss<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CImp.CIf	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CImp.CPar	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CPar"><span class="id" type="constructor">CPar<\/span><\/a> : <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
CImp.CS_Ass	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_Ass"><span class="id" type="constructor">CS_Ass<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
CImp.CS_AssStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_AssStep"><span class="id" type="constructor">CS_AssStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">a<\/span> <span class="id" type="var">a'<\/span>,<br\/>$/;"	a
CImp.CS_IfFalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_IfFalse"><span class="id" type="constructor">CS_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CImp.CS_IfStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_IfStep"><span class="id" type="constructor">CS_IfStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">b'<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CImp.CS_IfTrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_IfTrue"><span class="id" type="constructor">CS_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CImp.CS_Par1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_Par1"><span class="id" type="constructor">CS_Par1<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
CImp.CS_Par2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_Par2"><span class="id" type="constructor">CS_Par2<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
CImp.CS_ParDone	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_ParDone"><span class="id" type="constructor">CS_ParDone<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
CImp.CS_SeqFinish	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_SeqFinish"><span class="id" type="constructor">CS_SeqFinish<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CImp.CS_SeqStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_SeqStep"><span class="id" type="constructor">CS_SeqStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CImp.CS_While	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CS_While"><span class="id" type="constructor">CS_While<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
CImp.CSeq	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CImp.CSkip	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CImp.CWhile	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CImp.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Smallstep.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CImp.cmultistep	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="CImp.cmultistep"><span class="id" type="definition">cmultistep<\/span><\/a> := <a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="Smallstep.html#CImp.cstep"><span class="id" type="inductive">cstep<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
CImp.com	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="CImp.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
CImp.cstep	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="CImp.cstep"><span class="id" type="inductive">cstep<\/span><\/a> : (<a class="idref" href="Smallstep.html#CImp.com"><span class="id" type="inductive">com<\/span><\/a> * <span class="id" type="definition">state<\/span>)  → (<a class="idref" href="Smallstep.html#CImp.com"><span class="id" type="inductive">com<\/span><\/a> * <span class="id" type="definition">state<\/span>) → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
CImp.par_body_n	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="CImp.par_body_n"><span class="id" type="lemma">par_body_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
CImp.par_body_n__Sn	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="CImp.par_body_n__Sn"><span class="id" type="lemma">par_body_n__Sn<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
CImp.par_loop	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="CImp.par_loop"><span class="id" type="definition">par_loop<\/span><\/a> : <a class="idref" href="Smallstep.html#CImp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
CImp.par_loop_any_X	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="CImp.par_loop_any_X"><span class="id" type="lemma">par_loop_any_X<\/span><\/a>:<br\/>$/;"	a
CImp.par_loop_example_0	plf/Smallstep.html	/^<span class="id" type="keyword">Example<\/span> <a name="CImp.par_loop_example_0"><span class="id" type="definition">par_loop_example_0<\/span><\/a>:<br\/>$/;"	a
CImp.par_loop_example_2	plf/Smallstep.html	/^<span class="id" type="keyword">Example<\/span> <a name="CImp.par_loop_example_2"><span class="id" type="definition">par_loop_example_2<\/span><\/a>:<br\/>$/;"	a
COIND	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="COIND"><span class="id" type="definition">COIND<\/span><\/a> (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>) := <a class="idref" href="LibTactics.html#P"><span class="id" type="variable">P<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
COQC	lf/Makefile	/^COQC?=$(TIMER) "$(COQBIN)coqc"$/;"	m
COQC	plf/Makefile	/^COQC?=$(TIMER) "$(COQBIN)coqc"$/;"	m
COQCHK	lf/Makefile	/^COQCHK?="$(COQBIN)coqchk"$/;"	m
COQCHK	plf/Makefile	/^COQCHK?="$(COQBIN)coqchk"$/;"	m
COQCHKFLAGS	lf/Makefile	/^COQCHKFLAGS?=-silent -o$/;"	m
COQCHKFLAGS	plf/Makefile	/^COQCHKFLAGS?=-silent -o$/;"	m
COQCHKLIBS	lf/Makefile	/^COQCHKLIBS?=\\$/;"	m
COQCHKLIBS	plf/Makefile	/^COQCHKLIBS?=\\$/;"	m
COQDEP	lf/Makefile	/^COQDEP?="$(COQBIN)coqdep" -c$/;"	m
COQDEP	plf/Makefile	/^COQDEP?="$(COQBIN)coqdep" -c$/;"	m
COQDOC	lf/Makefile	/^COQDOC?="$(COQBIN)coqdoc"$/;"	m
COQDOC	plf/Makefile	/^COQDOC?="$(COQBIN)coqdoc"$/;"	m
COQDOCFLAGS	lf/Makefile	/^COQDOCFLAGS?=-interpolate -utf8$/;"	m
COQDOCFLAGS	plf/Makefile	/^COQDOCFLAGS?=-interpolate -utf8$/;"	m
COQDOCLIBS	lf/Makefile	/^COQDOCLIBS?=\\$/;"	m
COQDOCLIBS	plf/Makefile	/^COQDOCLIBS?=\\$/;"	m
COQFLAGS	lf/Makefile	/^COQFLAGS?=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)$/;"	m
COQFLAGS	plf/Makefile	/^COQFLAGS?=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)$/;"	m
COQLIBS	lf/Makefile	/^COQLIBS=$/;"	m
COQLIBS	lf/Makefile	/^COQLIBS?=\\$/;"	m
COQLIBS	plf/Makefile	/^COQLIBS=$/;"	m
COQLIBS	plf/Makefile	/^COQLIBS?=\\$/;"	m
COQMKTOP	lf/Makefile	/^COQMKTOP?="$(COQBIN)coqmktop"$/;"	m
COQMKTOP	plf/Makefile	/^COQMKTOP?="$(COQBIN)coqmktop"$/;"	m
CS_Ass	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_Ass"><span class="id" type="constructor">CS_Ass<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
CS_AssStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_AssStep"><span class="id" type="constructor">CS_AssStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">a<\/span> <span class="id" type="var">a'<\/span>,<br\/>$/;"	a
CS_IfFalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_IfFalse"><span class="id" type="constructor">CS_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CS_IfStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_IfStep"><span class="id" type="constructor">CS_IfStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">b'<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CS_IfTrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_IfTrue"><span class="id" type="constructor">CS_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CS_SeqFinish	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_SeqFinish"><span class="id" type="constructor">CS_SeqFinish<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CS_SeqStep	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_SeqStep"><span class="id" type="constructor">CS_SeqStep<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
CS_While	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="CS_While"><span class="id" type="constructor">CS_While<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
CSeq	lf/Imp.html	/^&nbsp;&nbsp;| <a name="CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CSeq	lf/imp.ml	/^| CSeq of com * com$/;"	C	type:com
CSeq	lf/imp.mli	/^| CSeq of com * com$/;"	C	type:com
CSeq	lf/imp1.mli	/^| CSeq of com * com$/;"	C	type:com
CSeq	lf/imp2.ml	/^| CSeq of com * com$/;"	C	type:com
CSeq	lf/imp2.mli	/^| CSeq of com * com$/;"	C	type:com
CSeq_congruence	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="CSeq_congruence"><span class="id" type="lemma">CSeq_congruence<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
CSkip	lf/Imp.html	/^&nbsp;&nbsp;| <a name="CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
CSkip	lf/imp.ml	/^| CSkip$/;"	C	type:com
CSkip	lf/imp.mli	/^| CSkip$/;"	C	type:com
CSkip	lf/imp1.mli	/^| CSkip$/;"	C	type:com
CSkip	lf/imp2.ml	/^| CSkip$/;"	C	type:com
CSkip	lf/imp2.mli	/^| CSkip$/;"	C	type:com
CWhile	lf/Imp.html	/^&nbsp;&nbsp;| <a name="CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/>$/;"	a
CWhile	lf/imp.ml	/^| CWhile of bexp * com$/;"	C	type:com
CWhile	lf/imp.mli	/^| CWhile of bexp * com$/;"	C	type:com
CWhile	lf/imp1.mli	/^| CWhile of bexp * com$/;"	C	type:com
CWhile	lf/imp2.ml	/^| CWhile of bexp * com$/;"	C	type:com
CWhile	lf/imp2.mli	/^| CWhile of bexp * com$/;"	C	type:com
CWhile_congruence	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="CWhile_congruence"><span class="id" type="lemma">CWhile_congruence<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
Char	lf/IndProp.html	/^| <a name="Char"><span class="id" type="constructor">Char<\/span><\/a> : <span class="id" type="var">T<\/span> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a><br\/>$/;"	a
Combined	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Combined"><span class="id" type="module">Combined<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Combined.C	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.C"><span class="id" type="constructor">C<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Combined.P	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.P"><span class="id" type="constructor">P<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Combined.ST_If	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
Combined.ST_IfFalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Combined.ST_IfTrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Combined.ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Combined.ST_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_Plus2"><span class="id" type="constructor">ST_Plus2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
Combined.ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Combined.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Combined.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#Combined.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#Combined.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Combined.tfalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Combined.tif	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Combined.tm	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Combined.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Combined.ttrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Combined.v_const	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.v_const"><span class="id" type="constructor">v_const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="Smallstep.html#Combined.C"><span class="id" type="constructor">C<\/span><\/a> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>)<br\/>$/;"	a
Combined.v_false	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.v_false"><span class="id" type="constructor">v_false<\/span><\/a> : <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Smallstep.html#Combined.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Combined.v_true	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Combined.v_true"><span class="id" type="constructor">v_true<\/span><\/a> : <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Smallstep.html#Combined.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a><br\/>$/;"	a
Combined.value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Combined.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#Combined.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Coq__1	lf/imp.ml	1;"	M
DCAsgn	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCAsgn"><span class="id" type="constructor">DCAsgn<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> →  <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
DCIf	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCIf"><span class="id" type="constructor">DCIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> →  <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> →  <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
DCPost	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCPost"><span class="id" type="constructor">DCPost<\/span><\/a> : <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
DCPre	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCPre"><span class="id" type="constructor">DCPre<\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
DCSeq	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCSeq"><span class="id" type="constructor">DCSeq<\/span><\/a> : <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
DCSkip	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCSkip"><span class="id" type="constructor">DCSkip<\/span><\/a> :  <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
DCWhile	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="DCWhile"><span class="id" type="constructor">DCWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a><br\/>$/;"	a
Decorated	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="Decorated"><span class="id" type="constructor">Decorated<\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a> → <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
DemoAbsurd1	plf/UseAuto.html	/^<span class="id" type="keyword">Section<\/span> <a name="DemoAbsurd1"><span class="id" type="section">DemoAbsurd1<\/span><\/a>.<br\/>$/;"	a
DeterministicImp	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="DeterministicImp"><span class="id" type="module">DeterministicImp<\/span><\/a>.<br\/>$/;"	a
DeterministicImp.ceval_deterministic	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="DeterministicImp.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
DeterministicImp.ceval_deterministic'	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="DeterministicImp.ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
DeterministicImp.ceval_deterministic''	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="DeterministicImp.ceval_deterministic''"><span class="id" type="lemma">ceval_deterministic''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
DeterministicImp.ceval_deterministic'''	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="DeterministicImp.ceval_deterministic'''"><span class="id" type="lemma">ceval_deterministic'''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
DeterministicImp.ceval_deterministic''''	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="DeterministicImp.ceval_deterministic''''"><span class="id" type="lemma">ceval_deterministic''''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Digit	lf/imp.mli	/^| Digit$/;"	C	type:chartype
E_Ass	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a>  : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">x<\/span>,<br\/>$/;"	a
E_Const	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="E_Const"><span class="id" type="constructor">E_Const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
E_IfFalse	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
E_IfTrue	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
E_None	plf/PE.html	/^&nbsp;&nbsp;| <a name="E_None"><span class="id" type="constructor">E_None<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
E_Plus	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="E_Plus"><span class="id" type="constructor">E_Plus<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
E_Seq	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span>,<br\/>$/;"	a
E_Skip	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
E_Some	plf/PE.html	/^&nbsp;&nbsp;| <a name="E_Some"><span class="id" type="constructor">E_Some<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">l<\/span> <span class="id" type="var">k<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">l'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">l''<\/span>,<br\/>$/;"	a
E_WhileFalse	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
E_WhileTrue	lf/Imp.html	/^&nbsp;&nbsp;| <a name="E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
EmptySet	lf/IndProp.html	/^| <a name="EmptySet"><span class="id" type="constructor">EmptySet<\/span><\/a> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a><br\/>$/;"	a
EmptyStr	lf/IndProp.html	/^| <a name="EmptyStr"><span class="id" type="constructor">EmptyStr<\/span><\/a> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a><br\/>$/;"	a
EmptyString	lf/imp1.ml	/^| EmptyString$/;"	C	type:string
EmptyString	lf/imp1.mli	/^| EmptyString$/;"	C	type:string
EmptyString	lf/imp2.ml	/^| EmptyString$/;"	C	type:string
EmptyString	lf/imp2.mli	/^| EmptyString$/;"	C	type:string
EqualityExamples	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="EqualityExamples"><span class="id" type="module">EqualityExamples<\/span><\/a>.<br\/>$/;"	a
EqualityExamples.big_expression_using	plf/UseTactics.html	/^<span class="id" type="keyword">Axiom<\/span> <a name="EqualityExamples.big_expression_using"><span class="id" type="axiom">big_expression_using<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>. <span class="comment">(*&nbsp;Used&nbsp;in&nbsp;the&nbsp;example&nbsp;*)<\/span><br\/><hr class='doublespaceincode'\/>$/;"	a
EqualityExamples.demo_applys_eq_1	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="EqualityExamples.demo_applys_eq_1"><span class="id" type="lemma">demo_applys_eq_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span>,<br\/>$/;"	a
EqualityExamples.demo_applys_eq_2	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="EqualityExamples.demo_applys_eq_2"><span class="id" type="lemma">demo_applys_eq_2<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span>,<br\/>$/;"	a
EqualityExamples.demo_applys_eq_3	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="EqualityExamples.demo_applys_eq_3"><span class="id" type="lemma">demo_applys_eq_3<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">y<sub>1<\/sub><\/span> <span class="id" type="var">y<sub>2<\/sub><\/span>,<br\/>$/;"	a
EqualityExamples.demo_fequals	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="EqualityExamples.demo_fequals"><span class="id" type="lemma">demo_fequals<\/span><\/a> : ∀ (<span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">d<\/span> <span class="id" type="var">e<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">f<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
EqualityExamples.demo_substs	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="EqualityExamples.demo_substs"><span class="id" type="lemma">demo_substs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> (<span class="id" type="var">f<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
EqualityExamples.mult_0_plus	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="EqualityExamples.mult_0_plus"><span class="id" type="lemma">mult_0_plus<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
EqualityExamples.mult_0_plus'	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="EqualityExamples.mult_0_plus'"><span class="id" type="lemma">mult_0_plus'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
EqualityExamples.mult_0_plus''	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="EqualityExamples.mult_0_plus''"><span class="id" type="lemma">mult_0_plus''<\/span><\/a> : ∀ <span class="id" type="var">u<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">w<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
ExAssertions	plf/Hoare.html	/^<span class="id" type="keyword">Module<\/span> <a name="ExAssertions"><span class="id" type="module">ExAssertions<\/span><\/a>.<br\/>$/;"	a
ExAssertions.as1	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as1"><span class="id" type="definition">as<sub>1<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> := <span class="id" type="keyword">fun<\/span> <span class="id" type="var">st<\/span> ⇒ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a> <span class="id" type="definition">X<\/span> = 3.<br\/>$/;"	a
ExAssertions.as2	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as2"><span class="id" type="definition">as<sub>2<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> := <span class="id" type="keyword">fun<\/span> <span class="id" type="var">st<\/span> ⇒ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a> <span class="id" type="definition">X<\/span> ≤ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a> <span class="id" type="definition">Y<\/span>.<br\/>$/;"	a
ExAssertions.as3	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as3"><span class="id" type="definition">as<sub>3<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
ExAssertions.as4	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as4"><span class="id" type="definition">as<sub>4<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
ExAssertions.as5	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as5"><span class="id" type="definition">as<sub>5<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> := <span class="id" type="keyword">fun<\/span> <span class="id" type="var">st<\/span> ⇒ <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
ExAssertions.as6	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ExAssertions.as6"><span class="id" type="definition">as<sub>6<\/sub><\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> := <span class="id" type="keyword">fun<\/span> <span class="id" type="var">st<\/span> ⇒ <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#False"><span class="id" type="inductive">False<\/span><\/a>.<br\/>$/;"	a
ExSet	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ExSet"><span class="id" type="inductive">ExSet<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Examples	plf/RecordSub.html	/^<span class="id" type="keyword">Module<\/span> <a name="Examples"><span class="id" type="module">Examples<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples	plf/Sub.html	/^<span class="id" type="keyword">Module<\/span> <a name="Examples"><span class="id" type="module">Examples<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples.A	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.A"><span class="id" type="abbreviation">A<\/span><\/a> := (<a class="idref" href="RecordSub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "A")).<br\/>$/;"	a
Examples.A	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.A"><span class="id" type="abbreviation">A<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "A")).<br\/>$/;"	a
Examples.B	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.B"><span class="id" type="abbreviation">B<\/span><\/a> := (<a class="idref" href="RecordSub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "B")).<br\/>$/;"	a
Examples.B	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.B"><span class="id" type="abbreviation">B<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "B")).<br\/>$/;"	a
Examples.C	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.C"><span class="id" type="abbreviation">C<\/span><\/a> := (<a class="idref" href="RecordSub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "C")).<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples.C	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.C"><span class="id" type="abbreviation">C<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "C")).<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples.Employee	plf/Sub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples.Employee"><span class="id" type="definition">Employee<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> <br\/>$/;"	a
Examples.Float	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.Float"><span class="id" type="abbreviation">Float<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "Float")).<br\/>$/;"	a
Examples.Integer	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.Integer"><span class="id" type="abbreviation">Integer<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "Integer")).<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples.Person	plf/Sub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples.Person"><span class="id" type="definition">Person<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> <br\/>$/;"	a
Examples.String	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.String"><span class="id" type="abbreviation">String<\/span><\/a> := (<a class="idref" href="Sub.html#TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "String")).<br\/>$/;"	a
Examples.Student	plf/Sub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples.Student"><span class="id" type="definition">Student<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> <br\/>$/;"	a
Examples.TRcd_j	plf/RecordSub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples.TRcd_j"><span class="id" type="definition">TRcd_j<\/span><\/a>  :=<br\/>$/;"	a
Examples.TRcd_kj	plf/RecordSub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples.TRcd_kj"><span class="id" type="definition">TRcd_kj<\/span><\/a> :=<br\/>$/;"	a
Examples.i	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.i"><span class="id" type="abbreviation">i<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "i").<br\/>$/;"	a
Examples.j	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.j"><span class="id" type="abbreviation">j<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "j").<br\/>$/;"	a
Examples.k	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.k"><span class="id" type="abbreviation">k<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "k").<br\/>$/;"	a
Examples.sub_employee_person	plf/Sub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.sub_employee_person"><span class="id" type="definition">sub_employee_person<\/span><\/a> :<br\/>$/;"	a
Examples.sub_student_person	plf/Sub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.sub_student_person"><span class="id" type="definition">sub_student_person<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_0	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_0"><span class="id" type="definition">subtyping_example_0<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_0	plf/Sub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_0"><span class="id" type="definition">subtyping_example_0<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_1	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_1"><span class="id" type="definition">subtyping_example_1<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_1	plf/Sub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_1"><span class="id" type="definition">subtyping_example_1<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_2	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_2"><span class="id" type="definition">subtyping_example_2<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_2	plf/Sub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_2"><span class="id" type="definition">subtyping_example_2<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_3	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_3"><span class="id" type="definition">subtyping_example_3<\/span><\/a> :<br\/>$/;"	a
Examples.subtyping_example_4	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples.subtyping_example_4"><span class="id" type="definition">subtyping_example_4<\/span><\/a> :<br\/>$/;"	a
Examples.x	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.x"><span class="id" type="abbreviation">x<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "x").<br\/>$/;"	a
Examples.x	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.x"><span class="id" type="abbreviation">x<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "x").<br\/>$/;"	a
Examples.y	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.y"><span class="id" type="abbreviation">y<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "y").<br\/>$/;"	a
Examples.y	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.y"><span class="id" type="abbreviation">y<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "y").<br\/>$/;"	a
Examples.z	plf/RecordSub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.z"><span class="id" type="abbreviation">z<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "z").<br\/>$/;"	a
Examples.z	plf/Sub.html	/^<span class="id" type="keyword">Notation<\/span> <a name="Examples.z"><span class="id" type="abbreviation">z<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "z").<br\/><hr class='doublespaceincode'\/>$/;"	a
Examples2	plf/RecordSub.html	/^<span class="id" type="keyword">Module<\/span> <a name="Examples2"><span class="id" type="module">Examples2<\/span><\/a>.<br\/>$/;"	a
Examples2	plf/Sub.html	/^<span class="id" type="keyword">Module<\/span> <a name="Examples2"><span class="id" type="module">Examples2<\/span><\/a>.<br\/>$/;"	a
Examples2.trcd_kj	plf/RecordSub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Examples2.trcd_kj"><span class="id" type="definition">trcd_kj<\/span><\/a> :=<br\/>$/;"	a
Examples2.typing_example_0	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples2.typing_example_0"><span class="id" type="definition">typing_example_0<\/span><\/a> :<br\/>$/;"	a
Examples2.typing_example_1	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples2.typing_example_1"><span class="id" type="definition">typing_example_1<\/span><\/a> :<br\/>$/;"	a
Examples2.typing_example_2	plf/RecordSub.html	/^<span class="id" type="keyword">Example<\/span> <a name="Examples2.typing_example_2"><span class="id" type="definition">typing_example_2<\/span><\/a> :<br\/>$/;"	a
ExamplesInstantiations	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="ExamplesInstantiations"><span class="id" type="module">ExamplesInstantiations<\/span><\/a>.<br\/>$/;"	a
ExamplesInstantiations.substitution_preserves_typing	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesInstantiations.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
ExamplesLets	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="ExamplesLets"><span class="id" type="module">ExamplesLets<\/span><\/a>.<br\/>$/;"	a
ExamplesLets.demo_lets_1	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_1"><span class="id" type="lemma">demo_lets_1<\/span><\/a> : ∀ (<span class="id" type="var">G<\/span>:<a class="idref" href="Sub.html#context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">T<\/span>:<a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>),<br\/>$/;"	a
ExamplesLets.demo_lets_2	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_2"><span class="id" type="lemma">demo_lets_2<\/span><\/a> : ∀ (<span class="id" type="var">G<\/span>:<a class="idref" href="Sub.html#context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">T<\/span>:<a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>), <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
ExamplesLets.demo_lets_3	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_3"><span class="id" type="lemma">demo_lets_3<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>), <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
ExamplesLets.demo_lets_4	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_4"><span class="id" type="lemma">demo_lets_4<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
ExamplesLets.demo_lets_5	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_5"><span class="id" type="lemma">demo_lets_5<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
ExamplesLets.demo_lets_underscore	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ExamplesLets.demo_lets_underscore"><span class="id" type="lemma">demo_lets_underscore<\/span><\/a> :<br\/>$/;"	a
ExamplesLets.typing_inversion_var	plf/UseTactics.html	/^<span class="id" type="keyword">Axiom<\/span> <a name="ExamplesLets.typing_inversion_var"><span class="id" type="axiom">typing_inversion_var<\/span><\/a> : ∀ (<span class="id" type="var">G<\/span>:<a class="idref" href="Sub.html#context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">T<\/span>:<a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>),<br\/>$/;"	a
Exercises	lf/Poly.html	/^<span class="id" type="keyword">Module<\/span> <a name="Exercises"><span class="id" type="module">Exercises<\/span><\/a>.<br\/>$/;"	a
Exercises.Church	lf/Poly.html	/^<span class="id" type="keyword">Module<\/span> <a name="Exercises.Church"><span class="id" type="module">Church<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.exp	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.exp"><span class="id" type="definition">exp<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a>) : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a><br\/>$/;"	a
Exercises.Church.exp_1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.exp_1"><span class="id" type="definition">exp_1<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.exp"><span class="id" type="axiom">exp<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.exp_2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.exp_2"><span class="id" type="definition">exp_2<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.exp"><span class="id" type="axiom">exp<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> (<a class="idref" href="Poly.html#Exercises.Church.mult"><span class="id" type="axiom">mult<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> (<a class="idref" href="Poly.html#Exercises.Church.mult"><span class="id" type="axiom">mult<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a>)) <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.exp_3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.exp_3"><span class="id" type="definition">exp_3<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.exp"><span class="id" type="axiom">exp<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.mult	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.mult"><span class="id" type="definition">mult<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a>) : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a><br\/>$/;"	a
Exercises.Church.mult_1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.mult_1"><span class="id" type="definition">mult_1<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.mult"><span class="id" type="axiom">mult<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.mult_2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.mult_2"><span class="id" type="definition">mult_2<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.mult"><span class="id" type="axiom">mult<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a> (<a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a>) = <a class="idref" href="Poly.html#Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.mult_3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.mult_3"><span class="id" type="definition">mult_3<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.mult"><span class="id" type="axiom">mult<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.nat	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a> := ∀ <span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>, (<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) → <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.one	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a> :=<br\/>$/;"	a
Exercises.Church.plus	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.plus"><span class="id" type="definition">plus<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a>) : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a><br\/>$/;"	a
Exercises.Church.plus_1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.plus_1"><span class="id" type="definition">plus_1<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.plus_2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.plus_2"><span class="id" type="definition">plus_2<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.plus"><span class="id" type="axiom">plus<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.plus_3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.plus_3"><span class="id" type="definition">plus_3<\/span><\/a> :<br\/>$/;"	a
Exercises.Church.succ	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.succ"><span class="id" type="definition">succ<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a>) : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a><br\/>$/;"	a
Exercises.Church.succ_1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.succ_1"><span class="id" type="definition">succ_1<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.succ"><span class="id" type="axiom">succ<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.succ_2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.succ_2"><span class="id" type="definition">succ_2<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.succ"><span class="id" type="axiom">succ<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.one"><span class="id" type="definition">one<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.succ_3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.Church.succ_3"><span class="id" type="definition">succ_3<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.succ"><span class="id" type="axiom">succ<\/span><\/a> <a class="idref" href="Poly.html#Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> = <a class="idref" href="Poly.html#Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.three	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.three"><span class="id" type="definition">three<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a> := @<a class="idref" href="Poly.html#doit3times"><span class="id" type="definition">doit3times<\/span><\/a>.<br\/>$/;"	a
Exercises.Church.two	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.two"><span class="id" type="definition">two<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a> :=<br\/>$/;"	a
Exercises.Church.zero	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.Church.zero"><span class="id" type="definition">zero<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.Church.nat"><span class="id" type="definition">nat<\/span><\/a> :=<br\/>$/;"	a
Exercises.curry_uncurry	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Exercises.curry_uncurry"><span class="id" type="lemma">curry_uncurry<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> <span class="id" type="var">Z<\/span> : <span class="id" type="keyword">Type<\/span>)<br\/>$/;"	a
Exercises.fold_length	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.fold_length"><span class="id" type="definition">fold_length<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
Exercises.fold_length_correct	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Exercises.fold_length_correct"><span class="id" type="lemma">fold_length_correct<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
Exercises.fold_map	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.fold_map"><span class="id" type="definition">fold_map<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a><br\/>$/;"	a
Exercises.prod_curry	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.prod_curry"><span class="id" type="definition">prod_curry<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> <span class="id" type="var">Z<\/span> : <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
Exercises.prod_uncurry	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Exercises.prod_uncurry"><span class="id" type="definition">prod_uncurry<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> <span class="id" type="var">Z<\/span> : <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
Exercises.test_fold_length1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.test_fold_length1"><span class="id" type="definition">test_fold_length1<\/span><\/a> : <a class="idref" href="Poly.html#Exercises.fold_length"><span class="id" type="definition">fold_length<\/span><\/a> [4;7;0] = 3.<br\/>$/;"	a
Exercises.test_map1'	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="Exercises.test_map1'"><span class="id" type="definition">test_map1'<\/span><\/a>: <a class="idref" href="Poly.html#map"><span class="id" type="definition">map<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> 3) [2;0;2] = [5;3;5].<br\/>$/;"	a
Exercises.uncurry_curry	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Exercises.uncurry_curry"><span class="id" type="lemma">uncurry_curry<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> <span class="id" type="var">Z<\/span> : <span class="id" type="keyword">Type<\/span>)<br\/>$/;"	a
False	lf/imp1.ml	/^| False$/;"	C	type:bool
False	lf/imp1.mli	/^| False$/;"	C	type:bool
False_and_P_imp	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="False_and_P_imp"><span class="id" type="lemma">False_and_P_imp<\/span><\/a>: ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>,<br\/>$/;"	a
FirstTry	lf/IndProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="FirstTry"><span class="id" type="module">FirstTry<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
FirstTry.ReflectF	lf/IndProp.html	/^| <a name="FirstTry.ReflectF"><span class="id" type="constructor">ReflectF<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>), ¬ <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
FirstTry.ReflectT	lf/IndProp.html	/^| <a name="FirstTry.ReflectT"><span class="id" type="constructor">ReflectT<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>), <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a><br\/>$/;"	a
FirstTry.reflect	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="FirstTry.reflect"><span class="id" type="inductive">reflect<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> → <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
GALLINA	lf/Makefile	/^GALLINA?="$(COQBIN)gallina"$/;"	m
GALLINA	plf/Makefile	/^GALLINA?="$(COQBIN)gallina"$/;"	m
GFILES	lf/Makefile	/^GFILES:=$(VFILES:.v=.g)$/;"	m
GFILES	plf/Makefile	/^GFILES:=$(VFILES:.v=.g)$/;"	m
GHTMLFILES	lf/Makefile	/^GHTMLFILES:=$(VFILES:.v=.g.html)$/;"	m
GHTMLFILES	plf/Makefile	/^GHTMLFILES:=$(VFILES:.v=.g.html)$/;"	m
GLOBFILES	lf/Makefile	/^GLOBFILES:=$(VFILES:.v=.glob)$/;"	m
GLOBFILES	plf/Makefile	/^GLOBFILES:=$(VFILES:.v=.glob)$/;"	m
GenExample	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="GenExample"><span class="id" type="module">GenExample<\/span><\/a>.<br\/>$/;"	a
GenExample.substitution_preserves_typing	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="GenExample.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
Goto	plf/PE.html	/^&nbsp;&nbsp;| <a name="Goto"><span class="id" type="constructor">Goto<\/span><\/a> : <span class="id" type="var">Label<\/span> → <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <span class="id" type="var">Label<\/span><br\/>$/;"	a
HASNATDYNLINK_OR_EMPTY	lf/Makefile	/^HASNATDYNLINK_OR_EMPTY := yes$/;"	m
HASNATDYNLINK_OR_EMPTY	lf/Makefile	/^HASNATDYNLINK_OR_EMPTY :=$/;"	m
HASNATDYNLINK_OR_EMPTY	plf/Makefile	/^HASNATDYNLINK_OR_EMPTY := yes$/;"	m
HASNATDYNLINK_OR_EMPTY	plf/Makefile	/^HASNATDYNLINK_OR_EMPTY :=$/;"	m
HIDE	lf/Makefile	/^HIDE := $(if $(VERBOSE),,@)$/;"	m
HIDE	plf/Makefile	/^HIDE := $(if $(VERBOSE),,@)$/;"	m
HTML	lf/common/jquery-ui/external/jquery/jquery.js	/^	elemdisplay = {$/;"	p	class:iframe
HTML	plf/common/jquery-ui/external/jquery/jquery.js	/^	elemdisplay = {$/;"	p	class:iframe
HTMLFILES	lf/Makefile	/^HTMLFILES:=$(VFILES:.v=.html)$/;"	m
HTMLFILES	plf/Makefile	/^HTMLFILES:=$(VFILES:.v=.html)$/;"	m
H_Asgn	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_Asgn"><span class="id" type="constructor">H_Asgn<\/span><\/a> : ∀ <span class="id" type="var">Q<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">a<\/span>,<br\/>$/;"	a
H_Consequence	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_Consequence"><span class="id" type="constructor">H_Consequence<\/span><\/a>  : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">P'<\/span> <span class="id" type="var">Q'<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
H_Consequence_post	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="H_Consequence_post"><span class="id" type="lemma">H_Consequence_post<\/span><\/a>  : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">Q'<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
H_Consequence_pre	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="H_Consequence_pre"><span class="id" type="lemma">H_Consequence_pre<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">P'<\/span>: <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
H_If	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_If"><span class="id" type="constructor">H_If<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
H_Post_True_deriv	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="H_Post_True_deriv"><span class="id" type="lemma">H_Post_True_deriv<\/span><\/a>:<br\/>$/;"	a
H_Pre_False_deriv	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="H_Pre_False_deriv"><span class="id" type="lemma">H_Pre_False_deriv<\/span><\/a>:<br\/>$/;"	a
H_Seq	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_Seq"><span class="id" type="constructor">H_Seq<\/span><\/a>  : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">d<\/span> <span class="id" type="var">R<\/span>,<br\/>$/;"	a
H_Skip	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_Skip"><span class="id" type="constructor">H_Skip<\/span><\/a> : ∀ <span class="id" type="var">P<\/span>,<br\/>$/;"	a
H_While	plf/HoareAsLogic.html	/^&nbsp;&nbsp;| <a name="H_While"><span class="id" type="constructor">H_While<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
Himp	plf/Equiv.html	/^<span class="id" type="keyword">Module<\/span> <a name="Himp"><span class="id" type="module">Himp<\/span><\/a>.<br\/>$/;"	a
Himp	plf/Hoare.html	/^<span class="id" type="keyword">Module<\/span> <a name="Himp"><span class="id" type="module">Himp<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Himp.CAsgn	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CAsgn"><span class="id" type="constructor">CAsgn<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CAss	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CAss"><span class="id" type="constructor">CAss<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CHavoc	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CHavoc"><span class="id" type="constructor">CHavoc<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a>. <span class="comment">(*&nbsp;&lt;----&nbsp;new&nbsp;*)<\/span><br\/><hr class='doublespaceincode'\/>$/;"	a
Himp.CHavoc	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CHavoc"><span class="id" type="constructor">CHavoc<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Himp.CIf	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CIf	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CSeq	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CSeq	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CSkip	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CSkip	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CWhile	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Equiv.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.CWhile	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Himp.E_Ass	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">a<sub>1<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
Himp.E_Ass	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">a<sub>1<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
Himp.E_Havoc	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_Havoc"><span class="id" type="constructor">E_Havoc<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
Himp.E_IfFalse	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_IfFalse	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_IfTrue	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_IfTrue	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_Seq	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>),<br\/>$/;"	a
Himp.E_Seq	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>),<br\/>$/;"	a
Himp.E_Skip	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>, <a class="idref" href="Equiv.html#Himp.::'SKIP'"><span class="id" type="notation">SKIP<\/span><\/a> \/ <a class="idref" href="Equiv.html#st"><span class="id" type="variable">st<\/span><\/a> \\\\ <a class="idref" href="Equiv.html#st"><span class="id" type="variable">st<\/span><\/a><br\/>$/;"	a
Himp.E_Skip	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>, <a class="idref" href="Hoare.html#Himp.::'SKIP'"><span class="id" type="notation">SKIP<\/span><\/a> \/ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a> \\\\ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a><br\/>$/;"	a
Himp.E_WhileFalse	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_WhileFalse	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_WhileTrue	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="Himp.E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.E_WhileTrue	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="Himp.E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
Himp.cequiv	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.cequiv"><span class="id" type="definition">cequiv<\/span><\/a> (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> := ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>,<br\/>$/;"	a
Himp.ceval	plf/Equiv.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Himp.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="definition">state<\/span> → <span class="id" type="definition">state<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Himp.ceval	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Himp.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="definition">state<\/span> → <span class="id" type="definition">state<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Himp.com	plf/Equiv.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Himp.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Himp.com	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Himp.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Himp.havoc_example1	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="Himp.havoc_example1"><span class="id" type="definition">havoc_example1<\/span><\/a> : (<a class="idref" href="Equiv.html#Himp.::'HAVOC'_x"><span class="id" type="notation">HAVOC<\/span><\/a> <span class="id" type="definition">X<\/span>) \/ <span class="id" type="definition">empty_state<\/span> \\\\ <span class="id" type="definition">t_update<\/span> <span class="id" type="definition">empty_state<\/span> <span class="id" type="definition">X<\/span> 0.<br\/>$/;"	a
Himp.havoc_example2	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="Himp.havoc_example2"><span class="id" type="definition">havoc_example2<\/span><\/a> :<br\/>$/;"	a
Himp.havoc_pre	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.havoc_pre"><span class="id" type="definition">havoc_pre<\/span><\/a> (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>) (<span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> <br\/>$/;"	a
Himp.hoare_havoc	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.hoare_havoc"><span class="id" type="lemma">hoare_havoc<\/span><\/a> : ∀ (<span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
Himp.hoare_triple	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.hoare_triple"><span class="id" type="definition">hoare_triple<\/span><\/a> (<span class="id" type="var">P<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">c<\/span>:<a class="idref" href="Hoare.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">Q<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Himp.p1	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p1"><span class="id" type="definition">p<sub>1<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.p1_may_diverge	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Himp.p1_may_diverge"><span class="id" type="lemma">p1_may_diverge<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>, <a class="idref" href="Equiv.html#st"><span class="id" type="variable">st<\/span><\/a> <span class="id" type="definition">X<\/span> ≠ 0 →<br\/>$/;"	a
Himp.p1_p2_equiv	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.p1_p2_equiv"><span class="id" type="lemma">p1_p2_equiv<\/span><\/a> : <a class="idref" href="Equiv.html#Himp.cequiv"><span class="id" type="definition">cequiv<\/span><\/a> <a class="idref" href="Equiv.html#Himp.p1"><span class="id" type="definition">p<sub>1<\/sub><\/span><\/a> <a class="idref" href="Equiv.html#Himp.p2"><span class="id" type="definition">p<sub>2<\/sub><\/span><\/a>.<br\/>$/;"	a
Himp.p2	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p2"><span class="id" type="definition">p<sub>2<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.p2_may_diverge	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Himp.p2_may_diverge"><span class="id" type="lemma">p2_may_diverge<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>, <a class="idref" href="Equiv.html#st"><span class="id" type="variable">st<\/span><\/a> <span class="id" type="definition">X<\/span> ≠ 0 →<br\/>$/;"	a
Himp.p3	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p3"><span class="id" type="definition">p<sub>3<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.p3_p4_inequiv	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.p3_p4_inequiv"><span class="id" type="lemma">p3_p4_inequiv<\/span><\/a> : ¬ <a class="idref" href="Equiv.html#Himp.cequiv"><span class="id" type="definition">cequiv<\/span><\/a> <a class="idref" href="Equiv.html#Himp.p3"><span class="id" type="definition">p<sub>3<\/sub><\/span><\/a> <a class="idref" href="Equiv.html#Himp.p4"><span class="id" type="definition">p<sub>4<\/sub><\/span><\/a>.<br\/>$/;"	a
Himp.p4	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p4"><span class="id" type="definition">p<sub>4<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.p5	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p5"><span class="id" type="definition">p<sub>5<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.p5_p6_equiv	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.p5_p6_equiv"><span class="id" type="lemma">p5_p6_equiv<\/span><\/a> : <a class="idref" href="Equiv.html#Himp.cequiv"><span class="id" type="definition">cequiv<\/span><\/a> <a class="idref" href="Equiv.html#Himp.p5"><span class="id" type="definition">p<sub>5<\/sub><\/span><\/a> <a class="idref" href="Equiv.html#Himp.p6"><span class="id" type="definition">p<sub>6<\/sub><\/span><\/a>.<br\/>$/;"	a
Himp.p6	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.p6"><span class="id" type="definition">p<sub>6<\/sub><\/span><\/a> : <a class="idref" href="Equiv.html#Himp.com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Himp.pXY	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.pXY"><span class="id" type="definition">pXY<\/span><\/a> :=<br\/>$/;"	a
Himp.pXY_cequiv_pYX	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.pXY_cequiv_pYX"><span class="id" type="lemma">pXY_cequiv_pYX<\/span><\/a> :<br\/>$/;"	a
Himp.pYX	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.pYX"><span class="id" type="definition">pYX<\/span><\/a> :=<br\/>$/;"	a
Himp.pcopy	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.pcopy"><span class="id" type="definition">pcopy<\/span><\/a> :=<br\/>$/;"	a
Himp.ptwice	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Himp.ptwice"><span class="id" type="definition">ptwice<\/span><\/a> :=<br\/>$/;"	a
Himp.ptwice_cequiv_pcopy	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Himp.ptwice_cequiv_pcopy"><span class="id" type="lemma">ptwice_cequiv_pcopy<\/span><\/a> :<br\/>$/;"	a
Himp2	plf/Hoare2.html	/^<span class="id" type="keyword">Module<\/span> <a name="Himp2"><span class="id" type="module">Himp2<\/span><\/a>.<br\/>$/;"	a
Himp2.hoare_havoc_weakest	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Himp2.hoare_havoc_weakest"><span class="id" type="lemma">hoare_havoc_weakest<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
HintsTransitivity	plf/UseAuto.html	/^<span class="id" type="keyword">Section<\/span> <a name="HintsTransitivity"><span class="id" type="section">HintsTransitivity<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
IFB_false	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IFB_false"><span class="id" type="lemma">IFB_false<\/span><\/a>: ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
IFB_true	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IFB_true"><span class="id" type="lemma">IFB_true<\/span><\/a>: ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
IFB_true_simple	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IFB_true_simple"><span class="id" type="lemma">IFB_true_simple<\/span><\/a>: ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
Id	lf/Lists.html	/^&nbsp;&nbsp;| <a name="Id"><span class="id" type="constructor">Id<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Lists.html#id"><span class="id" type="inductive">id<\/span><\/a>.<br\/>$/;"	a
Id	lf/Maps.html	/^&nbsp;&nbsp;| <a name="Id"><span class="id" type="constructor">Id<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a> → <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
If	plf/PE.html	/^&nbsp;&nbsp;| <a name="If"><span class="id" type="constructor">If<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <span class="id" type="var">Label<\/span> → <span class="id" type="var">Label<\/span> → <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <span class="id" type="var">Label<\/span><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CAss"><span class="id" type="constructor">CAss<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CIf1"><span class="id" type="constructor">CIf1<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">a<sub>1<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>, <a class="idref" href="Hoare.html#If<sub>1<\/sub>.::'SKIP'"><span class="id" type="notation">SKIP<\/span><\/a> \/ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a> \\\\ <a class="idref" href="Hoare.html#st"><span class="id" type="variable">st<\/span><\/a><br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">st<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="If<sub>1<\/sub>.E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> : <span class="id" type="definition">state<\/span>) (<span class="id" type="var">b<sub>1<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">c<sub>1<\/sub><\/span> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>),<br\/>$/;"	a
If<sub	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="If<sub>1<\/sub>.hoare_triple"><span class="id" type="definition">hoare_triple<\/span><\/a> (<span class="id" type="var">P<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">c<\/span>:<a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">Q<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
If<sub	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="If<sub>1<\/sub>.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Hoare.html#If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="definition">state<\/span> → <span class="id" type="definition">state<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
If<sub	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="If<sub>1<\/sub>.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
If<sub	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="If<sub>1<\/sub>.hoare_if1_good"><span class="id" type="lemma">hoare_if1_good<\/span><\/a> :<br\/>$/;"	a
If<sub	plf/Hoare.html	/^<span class="id" type="keyword">Module<\/span> <a name="If<sub>1<\/sub>"><span class="id" type="module">If<sub>1<\/sub><\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Imp	lf/imp.ml	1;"	M
Imp	lf/imp.mli	1;"	M
Imp1	lf/imp1.ml	1;"	M
Imp1	lf/imp1.mli	1;"	M
Imp2	lf/imp2.ml	1;"	M
Imp2	lf/imp2.mli	1;"	M
Impdriver	lf/impdriver.ml	1;"	M
In	lf/Logic.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="In"><span class="id" type="definition">In<\/span><\/a> {<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">x<\/span> : <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
In_example_1	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="In_example_1"><span class="id" type="definition">In_example_1<\/span><\/a> : <a class="idref" href="Logic.html#In"><span class="id" type="definition">In<\/span><\/a> 4 [1; 2; 3; 4; 5].<br\/>$/;"	a
In_example_2	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="In_example_2"><span class="id" type="definition">In_example_2<\/span><\/a> :<br\/>$/;"	a
In_map	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="In_map"><span class="id" type="lemma">In_map<\/span><\/a> :<br\/>$/;"	a
In_map_iff	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="In_map_iff"><span class="id" type="lemma">In_map_iff<\/span><\/a> :<br\/>$/;"	a
IntrovExamples	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="IntrovExamples"><span class="id" type="module">IntrovExamples<\/span><\/a>.<br\/>$/;"	a
IntrovExamples.ceval_deterministic	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IntrovExamples.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
IntrovExamples.ceval_deterministic'	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IntrovExamples.ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span>,<br\/>$/;"	a
IntrovExamples.dist_exists_or	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IntrovExamples.dist_exists_or"><span class="id" type="lemma">dist_exists_or<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="UseTactics.html#X"><span class="id" type="variable">X<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
IntrovExamples.exists_impl	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="IntrovExamples.exists_impl"><span class="id" type="lemma">exists_impl<\/span><\/a>: ∀ <span class="id" type="var">X<\/span> (<span class="id" type="var">P<\/span> : <a class="idref" href="UseTactics.html#X"><span class="id" type="variable">X<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">R<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
InvertsExamples	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="InvertsExamples"><span class="id" type="module">InvertsExamples<\/span><\/a>.<br\/>$/;"	a
InvertsExamples.ceval_deterministic	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="InvertsExamples.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
InvertsExamples.ceval_deterministic'	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="InvertsExamples.ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
InvertsExamples.skip_left	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="InvertsExamples.skip_left"><span class="id" type="lemma">skip_left<\/span><\/a>: ∀ <span class="id" type="var">c<\/span>,<br\/>$/;"	a
InvertsExamples.skip_left'	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="InvertsExamples.skip_left'"><span class="id" type="lemma">skip_left'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span>,<br\/>$/;"	a
InvertsExamples.typing_nonexample_1	plf/UseTactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="InvertsExamples.typing_nonexample_1"><span class="id" type="definition">typing_nonexample_1<\/span><\/a> :<br\/>$/;"	a
Left	lf/imp1.ml	/^| Left$/;"	C	type:sumbool
Left	lf/imp1.mli	/^| Left$/;"	C	type:sumbool
Left	lf/imp2.ml	/^| Left$/;"	C	type:sumbool
Left	lf/imp2.mli	/^| Left$/;"	C	type:sumbool
LibTacticsCompatibility	plf/LibTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="LibTacticsCompatibility"><span class="id" type="module">LibTacticsCompatibility<\/span><\/a>.<br\/>$/;"	a
Loop	plf/PE.html	/^<span class="id" type="keyword">Module<\/span> <a name="Loop"><span class="id" type="module">Loop<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Loop.E'Ass	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'Ass"><span class="id" type="constructor">E'Ass<\/span><\/a>  : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
Loop.E'IfFalse	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'IfFalse"><span class="id" type="constructor">E'IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
Loop.E'IfTrue	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'IfTrue"><span class="id" type="constructor">E'IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
Loop.E'Seq	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'Seq"><span class="id" type="constructor">E'Seq<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Loop.E'Skip	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'Skip"><span class="id" type="constructor">E'Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
Loop.E'WhileFalse	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'WhileFalse"><span class="id" type="constructor">E'WhileFalse<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Loop.E'WhileTrue	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.E'WhileTrue"><span class="id" type="constructor">E'WhileTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Loop.PE_AssDynamic	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_AssDynamic"><span class="id" type="constructor">PE_AssDynamic<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
Loop.PE_AssStatic	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_AssStatic"><span class="id" type="constructor">PE_AssStatic<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
Loop.PE_If	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_If"><span class="id" type="constructor">PE_If<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">c''<\/span>,<br\/>$/;"	a
Loop.PE_IfFalse	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_IfFalse"><span class="id" type="constructor">PE_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">c''<\/span>,<br\/>$/;"	a
Loop.PE_IfTrue	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_IfTrue"><span class="id" type="constructor">PE_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c''<\/span>,<br\/>$/;"	a
Loop.PE_Seq	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_Seq"><span class="id" type="constructor">PE_Seq<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">c''<\/span>,<br\/>$/;"	a
Loop.PE_Skip	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_Skip"><span class="id" type="constructor">PE_Skip<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span>,<br\/>$/;"	a
Loop.PE_While	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_While"><span class="id" type="constructor">PE_While<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>''<\/span>,<br\/>$/;"	a
Loop.PE_WhileFalse	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_WhileFalse"><span class="id" type="constructor">PE_WhileFalse<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Loop.PE_WhileFixed	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_WhileFixed"><span class="id" type="constructor">PE_WhileFixed<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
Loop.PE_WhileFixedEnd	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_WhileFixedEnd"><span class="id" type="constructor">PE_WhileFixedEnd<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Loop.PE_WhileFixedLoop	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_WhileFixedLoop"><span class="id" type="constructor">PE_WhileFixedLoop<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
Loop.PE_WhileTrue	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.PE_WhileTrue"><span class="id" type="constructor">PE_WhileTrue<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>''<\/span>,<br\/>$/;"	a
Loop.ceval_count	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Loop.ceval_count"><span class="id" type="inductive">ceval_count<\/span><\/a> : <span class="id" type="inductive">com<\/span> → <span class="id" type="definition">state<\/span> → <span class="id" type="definition">state<\/span> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Loop.ceval_count_complete	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.ceval_count_complete"><span class="id" type="lemma">ceval_count_complete<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
Loop.ceval_count_sound	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.ceval_count_sound"><span class="id" type="lemma">ceval_count_sound<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
Loop.pe_ceval_count	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Loop.pe_ceval_count"><span class="id" type="inductive">pe_ceval_count<\/span><\/a> (<span class="id" type="var">c'<\/span>:<span class="id" type="inductive">com<\/span>) (<span class="id" type="var">pe_st'<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">c''<\/span>:<span class="id" type="inductive">com<\/span>)<br\/>$/;"	a
Loop.pe_ceval_count_intro	plf/PE.html	/^&nbsp;&nbsp;| <a name="Loop.pe_ceval_count_intro"><span class="id" type="constructor">pe_ceval_count_intro<\/span><\/a> : ∀ <span class="id" type="var">st'<\/span> <span class="id" type="var">n'<\/span>,<br\/>$/;"	a
Loop.pe_ceval_count_le	plf/PE.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Loop.pe_ceval_count_le"><span class="id" type="lemma">pe_ceval_count_le<\/span><\/a>: ∀ <span class="id" type="var">c'<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">c''<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">n'<\/span>,<br\/>$/;"	a
Loop.pe_com	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Loop.pe_com"><span class="id" type="inductive">pe_com<\/span><\/a> : <span class="id" type="inductive">com<\/span> → <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> → <span class="id" type="inductive">com<\/span> → <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> → <span class="id" type="inductive">com<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Loop.pe_com_complete	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.pe_com_complete"><span class="id" type="lemma">pe_com_complete<\/span><\/a>:<br\/>$/;"	a
Loop.pe_com_correct	plf/PE.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="Loop.pe_com_correct"><span class="id" type="lemma">pe_com_correct<\/span><\/a>:<br\/>$/;"	a
Loop.pe_com_sound	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.pe_com_sound"><span class="id" type="lemma">pe_com_sound<\/span><\/a>:<br\/>$/;"	a
Loop.pe_compare_nil_lookup	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.pe_compare_nil_lookup"><span class="id" type="lemma">pe_compare_nil_lookup<\/span><\/a>: ∀ <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Loop.pe_compare_nil_update	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Loop.pe_compare_nil_update"><span class="id" type="lemma">pe_compare_nil_update<\/span><\/a>: ∀ <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Loop.pe_loop_example1	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="Loop.pe_loop_example1"><span class="id" type="definition">pe_loop_example1<\/span><\/a>:<br\/>$/;"	a
Loop.pe_loop_example2	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="Loop.pe_loop_example2"><span class="id" type="definition">pe_loop_example2<\/span><\/a>:<br\/>$/;"	a
Loop.pe_loop_example3	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="Loop.pe_loop_example3"><span class="id" type="definition">pe_loop_example3<\/span><\/a>:<br\/>$/;"	a
Loop.pe_loop_example4	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="Loop.pe_loop_example4"><span class="id" type="definition">pe_loop_example4<\/span><\/a>:<br\/>$/;"	a
Loop.square_loop	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Loop.square_loop"><span class="id" type="definition">square_loop<\/span><\/a>: <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
Ltac_database_token	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Ltac_database_token"><span class="id" type="inductive">Ltac_database_token<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> := <a name="ltac_database_token"><span class="id" type="constructor">ltac_database_token<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MApp	lf/IndProp.html	/^| <a name="MApp"><span class="id" type="constructor">MApp<\/span><\/a> : ∀ <span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">re<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">re<sub>2<\/sub><\/span>,<br\/>$/;"	a
MChar	lf/IndProp.html	/^| <a name="MChar"><span class="id" type="constructor">MChar<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>, <a class="idref" href="IndProp.html#exp_match"><span class="id" type="inductive">exp_match<\/span><\/a> [<a class="idref" href="IndProp.html#x"><span class="id" type="variable">x<\/span><\/a>] (<a class="idref" href="IndProp.html#Char"><span class="id" type="constructor">Char<\/span><\/a> <a class="idref" href="IndProp.html#x"><span class="id" type="variable">x<\/span><\/a>)<br\/>$/;"	a
MEmpty	lf/IndProp.html	/^| <a name="MEmpty"><span class="id" type="constructor">MEmpty<\/span><\/a> : <a class="idref" href="IndProp.html#exp_match"><span class="id" type="inductive">exp_match<\/span><\/a> [] <a class="idref" href="IndProp.html#EmptyStr"><span class="id" type="constructor">EmptyStr<\/span><\/a><br\/>$/;"	a
MStar'	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MStar'"><span class="id" type="lemma">MStar'<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">ss<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> (<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>)) (<span class="id" type="var">re<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>),<br\/>$/;"	a
MStar''	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MStar''"><span class="id" type="lemma">MStar''<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>),<br\/>$/;"	a
MStar0	lf/IndProp.html	/^| <a name="MStar0"><span class="id" type="constructor">MStar0<\/span><\/a> : ∀ <span class="id" type="var">re<\/span>, <a class="idref" href="IndProp.html#exp_match"><span class="id" type="inductive">exp_match<\/span><\/a> [] (<a class="idref" href="IndProp.html#Star"><span class="id" type="constructor">Star<\/span><\/a> <a class="idref" href="IndProp.html#re"><span class="id" type="variable">re<\/span><\/a>)<br\/>$/;"	a
MStar1	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MStar1"><span class="id" type="lemma">MStar1<\/span><\/a> :<br\/>$/;"	a
MStarApp	lf/IndProp.html	/^| <a name="MStarApp"><span class="id" type="constructor">MStarApp<\/span><\/a> : ∀ <span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">re<\/span>,<br\/>$/;"	a
MUnion'	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MUnion'"><span class="id" type="lemma">MUnion'<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<sub>1<\/sub><\/span> <span class="id" type="var">re<sub>2<\/sub><\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
MUnionL	lf/IndProp.html	/^| <a name="MUnionL"><span class="id" type="constructor">MUnionL<\/span><\/a> : ∀ <span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">re<sub>1<\/sub><\/span> <span class="id" type="var">re<sub>2<\/sub><\/span>,<br\/>$/;"	a
MUnionR	lf/IndProp.html	/^| <a name="MUnionR"><span class="id" type="constructor">MUnionR<\/span><\/a> : ∀ <span class="id" type="var">re<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">re<sub>2<\/sub><\/span>,<br\/>$/;"	a
MumbleGrumble	lf/Poly.html	/^<span class="id" type="keyword">Module<\/span> <a name="MumbleGrumble"><span class="id" type="module">MumbleGrumble<\/span><\/a>.<br\/>$/;"	a
MumbleGrumble.a	lf/Poly.html	/^&nbsp;&nbsp;| <a name="MumbleGrumble.a"><span class="id" type="constructor">a<\/span><\/a> : <a class="idref" href="Poly.html#mumble"><span class="id" type="inductive">mumble<\/span><\/a><br\/>$/;"	a
MumbleGrumble.b	lf/Poly.html	/^&nbsp;&nbsp;| <a name="MumbleGrumble.b"><span class="id" type="constructor">b<\/span><\/a> : <a class="idref" href="Poly.html#mumble"><span class="id" type="inductive">mumble<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Poly.html#mumble"><span class="id" type="inductive">mumble<\/span><\/a><br\/>$/;"	a
MumbleGrumble.c	lf/Poly.html	/^&nbsp;&nbsp;| <a name="MumbleGrumble.c"><span class="id" type="constructor">c<\/span><\/a> : <a class="idref" href="Poly.html#mumble"><span class="id" type="inductive">mumble<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MumbleGrumble.d	lf/Poly.html	/^&nbsp;&nbsp;| <a name="MumbleGrumble.d"><span class="id" type="constructor">d<\/span><\/a> : <a class="idref" href="Poly.html#MumbleGrumble.mumble"><span class="id" type="inductive">mumble<\/span><\/a> → <a class="idref" href="Poly.html#grumble"><span class="id" type="inductive">grumble<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
MumbleGrumble.e	lf/Poly.html	/^&nbsp;&nbsp;| <a name="MumbleGrumble.e"><span class="id" type="constructor">e<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="Poly.html#grumble"><span class="id" type="inductive">grumble<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/>$/;"	a
MumbleGrumble.grumble	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="MumbleGrumble.grumble"><span class="id" type="inductive">grumble<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
MumbleGrumble.mumble	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="MumbleGrumble.mumble"><span class="id" type="inductive">mumble<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
MyEquality	lf/ProofObjects.html	/^<span class="id" type="keyword">Module<\/span> <a name="MyEquality"><span class="id" type="module">MyEquality<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MyEquality.eq	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="MyEquality.eq"><span class="id" type="inductive">eq<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} : <span class="id" type="var">X<\/span> → <span class="id" type="var">X<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
MyEquality.eq_refl	lf/ProofObjects.html	/^| <a name="MyEquality.eq_refl"><span class="id" type="constructor">eq_refl<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>, <a class="idref" href="ProofObjects.html#eq"><span class="id" type="inductive">eq<\/span><\/a> <a class="idref" href="ProofObjects.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="ProofObjects.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MyEquality.four	lf/ProofObjects.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MyEquality.four"><span class="id" type="lemma">four<\/span><\/a>: 2 + 2 = 1 + 3.<br\/>$/;"	a
MyEquality.four'	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="MyEquality.four'"><span class="id" type="definition">four'<\/span><\/a> : 2 + 2 = 1 + 3 :=<br\/>$/;"	a
MyEquality.leibniz_equality	lf/ProofObjects.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="MyEquality.leibniz_equality"><span class="id" type="lemma">leibniz_equality<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span>: <a class="idref" href="ProofObjects.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
MyEquality.singleton	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="MyEquality.singleton"><span class="id" type="definition">singleton<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span>:<a class="idref" href="ProofObjects.html#X"><span class="id" type="variable">X<\/span><\/a>), []++[<a class="idref" href="ProofObjects.html#x"><span class="id" type="variable">x<\/span><\/a>] = <a class="idref" href="ProofObjects.html#x"><span class="id" type="variable">x<\/span><\/a>::[]  :=<br\/>$/;"	a
MyIff	lf/Logic.html	/^<span class="id" type="keyword">Module<\/span> <a name="MyIff"><span class="id" type="module">MyIff<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MyIff.iff	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="MyIff.iff"><span class="id" type="definition">iff<\/span><\/a> (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>) := (<a class="idref" href="Logic.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="Logic.html#Q"><span class="id" type="variable">Q<\/span><\/a>) ∧ (<a class="idref" href="Logic.html#Q"><span class="id" type="variable">Q<\/span><\/a> → <a class="idref" href="Logic.html#P"><span class="id" type="variable">P<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
MyNot	lf/Logic.html	/^<span class="id" type="keyword">Module<\/span> <a name="MyNot"><span class="id" type="module">MyNot<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
MyNot.not	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="MyNot.not"><span class="id" type="definition">not<\/span><\/a> (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>) := <a class="idref" href="Logic.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#False"><span class="id" type="inductive">False<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
N	lf/imp.mli	1;"	M
N0	lf/imp.mli	/^| N0$/;"	C	type:n
NATIVEFILES	lf/Makefile	/^NATIVEFILES=$(foreach f, $(ALLNATIVEFILES), $(wildcard $f))$/;"	m
NATIVEFILES	plf/Makefile	/^NATIVEFILES=$(foreach f, $(ALLNATIVEFILES), $(wildcard $f))$/;"	m
NaryExamples	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="NaryExamples"><span class="id" type="module">NaryExamples<\/span><\/a>.<br\/>$/;"	a
NaryExamples.demo_branch	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="NaryExamples.demo_branch"><span class="id" type="lemma">demo_branch<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
NaryExamples.demo_splits	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="NaryExamples.demo_splits"><span class="id" type="lemma">demo_splits<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
NaryExamples.progress	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NaryExamples.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
Nat	lf/imp.mli	1;"	M
Nat	lf/imp1.mli	1;"	M
Nat	lf/imp2.mli	1;"	M
NatList	lf/Lists.html	/^<span class="id" type="keyword">Module<\/span> <a name="NatList"><span class="id" type="module">NatList<\/span><\/a>.<br\/>$/;"	a
NatList.None	lf/Lists.html	/^&nbsp;&nbsp;| <a name="NatList.None"><span class="id" type="constructor">None<\/span><\/a> : <a class="idref" href="Lists.html#natoption"><span class="id" type="inductive">natoption<\/span><\/a>.<br\/>$/;"	a
NatList.Some	lf/Lists.html	/^&nbsp;&nbsp;| <a name="NatList.Some"><span class="id" type="constructor">Some<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Lists.html#natoption"><span class="id" type="inductive">natoption<\/span><\/a><br\/>$/;"	a
NatList.add	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.add"><span class="id" type="definition">add<\/span><\/a> (<span class="id" type="var">v<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a><br\/>$/;"	a
NatList.alternate	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.alternate"><span class="id" type="definition">alternate<\/span><\/a> (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a><br\/>$/;"	a
NatList.app	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.app"><span class="id" type="definition">app<\/span><\/a> (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a> :=<br\/>$/;"	a
NatList.app_assoc	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.app_assoc"><span class="id" type="lemma">app_assoc<\/span><\/a> : ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> <span class="id" type="var">l<sub>3<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.app_assoc4	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.app_assoc4"><span class="id" type="lemma">app_assoc4<\/span><\/a> : ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> <span class="id" type="var">l<sub>3<\/sub><\/span> <span class="id" type="var">l<sub>4<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.app_length	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.app_length"><span class="id" type="lemma">app_length<\/span><\/a> : ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.app_nil_r	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.app_nil_r"><span class="id" type="lemma">app_nil_r<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.bag	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.bag"><span class="id" type="definition">bag<\/span><\/a> := <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>.<br\/>$/;"	a
NatList.beq_natlist	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.beq_natlist"><span class="id" type="definition">beq_natlist<\/span><\/a> (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
NatList.beq_natlist_refl	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.beq_natlist_refl"><span class="id" type="lemma">beq_natlist_refl<\/span><\/a> : ∀ <span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.ble_n_Sn	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.ble_n_Sn"><span class="id" type="lemma">ble_n_Sn<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
NatList.cons	lf/Lists.html	/^&nbsp;&nbsp;| <a name="NatList.cons"><span class="id" type="constructor">cons<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Lists.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a> → <a class="idref" href="Lists.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a>.<br\/>$/;"	a
NatList.count	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.count"><span class="id" type="definition">count<\/span><\/a> (<span class="id" type="var">v<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
NatList.count_member_nonzero	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.count_member_nonzero"><span class="id" type="lemma">count_member_nonzero<\/span><\/a> : ∀ (<span class="id" type="var">s<\/span> : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>),<br\/>$/;"	a
NatList.countoddmembers	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.countoddmembers"><span class="id" type="definition">countoddmembers<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
NatList.fst	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.fst"><span class="id" type="definition">fst<\/span><\/a> (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.fst'	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.fst'"><span class="id" type="definition">fst'<\/span><\/a> (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.fst_swap_is_snd	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.fst_swap_is_snd"><span class="id" type="lemma">fst_swap_is_snd<\/span><\/a> : ∀ (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>),<br\/>$/;"	a
NatList.hd	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.hd"><span class="id" type="definition">hd<\/span><\/a> (<span class="id" type="var">default<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.hd_error	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.hd_error"><span class="id" type="definition">hd_error<\/span><\/a> (<span class="id" type="var">l<\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a><br\/>$/;"	a
NatList.length	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.length"><span class="id" type="definition">length<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.member	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.member"><span class="id" type="definition">member<\/span><\/a> (<span class="id" type="var">v<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
NatList.mylist	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.mylist"><span class="id" type="definition">mylist<\/span><\/a> := <a class="idref" href="Lists.html#NatList.cons"><span class="id" type="constructor">cons<\/span><\/a> 1 (<a class="idref" href="Lists.html#NatList.cons"><span class="id" type="constructor">cons<\/span><\/a> 2 (<a class="idref" href="Lists.html#NatList.cons"><span class="id" type="constructor">cons<\/span><\/a> 3 <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a>)).<br\/>$/;"	a
NatList.mylist1	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.mylist1"><span class="id" type="definition">mylist1<\/span><\/a> := 1 :: (2 :: (3 :: <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a>)).<br\/>$/;"	a
NatList.mylist2	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.mylist2"><span class="id" type="definition">mylist2<\/span><\/a> := 1 :: 2 :: 3 :: <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a>.<br\/>$/;"	a
NatList.mylist3	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.mylist3"><span class="id" type="definition">mylist3<\/span><\/a> := [1;2;3].<br\/>$/;"	a
NatList.natlist	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
NatList.natoption	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
NatList.natprod	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
NatList.nil	lf/Lists.html	/^&nbsp;&nbsp;| <a name="NatList.nil"><span class="id" type="constructor">nil<\/span><\/a>  : <a class="idref" href="Lists.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a><br\/>$/;"	a
NatList.nil_app	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.nil_app"><span class="id" type="lemma">nil_app<\/span><\/a> : ∀ <span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.nonzeros	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.nonzeros"><span class="id" type="definition">nonzeros<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a><br\/>$/;"	a
NatList.nonzeros_app	lf/Lists.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="NatList.nonzeros_app"><span class="id" type="lemma">nonzeros_app<\/span><\/a> : ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.nth_bad	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.nth_bad"><span class="id" type="definition">nth_bad<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.nth_error	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.nth_error"><span class="id" type="definition">nth_error<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a> :=<br\/>$/;"	a
NatList.nth_error'	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.nth_error'"><span class="id" type="definition">nth_error'<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a> :=<br\/>$/;"	a
NatList.oddmembers	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.oddmembers"><span class="id" type="definition">oddmembers<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a><br\/>$/;"	a
NatList.option_elim	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.option_elim"><span class="id" type="definition">option_elim<\/span><\/a> (<span class="id" type="var">d<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">o<\/span> : <a class="idref" href="Lists.html#NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.option_elim_hd	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.option_elim_hd"><span class="id" type="lemma">option_elim_hd<\/span><\/a> : ∀ (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) (<span class="id" type="var">default<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
NatList.pair	lf/Lists.html	/^| <a name="NatList.pair"><span class="id" type="constructor">pair<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Lists.html#natprod"><span class="id" type="inductive">natprod<\/span><\/a>.<br\/>$/;"	a
NatList.remove_all	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.remove_all"><span class="id" type="definition">remove_all<\/span><\/a> (<span class="id" type="var">v<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a><br\/>$/;"	a
NatList.remove_decreases_count	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.remove_decreases_count"><span class="id" type="lemma">remove_decreases_count<\/span><\/a>: ∀ (<span class="id" type="var">s<\/span> : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>),<br\/>$/;"	a
NatList.remove_one	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.remove_one"><span class="id" type="definition">remove_one<\/span><\/a> (<span class="id" type="var">v<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a><br\/>$/;"	a
NatList.repeat	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.repeat"><span class="id" type="definition">repeat<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">count<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a> :=<br\/>$/;"	a
NatList.rev	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.rev"><span class="id" type="definition">rev<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a> :=<br\/>$/;"	a
NatList.rev_app_distr	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.rev_app_distr"><span class="id" type="lemma">rev_app_distr<\/span><\/a>: ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.rev_involutive	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.rev_involutive"><span class="id" type="lemma">rev_involutive<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.rev_length	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.rev_length"><span class="id" type="lemma">rev_length<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.rev_length_firsttry	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.rev_length_firsttry"><span class="id" type="lemma">rev_length_firsttry<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatList.snd	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.snd"><span class="id" type="definition">snd<\/span><\/a> (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.snd'	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.snd'"><span class="id" type="definition">snd'<\/span><\/a> (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatList.snd_fst_is_swap	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.snd_fst_is_swap"><span class="id" type="lemma">snd_fst_is_swap<\/span><\/a> : ∀ (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>),<br\/>$/;"	a
NatList.subset	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatList.subset"><span class="id" type="definition">subset<\/span><\/a> (<span class="id" type="var">s<sub>1<\/sub><\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) (<span class="id" type="var">s<sub>2<\/sub><\/span>:<a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
NatList.sum	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.sum"><span class="id" type="definition">sum<\/span><\/a> : <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a> → <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a> → <a class="idref" href="Lists.html#NatList.bag"><span class="id" type="definition">bag<\/span><\/a><br\/>$/;"	a
NatList.surjective_pairing	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.surjective_pairing"><span class="id" type="lemma">surjective_pairing<\/span><\/a> : ∀ (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>),<br\/>$/;"	a
NatList.surjective_pairing'	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.surjective_pairing'"><span class="id" type="lemma">surjective_pairing'<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
NatList.surjective_pairing_stuck	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.surjective_pairing_stuck"><span class="id" type="lemma">surjective_pairing_stuck<\/span><\/a> : ∀ (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>),<br\/>$/;"	a
NatList.swap_pair	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.swap_pair"><span class="id" type="definition">swap_pair<\/span><\/a> (<span class="id" type="var">p<\/span> : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natprod"><span class="id" type="inductive">natprod<\/span><\/a> :=<br\/>$/;"	a
NatList.test_add1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_add1"><span class="id" type="definition">test_add1<\/span><\/a>:                <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 1 (<a class="idref" href="Lists.html#NatList.add"><span class="id" type="axiom">add<\/span><\/a> 1 [1;4;1]) = 3.<br\/>$/;"	a
NatList.test_add2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_add2"><span class="id" type="definition">test_add2<\/span><\/a>:                <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 5 (<a class="idref" href="Lists.html#NatList.add"><span class="id" type="axiom">add<\/span><\/a> 1 [1;4;1]) = 0.<br\/>$/;"	a
NatList.test_alternate1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_alternate1"><span class="id" type="definition">test_alternate1<\/span><\/a>:<br\/>$/;"	a
NatList.test_alternate2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_alternate2"><span class="id" type="definition">test_alternate2<\/span><\/a>:<br\/>$/;"	a
NatList.test_alternate3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_alternate3"><span class="id" type="definition">test_alternate3<\/span><\/a>:<br\/>$/;"	a
NatList.test_alternate4	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_alternate4"><span class="id" type="definition">test_alternate4<\/span><\/a>:<br\/>$/;"	a
NatList.test_app1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_app1"><span class="id" type="definition">test_app1<\/span><\/a>:             [1;2;3] ++ [4;5] = [1;2;3;4;5].<br\/>$/;"	a
NatList.test_app2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_app2"><span class="id" type="definition">test_app2<\/span><\/a>:             <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a> ++ [4;5] = [4;5].<br\/>$/;"	a
NatList.test_app3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_app3"><span class="id" type="definition">test_app3<\/span><\/a>:             [1;2;3] ++ <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a> = [1;2;3].<br\/>$/;"	a
NatList.test_beq_natlist1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_beq_natlist1"><span class="id" type="definition">test_beq_natlist1<\/span><\/a> :<br\/>$/;"	a
NatList.test_beq_natlist2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_beq_natlist2"><span class="id" type="definition">test_beq_natlist2<\/span><\/a> :<br\/>$/;"	a
NatList.test_beq_natlist3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_beq_natlist3"><span class="id" type="definition">test_beq_natlist3<\/span><\/a> :<br\/>$/;"	a
NatList.test_count1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_count1"><span class="id" type="definition">test_count1<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 1 [1;2;3;1;4;1] = 3.<br\/>$/;"	a
NatList.test_count2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_count2"><span class="id" type="definition">test_count2<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 6 [1;2;3;1;4;1] = 0.<br\/>$/;"	a
NatList.test_countoddmembers1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_countoddmembers1"><span class="id" type="definition">test_countoddmembers1<\/span><\/a>:<br\/>$/;"	a
NatList.test_countoddmembers2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_countoddmembers2"><span class="id" type="definition">test_countoddmembers2<\/span><\/a>:<br\/>$/;"	a
NatList.test_countoddmembers3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_countoddmembers3"><span class="id" type="definition">test_countoddmembers3<\/span><\/a>:<br\/>$/;"	a
NatList.test_hd<sub	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_hd<sub>1<\/sub>"><span class="id" type="definition">test_hd<sub>1<\/sub><\/span><\/a>:             <a class="idref" href="Lists.html#NatList.hd"><span class="id" type="definition">hd<\/span><\/a> 0 [1;2;3] = 1.<br\/>$/;"	a
NatList.test_hd<sub	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_hd<sub>2<\/sub>"><span class="id" type="definition">test_hd<sub>2<\/sub><\/span><\/a>:             <a class="idref" href="Lists.html#NatList.hd"><span class="id" type="definition">hd<\/span><\/a> 0 [] = 0.<br\/>$/;"	a
NatList.test_hd_error1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_hd_error1"><span class="id" type="definition">test_hd_error1<\/span><\/a> : <a class="idref" href="Lists.html#NatList.hd_error"><span class="id" type="axiom">hd_error<\/span><\/a> [] = <a class="idref" href="Lists.html#NatList.None"><span class="id" type="constructor">None<\/span><\/a>.<br\/>$/;"	a
NatList.test_hd_error2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_hd_error2"><span class="id" type="definition">test_hd_error2<\/span><\/a> : <a class="idref" href="Lists.html#NatList.hd_error"><span class="id" type="axiom">hd_error<\/span><\/a> [1] = <a class="idref" href="Lists.html#NatList.Some"><span class="id" type="constructor">Some<\/span><\/a> 1.<br\/>$/;"	a
NatList.test_hd_error3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_hd_error3"><span class="id" type="definition">test_hd_error3<\/span><\/a> : <a class="idref" href="Lists.html#NatList.hd_error"><span class="id" type="axiom">hd_error<\/span><\/a> [5;6] = <a class="idref" href="Lists.html#NatList.Some"><span class="id" type="constructor">Some<\/span><\/a> 5.<br\/>$/;"	a
NatList.test_member1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_member1"><span class="id" type="definition">test_member1<\/span><\/a>:             <a class="idref" href="Lists.html#NatList.member"><span class="id" type="axiom">member<\/span><\/a> 1 [1;4;1] = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
NatList.test_member2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_member2"><span class="id" type="definition">test_member2<\/span><\/a>:             <a class="idref" href="Lists.html#NatList.member"><span class="id" type="axiom">member<\/span><\/a> 2 [1;4;1] = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
NatList.test_nonzeros	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_nonzeros"><span class="id" type="definition">test_nonzeros<\/span><\/a>:<br\/>$/;"	a
NatList.test_nth_error1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_nth_error1"><span class="id" type="definition">test_nth_error1<\/span><\/a> : <a class="idref" href="Lists.html#NatList.nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [4;5;6;7] 0 = <a class="idref" href="Lists.html#NatList.Some"><span class="id" type="constructor">Some<\/span><\/a> 4.<br\/>$/;"	a
NatList.test_nth_error2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_nth_error2"><span class="id" type="definition">test_nth_error2<\/span><\/a> : <a class="idref" href="Lists.html#NatList.nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [4;5;6;7] 3 = <a class="idref" href="Lists.html#NatList.Some"><span class="id" type="constructor">Some<\/span><\/a> 7.<br\/>$/;"	a
NatList.test_nth_error3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_nth_error3"><span class="id" type="definition">test_nth_error3<\/span><\/a> : <a class="idref" href="Lists.html#NatList.nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [4;5;6;7] 9 = <a class="idref" href="Lists.html#NatList.None"><span class="id" type="constructor">None<\/span><\/a>.<br\/>$/;"	a
NatList.test_oddmembers	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_oddmembers"><span class="id" type="definition">test_oddmembers<\/span><\/a>:<br\/>$/;"	a
NatList.test_remove_all1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_all1"><span class="id" type="definition">test_remove_all1<\/span><\/a>:  <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 5 (<a class="idref" href="Lists.html#NatList.remove_all"><span class="id" type="axiom">remove_all<\/span><\/a> 5 [2;1;5;4;1]) = 0.<br\/>$/;"	a
NatList.test_remove_all2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_all2"><span class="id" type="definition">test_remove_all2<\/span><\/a>:  <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 5 (<a class="idref" href="Lists.html#NatList.remove_all"><span class="id" type="axiom">remove_all<\/span><\/a> 5 [2;1;4;1]) = 0.<br\/>$/;"	a
NatList.test_remove_all3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_all3"><span class="id" type="definition">test_remove_all3<\/span><\/a>:  <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 4 (<a class="idref" href="Lists.html#NatList.remove_all"><span class="id" type="axiom">remove_all<\/span><\/a> 5 [2;1;4;5;1;4]) = 2.<br\/>$/;"	a
NatList.test_remove_all4	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_all4"><span class="id" type="definition">test_remove_all4<\/span><\/a>:  <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 5 (<a class="idref" href="Lists.html#NatList.remove_all"><span class="id" type="axiom">remove_all<\/span><\/a> 5 [2;1;5;4;5;1;4;5;1;4]) = 0.<br\/>$/;"	a
NatList.test_remove_one1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_one1"><span class="id" type="definition">test_remove_one1<\/span><\/a>:<br\/>$/;"	a
NatList.test_remove_one2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_one2"><span class="id" type="definition">test_remove_one2<\/span><\/a>:<br\/>$/;"	a
NatList.test_remove_one3	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_one3"><span class="id" type="definition">test_remove_one3<\/span><\/a>:<br\/>$/;"	a
NatList.test_remove_one4	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_remove_one4"><span class="id" type="definition">test_remove_one4<\/span><\/a>:<br\/>$/;"	a
NatList.test_rev1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_rev1"><span class="id" type="definition">test_rev1<\/span><\/a>:            <a class="idref" href="Lists.html#NatList.rev"><span class="id" type="definition">rev<\/span><\/a> [1;2;3] = [3;2;1].<br\/>$/;"	a
NatList.test_rev2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_rev2"><span class="id" type="definition">test_rev2<\/span><\/a>:            <a class="idref" href="Lists.html#NatList.rev"><span class="id" type="definition">rev<\/span><\/a> <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a> = <a class="idref" href="Lists.html#NatList.nil"><span class="id" type="constructor">nil<\/span><\/a>.<br\/>$/;"	a
NatList.test_subset1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_subset1"><span class="id" type="definition">test_subset1<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.subset"><span class="id" type="axiom">subset<\/span><\/a> [1;2] [2;1;4;1] = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
NatList.test_subset2	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_subset2"><span class="id" type="definition">test_subset2<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.subset"><span class="id" type="axiom">subset<\/span><\/a> [1;2;2] [2;1;4;1] = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
NatList.test_sum1	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_sum1"><span class="id" type="definition">test_sum1<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.count"><span class="id" type="axiom">count<\/span><\/a> 1 (<a class="idref" href="Lists.html#NatList.sum"><span class="id" type="axiom">sum<\/span><\/a> [1;2;3] [1;4;1]) = 3.<br\/>$/;"	a
NatList.test_tl	lf/Lists.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatList.test_tl"><span class="id" type="definition">test_tl<\/span><\/a>:              <a class="idref" href="Lists.html#NatList.tl"><span class="id" type="definition">tl<\/span><\/a> [1;2;3] = [2;3].<br\/>$/;"	a
NatList.tl	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatList.tl"><span class="id" type="definition">tl<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a> :=<br\/>$/;"	a
NatList.tl_length_pred	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NatList.tl_length_pred"><span class="id" type="lemma">tl_length_pred<\/span><\/a> : ∀ <span class="id" type="var">l<\/span>:<a class="idref" href="Lists.html#NatList.natlist"><span class="id" type="inductive">natlist<\/span><\/a>,<br\/>$/;"	a
NatPlayground	lf/Basics.html	/^<span class="id" type="keyword">Module<\/span> <a name="NatPlayground"><span class="id" type="module">NatPlayground<\/span><\/a>.<br\/>$/;"	a
NatPlayground.O	lf/Basics.html	/^&nbsp;&nbsp;| <a name="NatPlayground.O"><span class="id" type="constructor">O<\/span><\/a> : <a class="idref" href="Basics.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
NatPlayground.S	lf/Basics.html	/^&nbsp;&nbsp;| <a name="NatPlayground.S"><span class="id" type="constructor">S<\/span><\/a> : <a class="idref" href="Basics.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Basics.html#nat"><span class="id" type="inductive">nat<\/span><\/a>.<br\/>$/;"	a
NatPlayground.nat	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="NatPlayground.nat"><span class="id" type="inductive">nat<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
NatPlayground.nat'	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="NatPlayground.nat'"><span class="id" type="inductive">nat'<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
NatPlayground.pred	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="NatPlayground.pred"><span class="id" type="definition">pred<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="Basics.html#NatPlayground.nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#NatPlayground.nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatPlayground.stop	lf/Basics.html	/^&nbsp;&nbsp;| <a name="NatPlayground.stop"><span class="id" type="constructor">stop<\/span><\/a> : <a class="idref" href="Basics.html#nat'"><span class="id" type="inductive">nat'<\/span><\/a><br\/>$/;"	a
NatPlayground.tick	lf/Basics.html	/^&nbsp;&nbsp;| <a name="NatPlayground.tick"><span class="id" type="constructor">tick<\/span><\/a> : <a class="idref" href="Basics.html#nat'"><span class="id" type="inductive">nat'<\/span><\/a> → <a class="idref" href="Basics.html#nat'"><span class="id" type="inductive">nat'<\/span><\/a>.<br\/>$/;"	a
NatPlayground2	lf/Basics.html	/^<span class="id" type="keyword">Module<\/span> <a name="NatPlayground2"><span class="id" type="module">NatPlayground2<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
NatPlayground2.minus	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatPlayground2.minus"><span class="id" type="definition">minus<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatPlayground2.mult	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatPlayground2.mult"><span class="id" type="definition">mult<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatPlayground2.plus	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="NatPlayground2.plus"><span class="id" type="definition">plus<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
NatPlayground2.test_mult1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="NatPlayground2.test_mult1"><span class="id" type="definition">test_mult1<\/span><\/a>: (<a class="idref" href="Basics.html#NatPlayground2.mult"><span class="id" type="definition">mult<\/span><\/a> 3 3) = 9.<br\/>$/;"	a
None	lf/Poly.html	/^&nbsp;&nbsp;| <a name="None"><span class="id" type="constructor">None<\/span><\/a> : <a class="idref" href="Poly.html#option"><span class="id" type="inductive">option<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
None	lf/imp1.ml	/^| None$/;"	C	type:option
None	lf/imp1.mli	/^| None$/;"	C	type:option
None	lf/imp2.ml	/^| None$/;"	C	type:option
None	lf/imp2.mli	/^| None$/;"	C	type:option
NoneE	lf/ImpParser.html	/^&nbsp;&nbsp;| <a name="NoneE"><span class="id" type="constructor">NoneE<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a> → <a class="idref" href="ImpParser.html#optionE"><span class="id" type="inductive">optionE<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
NoneE	lf/imp.ml	/^| NoneE of char list$/;"	C	type:optionE
NoneE	lf/imp.mli	/^| NoneE of char list$/;"	C	type:optionE
NormalizePlayground	plf/Types.html	/^<span class="id" type="keyword">Module<\/span> <a name="NormalizePlayground"><span class="id" type="module">NormalizePlayground<\/span><\/a>.<br\/>$/;"	a
NormalizePlayground.normalize_ex	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NormalizePlayground.normalize_ex"><span class="id" type="lemma">normalize_ex<\/span><\/a> : ∃ <span class="id" type="var">e'<\/span>,<br\/>$/;"	a
NormalizePlayground.normalize_ex'	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="NormalizePlayground.normalize_ex'"><span class="id" type="lemma">normalize_ex'<\/span><\/a> : ∃ <span class="id" type="var">e'<\/span>,<br\/>$/;"	a
NormalizePlayground.step_example1	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="NormalizePlayground.step_example1"><span class="id" type="definition">step_example1<\/span><\/a> :<br\/>$/;"	a
NormalizePlayground.step_example1'	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="NormalizePlayground.step_example1'"><span class="id" type="definition">step_example1'<\/span><\/a> :<br\/>$/;"	a
NormalizePlayground.step_example1''	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="NormalizePlayground.step_example1''"><span class="id" type="definition">step_example1''<\/span><\/a> :<br\/>$/;"	a
NormalizePlayground.step_example1'''	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="NormalizePlayground.step_example1'''"><span class="id" type="definition">step_example1'''<\/span><\/a> : ∃ <span class="id" type="var">e'<\/span>,<br\/>$/;"	a
Npos	lf/imp.mli	/^| Npos of positive$/;"	C	type:n
O	lf/imp1.ml	/^| O$/;"	C	type:nat
O	lf/imp1.mli	/^| O$/;"	C	type:nat
OBJFILES	lf/Makefile	/^OBJFILES=$(call vo_to_obj,$(VOFILES))$/;"	m
OBJFILES	plf/Makefile	/^OBJFILES=$(call vo_to_obj,$(VOFILES))$/;"	m
OPT	lf/Makefile	/^OPT?=$/;"	m
OPT	plf/Makefile	/^OPT?=$/;"	m
OTHERFLAGS	lf/Makefile	/^OTHERFLAGS=$/;"	m
OTHERFLAGS	plf/Makefile	/^OTHERFLAGS=$/;"	m
O_le_n	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="O_le_n"><span class="id" type="lemma">O_le_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
Other	lf/imp.mli	/^| Other$/;"	C	type:chartype
P	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="P"><span class="id" type="constructor">P<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>. <span class="comment">(*&nbsp;Plus&nbsp;*)<\/span><br\/>$/;"	a
P	plf/UseAuto.html	/^<span class="id" type="keyword">Axiom<\/span> <a name="P"><span class="id" type="axiom">P<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
PE_AssDynamic	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_AssDynamic"><span class="id" type="constructor">PE_AssDynamic<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub>'<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
PE_AssStatic	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_AssStatic"><span class="id" type="constructor">PE_AssStatic<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
PE_If	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_If"><span class="id" type="constructor">PE_If<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
PE_IfFalse	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_IfFalse"><span class="id" type="constructor">PE_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
PE_IfTrue	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_IfTrue"><span class="id" type="constructor">PE_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
PE_Seq	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_Seq"><span class="id" type="constructor">PE_Seq<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">pe_st'<\/span> <span class="id" type="var">pe_st''<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub>'<\/span> <span class="id" type="var">c<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
PE_Skip	plf/PE.html	/^&nbsp;&nbsp;| <a name="PE_Skip"><span class="id" type="constructor">PE_Skip<\/span><\/a> : ∀ <span class="id" type="var">pe_st<\/span>,<br\/>$/;"	a
P_m0r	lf/IndPrinciples.html	/^<span class="id" type="keyword">Definition<\/span> <a name="P_m0r"><span class="id" type="definition">P_m0r<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
P_m0r'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Definition<\/span> <a name="P_m0r'"><span class="id" type="definition">P_m0r'<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
PartialMap	lf/Lists.html	/^<span class="id" type="keyword">Module<\/span> <a name="PartialMap"><span class="id" type="module">PartialMap<\/span><\/a>.<br\/>$/;"	a
PartialMap.empty	lf/Lists.html	/^&nbsp;&nbsp;| <a name="PartialMap.empty"><span class="id" type="constructor">empty<\/span><\/a>  : <a class="idref" href="Lists.html#partial_map"><span class="id" type="inductive">partial_map<\/span><\/a><br\/>$/;"	a
PartialMap.find	lf/Lists.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="PartialMap.find"><span class="id" type="definition">find<\/span><\/a> (<span class="id" type="var">x<\/span> : <a class="idref" href="Lists.html#id"><span class="id" type="inductive">id<\/span><\/a>) (<span class="id" type="var">d<\/span> : <a class="idref" href="Lists.html#PartialMap.partial_map"><span class="id" type="inductive">partial_map<\/span><\/a>) : <a class="idref" href="Lists.html#NatList.natoption"><span class="id" type="inductive">natoption<\/span><\/a> :=<br\/>$/;"	a
PartialMap.partial_map	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="PartialMap.partial_map"><span class="id" type="inductive">partial_map<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
PartialMap.record	lf/Lists.html	/^&nbsp;&nbsp;| <a name="PartialMap.record"><span class="id" type="constructor">record<\/span><\/a> : <a class="idref" href="Lists.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Lists.html#partial_map"><span class="id" type="inductive">partial_map<\/span><\/a> → <a class="idref" href="Lists.html#partial_map"><span class="id" type="inductive">partial_map<\/span><\/a>.<br\/>$/;"	a
PartialMap.update	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="PartialMap.update"><span class="id" type="definition">update<\/span><\/a> (<span class="id" type="var">d<\/span> : <a class="idref" href="Lists.html#PartialMap.partial_map"><span class="id" type="inductive">partial_map<\/span><\/a>)<br\/>$/;"	a
PartialMap.update_eq	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PartialMap.update_eq"><span class="id" type="lemma">update_eq<\/span><\/a> :<br\/>$/;"	a
PartialMap.update_neq	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PartialMap.update_neq"><span class="id" type="lemma">update_neq<\/span><\/a> :<br\/>$/;"	a
Playground	lf/IndProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="Playground"><span class="id" type="module">Playground<\/span><\/a>.<br\/>$/;"	a
Playground.le	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Playground.le"><span class="id" type="inductive">le<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Playground.le_S	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="Playground.le_S"><span class="id" type="constructor">le_S<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, (<a class="idref" href="IndProp.html#le"><span class="id" type="inductive">le<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>) → (<a class="idref" href="IndProp.html#le"><span class="id" type="inductive">le<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>)).<br\/><hr class='doublespaceincode'\/>$/;"	a
Playground.le_n	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="Playground.le_n"><span class="id" type="constructor">le_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#le"><span class="id" type="inductive">le<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a><br\/>$/;"	a
Playground.test_le<sub	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Playground.test_le<sub>1<\/sub>"><span class="id" type="lemma">test_le<sub>1<\/sub><\/span><\/a> :<br\/>$/;"	a
Playground.test_le<sub	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Playground.test_le<sub>2<\/sub>"><span class="id" type="lemma">test_le<sub>2<\/sub><\/span><\/a> :<br\/>$/;"	a
Playground.test_le<sub	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Playground.test_le<sub>3<\/sub>"><span class="id" type="lemma">test_le<sub>3<\/sub><\/span><\/a> :<br\/>$/;"	a
Pos	lf/imp.mli	1;"	M
PreservationProgressReferences	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="PreservationProgressReferences"><span class="id" type="module">PreservationProgressReferences<\/span><\/a>.<br\/>$/;"	a
PreservationProgressReferences.nth_eq_last'	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="PreservationProgressReferences.nth_eq_last'"><span class="id" type="lemma">nth_eq_last'<\/span><\/a> : ∀ (<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">l<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="UseAuto.html#A"><span class="id" type="variable">A<\/span><\/a>) (<span class="id" type="var">x<\/span> <span class="id" type="var">d<\/span> : <a class="idref" href="UseAuto.html#A"><span class="id" type="variable">A<\/span><\/a>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
PreservationProgressReferences.preservation	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressReferences.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
PreservationProgressReferences.preservation'	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressReferences.preservation'"><span class="id" type="lemma">preservation'<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
PreservationProgressReferences.preservation_ref	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="PreservationProgressReferences.preservation_ref"><span class="id" type="lemma">preservation_ref<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span>:<a class="idref" href="References.html#STLCRef.store"><span class="id" type="definition">store<\/span><\/a>) (<span class="id" type="var">ST<\/span> : <a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a>) <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
PreservationProgressReferences.progress	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressReferences.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
PreservationProgressStlc	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="PreservationProgressStlc"><span class="id" type="module">PreservationProgressStlc<\/span><\/a>.<br\/>$/;"	a
PreservationProgressStlc.preservation	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressStlc.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
PreservationProgressStlc.preservation'	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressStlc.preservation'"><span class="id" type="lemma">preservation'<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
PreservationProgressStlc.progress	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressStlc.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
PreservationProgressStlc.progress'	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="PreservationProgressStlc.progress'"><span class="id" type="lemma">progress'<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
ProductExtension	plf/Sub.html	/^<span class="id" type="keyword">Module<\/span> <a name="ProductExtension"><span class="id" type="module">ProductExtension<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ProductExtension.TArrow	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
ProductExtension.TBase	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TBase"><span class="id" type="constructor">TBase<\/span><\/a>  : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
ProductExtension.TBool	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TBool"><span class="id" type="constructor">TBool<\/span><\/a>  : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
ProductExtension.TProd	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TProd"><span class="id" type="constructor">TProd<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ProductExtension.TTop	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TTop"><span class="id" type="constructor">TTop<\/span><\/a>   : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
ProductExtension.TUnit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.TUnit"><span class="id" type="constructor">TUnit<\/span><\/a>  : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
ProductExtension.preservation	plf/Sub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ProductExtension.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
ProductExtension.progress	plf/Sub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ProductExtension.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
ProductExtension.tabs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#ProductExtension.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tapp	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tfalse	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tfst	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tfst"><span class="id" type="constructor">tfst<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tif	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tm	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ProductExtension.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
ProductExtension.tpair	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tpair"><span class="id" type="constructor">tpair<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tsnd	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tsnd"><span class="id" type="constructor">tsnd<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
ProductExtension.ttrue	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tunit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tunit"><span class="id" type="constructor">tunit<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.tvar	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ProductExtension.tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ProductExtension.ty	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ProductExtension.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Props	lf/ProofObjects.html	/^<span class="id" type="keyword">Module<\/span> <a name="Props"><span class="id" type="module">Props<\/span><\/a>.<br\/>$/;"	a
Props.And	lf/ProofObjects.html	/^<span class="id" type="keyword">Module<\/span> <a name="Props.And"><span class="id" type="module">And<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.And.and	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Props.And.and"><span class="id" type="inductive">and<\/span><\/a> (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Props.And.conj	lf/ProofObjects.html	/^| <a name="Props.And.conj"><span class="id" type="constructor">conj<\/span><\/a> : <span class="id" type="var">P<\/span> → <span class="id" type="var">Q<\/span> → <a class="idref" href="ProofObjects.html#and"><span class="id" type="inductive">and<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.Ex	lf/ProofObjects.html	/^<span class="id" type="keyword">Module<\/span> <a name="Props.Ex"><span class="id" type="module">Ex<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.Ex.ex	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Props.Ex.ex"><span class="id" type="inductive">ex<\/span><\/a> {<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">P<\/span> : <a class="idref" href="ProofObjects.html#A"><span class="id" type="variable">A<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Props.Ex.ex_intro	lf/ProofObjects.html	/^| <a name="Props.Ex.ex_intro"><span class="id" type="constructor">ex_intro<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> : <span class="id" type="var">A<\/span>, <span class="id" type="var">P<\/span> <a class="idref" href="ProofObjects.html#x"><span class="id" type="variable">x<\/span><\/a> → <a class="idref" href="ProofObjects.html#ex"><span class="id" type="inductive">ex<\/span><\/a> <span class="id" type="var">P<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.False	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Props.False"><span class="id" type="inductive">False<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> :=.<br\/>$/;"	a
Props.I	lf/ProofObjects.html	/^&nbsp;&nbsp;| <a name="Props.I"><span class="id" type="constructor">I<\/span><\/a> : <a class="idref" href="ProofObjects.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
Props.Or	lf/ProofObjects.html	/^<span class="id" type="keyword">Module<\/span> <a name="Props.Or"><span class="id" type="module">Or<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.Or.or	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Props.Or.or"><span class="id" type="inductive">or<\/span><\/a> (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Props.Or.or_introl	lf/ProofObjects.html	/^| <a name="Props.Or.or_introl"><span class="id" type="constructor">or_introl<\/span><\/a> : <span class="id" type="var">P<\/span> → <a class="idref" href="ProofObjects.html#or"><span class="id" type="inductive">or<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span><br\/>$/;"	a
Props.Or.or_intror	lf/ProofObjects.html	/^| <a name="Props.Or.or_intror"><span class="id" type="constructor">or_intror<\/span><\/a> : <span class="id" type="var">Q<\/span> → <a class="idref" href="ProofObjects.html#or"><span class="id" type="inductive">or<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Props.True	lf/ProofObjects.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Props.True"><span class="id" type="inductive">True<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Props.and_comm	lf/ProofObjects.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Props.and_comm"><span class="id" type="lemma">and_comm<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>, <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ↔ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a>.<br\/>$/;"	a
Props.and_comm'	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.and_comm'"><span class="id" type="definition">and_comm'<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ↔ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> :=<br\/>$/;"	a
Props.and_comm'_aux	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.and_comm'_aux"><span class="id" type="definition">and_comm'_aux<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> (<span class="id" type="var">H<\/span> : <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a>) :=<br\/>$/;"	a
Props.conj_fact	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.conj_fact"><span class="id" type="definition">conj_fact<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span>, <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> → <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#R"><span class="id" type="variable">R<\/span><\/a> → <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∧ <a class="idref" href="ProofObjects.html#R"><span class="id" type="variable">R<\/span><\/a> <br\/>$/;"	a
Props.ex_ev_Sn	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.ex_ev_Sn"><span class="id" type="definition">ex_ev_Sn<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#ex"><span class="id" type="inductive">ex<\/span><\/a> (<span class="id" type="keyword">fun<\/span> <span class="id" type="var">n<\/span> ⇒ <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a>)) <br\/>$/;"	a
Props.or_comm	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.or_comm"><span class="id" type="definition">or_comm<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>, <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> ∨ <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> → <a class="idref" href="ProofObjects.html#Q"><span class="id" type="variable">Q<\/span><\/a> ∨ <a class="idref" href="ProofObjects.html#P"><span class="id" type="variable">P<\/span><\/a> <br\/>$/;"	a
Props.some_nat_is_even	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Props.some_nat_is_even"><span class="id" type="definition">some_nat_is_even<\/span><\/a> : ∃ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a> :=<br\/>$/;"	a
Pumping	lf/IndProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="Pumping"><span class="id" type="module">Pumping<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Pumping.napp	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="Pumping.napp"><span class="id" type="definition">napp<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a> :=<br\/>$/;"	a
Pumping.napp_plus	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Pumping.napp_plus"><span class="id" type="lemma">napp_plus<\/span><\/a>: ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
Pumping.pumping	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Pumping.pumping"><span class="id" type="lemma">pumping<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">re<\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) <span class="id" type="var">s<\/span>,<br\/>$/;"	a
Pumping.pumping_constant	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="Pumping.pumping_constant"><span class="id" type="definition">pumping_constant<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">re<\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
R	lf/IndProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="R"><span class="id" type="module">R<\/span><\/a>.<br\/>$/;"	a
R	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="R"><span class="id" type="definition">R<\/span><\/a> (<span class="id" type="var">T<\/span>:<a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) {<span class="id" type="keyword">struct<\/span> <span class="id" type="var">T<\/span>} : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
R.R	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="R.R"><span class="id" type="inductive">R<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
R.R_equiv_fR	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="R.R_equiv_fR"><span class="id" type="lemma">R_equiv_fR<\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#R.R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a> ↔ <a class="idref" href="IndProp.html#R.fR"><span class="id" type="axiom">fR<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>.<br\/>$/;"	a
R.c1	lf/IndProp.html	/^&nbsp;&nbsp;&nbsp;| <a name="R.c1"><span class="id" type="constructor">c<sub>1<\/sub><\/span><\/a> : <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> 0 0 0<br\/>$/;"	a
R.c2	lf/IndProp.html	/^&nbsp;&nbsp;&nbsp;| <a name="R.c2"><span class="id" type="constructor">c<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a> → <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>) <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>)<br\/>$/;"	a
R.c3	lf/IndProp.html	/^&nbsp;&nbsp;&nbsp;| <a name="R.c3"><span class="id" type="constructor">c<sub>3<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a> → <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>) (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>)<br\/>$/;"	a
R.c4	lf/IndProp.html	/^&nbsp;&nbsp;&nbsp;| <a name="R.c4"><span class="id" type="constructor">c<sub>4<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>) (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>) (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>)) → <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a><br\/>$/;"	a
R.c5	lf/IndProp.html	/^&nbsp;&nbsp;&nbsp;| <a name="R.c5"><span class="id" type="constructor">c<sub>5<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a> → <a class="idref" href="IndProp.html#R"><span class="id" type="inductive">R<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>.<br\/>$/;"	a
R.fR	lf/IndProp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="R.fR"><span class="id" type="definition">fR<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
RTcons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="RTcons"><span class="id" type="constructor">RTcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
RTnil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="RTnil"><span class="id" type="constructor">RTnil<\/span><\/a> :<br\/>$/;"	a
R_halts	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="R_halts"><span class="id" type="lemma">R_halts<\/span><\/a> : ∀ {<span class="id" type="var">T<\/span>} {<span class="id" type="var">t<\/span>}, <a class="idref" href="Norm.html#R"><span class="id" type="definition">R<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> → <a class="idref" href="Norm.html#halts"><span class="id" type="definition">halts<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a>.<br\/>$/;"	a
R_typable_empty	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="R_typable_empty"><span class="id" type="lemma">R_typable_empty<\/span><\/a> : ∀ {<span class="id" type="var">T<\/span>} {<span class="id" type="var">t<\/span>}, <a class="idref" href="Norm.html#R"><span class="id" type="definition">R<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> → <a class="idref" href="Norm.html#has_type"><span class="id" type="inductive">has_type<\/span><\/a> <span class="id" type="definition">empty<\/span> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a>.<br\/>$/;"	a
ReflectF	lf/IndProp.html	/^| <a name="ReflectF"><span class="id" type="constructor">ReflectF<\/span><\/a> : ¬ <span class="id" type="var">P<\/span> → <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <span class="id" type="var">P<\/span> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
ReflectT	lf/IndProp.html	/^| <a name="ReflectT"><span class="id" type="constructor">ReflectT<\/span><\/a> : <span class="id" type="var">P<\/span> → <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <span class="id" type="var">P<\/span> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a><br\/>$/;"	a
Repeat	lf/Auto.html	/^<span class="id" type="keyword">Module<\/span> <a name="Repeat"><span class="id" type="module">Repeat<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Repeat.CAsgn	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CAsgn"><span class="id" type="constructor">CAsgn<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Repeat.CIf	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Repeat.CRepeat	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CRepeat"><span class="id" type="constructor">CRepeat<\/span><\/a> : <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/>$/;"	a
Repeat.CSeq	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Repeat.CSkip	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Repeat.CWhile	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Auto.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
Repeat.E_Ass	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a>  : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">X<\/span>,<br\/>$/;"	a
Repeat.E_IfFalse	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
Repeat.E_IfTrue	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
Repeat.E_RepeatEnd	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_RepeatEnd"><span class="id" type="constructor">E_RepeatEnd<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Repeat.E_RepeatLoop	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_RepeatLoop"><span class="id" type="constructor">E_RepeatLoop<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Repeat.E_Seq	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span>,<br\/>$/;"	a
Repeat.E_Skip	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
Repeat.E_WhileFalse	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Repeat.E_WhileTrue	lf/Auto.html	/^&nbsp;&nbsp;| <a name="Repeat.E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
Repeat.ceval	lf/Auto.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Repeat.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <a class="idref" href="Auto.html#Repeat.com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Repeat.ceval_deterministic	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Repeat.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Repeat.ceval_deterministic'	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Repeat.ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Repeat.com	lf/Auto.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Repeat.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
RepeatExercise	plf/Hoare.html	/^<span class="id" type="keyword">Module<\/span> <a name="RepeatExercise"><span class="id" type="module">RepeatExercise<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
RepeatExercise.CAsgn	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CAsgn"><span class="id" type="constructor">CAsgn<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">aexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
RepeatExercise.CIf	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CIf"><span class="id" type="constructor">CIf<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
RepeatExercise.CRepeat	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CRepeat"><span class="id" type="constructor">CRepeat<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a>.<br\/>$/;"	a
RepeatExercise.CSeq	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CSeq"><span class="id" type="constructor">CSeq<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
RepeatExercise.CSkip	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CSkip"><span class="id" type="constructor">CSkip<\/span><\/a> : <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
RepeatExercise.CWhile	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.CWhile"><span class="id" type="constructor">CWhile<\/span><\/a> : <span class="id" type="inductive">bexp<\/span> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Hoare.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
RepeatExercise.E_Ass	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_Ass"><span class="id" type="constructor">E_Ass<\/span><\/a>  : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">X<\/span>,<br\/>$/;"	a
RepeatExercise.E_IfFalse	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_IfFalse"><span class="id" type="constructor">E_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
RepeatExercise.E_IfTrue	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_IfTrue"><span class="id" type="constructor">E_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
RepeatExercise.E_Seq	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_Seq"><span class="id" type="constructor">E_Seq<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span>,<br\/>$/;"	a
RepeatExercise.E_Skip	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_Skip"><span class="id" type="constructor">E_Skip<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
RepeatExercise.E_WhileFalse	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_WhileFalse"><span class="id" type="constructor">E_WhileFalse<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
RepeatExercise.E_WhileTrue	plf/Hoare.html	/^&nbsp;&nbsp;| <a name="RepeatExercise.E_WhileTrue"><span class="id" type="constructor">E_WhileTrue<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">st''<\/span> <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>1<\/sub><\/span>,<br\/>$/;"	a
RepeatExercise.ceval	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="RepeatExercise.ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <span class="id" type="definition">state<\/span> → <a class="idref" href="Hoare.html#RepeatExercise.com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="definition">state<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
RepeatExercise.com	plf/Hoare.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="RepeatExercise.com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
RepeatExercise.ex1_repeat	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="RepeatExercise.ex1_repeat"><span class="id" type="definition">ex1_repeat<\/span><\/a> :=<br\/>$/;"	a
RepeatExercise.ex1_repeat_works	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="RepeatExercise.ex1_repeat_works"><span class="id" type="lemma">ex1_repeat_works<\/span><\/a> :<br\/>$/;"	a
RepeatExercise.hoare_triple	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="RepeatExercise.hoare_triple"><span class="id" type="definition">hoare_triple<\/span><\/a> (<span class="id" type="var">P<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">c<\/span>:<a class="idref" href="Hoare.html#RepeatExercise.com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">Q<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>)<br\/>$/;"	a
Right	lf/imp1.ml	/^| Right$/;"	C	type:sumbool
Right	lf/imp1.mli	/^| Right$/;"	C	type:sumbool
Right	lf/imp2.ml	/^| Right$/;"	C	type:sumbool
Right	lf/imp2.mli	/^| Right$/;"	C	type:sumbool
RingDemo	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="RingDemo"><span class="id" type="module">RingDemo<\/span><\/a>.<br\/>$/;"	a
RingDemo.ring_demo	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="RingDemo.ring_demo"><span class="id" type="lemma">ring_demo<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Numbers.BinNums.html#Z"><span class="id" type="inductive">Z<\/span><\/a>),<br\/>$/;"	a
S	lf/imp1.ml	/^| S of nat$/;"	C	type:nat
S	lf/imp1.mli	/^| S of nat$/;"	C	type:nat
SHOW	lf/Makefile	/^SHOW := $(if $(VERBOSE),@true "",@echo "")$/;"	m
SHOW	plf/Makefile	/^SHOW := $(if $(VERBOSE),@true "",@echo "")$/;"	m
SLoad	lf/Imp.html	/^| <a name="SLoad"><span class="id" type="constructor">SLoad<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a><br\/>$/;"	a
SMinus	lf/Imp.html	/^| <a name="SMinus"><span class="id" type="constructor">SMinus<\/span><\/a> : <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a><br\/>$/;"	a
SMult	lf/Imp.html	/^| <a name="SMult"><span class="id" type="constructor">SMult<\/span><\/a> : <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a>.<br\/>$/;"	a
SPlus	lf/Imp.html	/^| <a name="SPlus"><span class="id" type="constructor">SPlus<\/span><\/a> : <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a><br\/>$/;"	a
SPush	lf/Imp.html	/^| <a name="SPush"><span class="id" type="constructor">SPush<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a><br\/>$/;"	a
SSSSev__even	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SSSSev__even"><span class="id" type="lemma">SSSSev__even<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
SS_Load	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SS_Load"><span class="id" type="constructor">SS_Load<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">stk<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">p'<\/span>,<br\/>$/;"	a
SS_Minus	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SS_Minus"><span class="id" type="constructor">SS_Minus<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">stk<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p'<\/span>,<br\/>$/;"	a
SS_Mult	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SS_Mult"><span class="id" type="constructor">SS_Mult<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">stk<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p'<\/span>,<br\/>$/;"	a
SS_Plus	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SS_Plus"><span class="id" type="constructor">SS_Plus<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">stk<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p'<\/span>,<br\/>$/;"	a
SS_Push	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SS_Push"><span class="id" type="constructor">SS_Push<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">stk<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">p'<\/span>,<br\/>$/;"	a
STDTIME	lf/Makefile	/^STDTIME?=\/usr\/bin\/time -f "$* (user: %U mem: %M ko)"$/;"	m
STDTIME	plf/Makefile	/^STDTIME?=\/usr\/bin\/time -f "$* (user: %U mem: %M ko)"$/;"	m
STLC	plf/Stlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLC"><span class="id" type="module">STLC<\/span><\/a>.<br\/>$/;"	a
STLC.ST_App1	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLC.ST_App2	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLC.ST_AppAbs	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLC.ST_If	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLC.ST_IfFalse	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLC.ST_IfTrue	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLC.TArrow	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="Stlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Stlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Stlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLC.TBool	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.TBool"><span class="id" type="constructor">TBool<\/span><\/a>  : <a class="idref" href="Stlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLC.T_Abs	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLC.T_App	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLC.T_False	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_False"><span class="id" type="constructor">T_False<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLC.T_If	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_If"><span class="id" type="constructor">T_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLC.T_True	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_True"><span class="id" type="constructor">T_True<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLC.T_Var	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLC.context	plf/Stlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLC.context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="Stlc.html#STLC.ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLC.has_type	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="Stlc.html#STLC.context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#STLC.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLC.idB	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.idB"><span class="id" type="abbreviation">idB<\/span><\/a> :=<br\/>$/;"	a
STLC.idBB	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.idBB"><span class="id" type="abbreviation">idBB<\/span><\/a> :=<br\/>$/;"	a
STLC.idBBBB	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.idBBBB"><span class="id" type="abbreviation">idBBBB<\/span><\/a> :=<br\/>$/;"	a
STLC.k	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.k"><span class="id" type="abbreviation">k<\/span><\/a> := (<a class="idref" href="Stlc.html#STLC.tabs"><span class="id" type="constructor">tabs<\/span><\/a> <a class="idref" href="Stlc.html#STLC.x"><span class="id" type="definition">x<\/span><\/a> <a class="idref" href="Stlc.html#STLC.TBool"><span class="id" type="constructor">TBool<\/span><\/a> (<a class="idref" href="Stlc.html#STLC.tabs"><span class="id" type="constructor">tabs<\/span><\/a> <a class="idref" href="Stlc.html#STLC.y"><span class="id" type="definition">y<\/span><\/a> <a class="idref" href="Stlc.html#STLC.TBool"><span class="id" type="constructor">TBool<\/span><\/a> (<a class="idref" href="Stlc.html#STLC.tvar"><span class="id" type="constructor">tvar<\/span><\/a> <a class="idref" href="Stlc.html#STLC.x"><span class="id" type="definition">x<\/span><\/a>))).<br\/>$/;"	a
STLC.multistep	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.multistep"><span class="id" type="abbreviation">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="Stlc.html#STLC.step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
STLC.notB	plf/Stlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLC.notB"><span class="id" type="abbreviation">notB<\/span><\/a> := (<a class="idref" href="Stlc.html#STLC.tabs"><span class="id" type="constructor">tabs<\/span><\/a> <a class="idref" href="Stlc.html#STLC.x"><span class="id" type="definition">x<\/span><\/a> <a class="idref" href="Stlc.html#STLC.TBool"><span class="id" type="constructor">TBool<\/span><\/a> (<a class="idref" href="Stlc.html#STLC.tif"><span class="id" type="constructor">tif<\/span><\/a> (<a class="idref" href="Stlc.html#STLC.tvar"><span class="id" type="constructor">tvar<\/span><\/a> <a class="idref" href="Stlc.html#STLC.x"><span class="id" type="definition">x<\/span><\/a>) <a class="idref" href="Stlc.html#STLC.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> <a class="idref" href="Stlc.html#STLC.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a>)).<br\/>$/;"	a
STLC.s_var1	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.s_var1"><span class="id" type="constructor">s_var1<\/span><\/a> :<br\/>$/;"	a
STLC.step	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLC.step_example1	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example1"><span class="id" type="lemma">step_example1<\/span><\/a> :<br\/>$/;"	a
STLC.step_example1'	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example1'"><span class="id" type="lemma">step_example1'<\/span><\/a> :<br\/>$/;"	a
STLC.step_example2	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example2"><span class="id" type="lemma">step_example2<\/span><\/a> :<br\/>$/;"	a
STLC.step_example2'	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example2'"><span class="id" type="lemma">step_example2'<\/span><\/a> :<br\/>$/;"	a
STLC.step_example3	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example3"><span class="id" type="lemma">step_example3<\/span><\/a> :<br\/>$/;"	a
STLC.step_example3'	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example3'"><span class="id" type="lemma">step_example3'<\/span><\/a> :<br\/>$/;"	a
STLC.step_example4	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example4"><span class="id" type="lemma">step_example4<\/span><\/a> :<br\/>$/;"	a
STLC.step_example4'	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example4'"><span class="id" type="lemma">step_example4'<\/span><\/a> :<br\/>$/;"	a
STLC.step_example5	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example5"><span class="id" type="lemma">step_example5<\/span><\/a> :<br\/>$/;"	a
STLC.step_example5_with_normalize	plf/Stlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLC.step_example5_with_normalize"><span class="id" type="lemma">step_example5_with_normalize<\/span><\/a> :<br\/>$/;"	a
STLC.subst	plf/Stlc.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLC.subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
STLC.substi	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.substi"><span class="id" type="inductive">substi<\/span><\/a> (<span class="id" type="var">s<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) : <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLC.substi_correct	plf/Stlc.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLC.substi_correct"><span class="id" type="lemma">substi_correct<\/span><\/a> : ∀ <span class="id" type="var">s<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
STLC.tabs	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Stlc.html#STLC.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLC.tapp	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLC.tfalse	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLC.tif	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLC.tm	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLC.ttrue	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLC.tvar	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Stlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLC.ty	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLC.typing_example_1	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_example_1"><span class="id" type="definition">typing_example_1<\/span><\/a> :<br\/>$/;"	a
STLC.typing_example_1'	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_example_1'"><span class="id" type="definition">typing_example_1'<\/span><\/a> :<br\/>$/;"	a
STLC.typing_example_2	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_example_2"><span class="id" type="definition">typing_example_2<\/span><\/a> :<br\/>$/;"	a
STLC.typing_example_2_full	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_example_2_full"><span class="id" type="definition">typing_example_2_full<\/span><\/a> :<br\/>$/;"	a
STLC.typing_example_3	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_example_3"><span class="id" type="definition">typing_example_3<\/span><\/a> :<br\/>$/;"	a
STLC.typing_nonexample_1	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_nonexample_1"><span class="id" type="definition">typing_nonexample_1<\/span><\/a> :<br\/>$/;"	a
STLC.typing_nonexample_3	plf/Stlc.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLC.typing_nonexample_3"><span class="id" type="definition">typing_nonexample_3<\/span><\/a> :<br\/>$/;"	a
STLC.v_abs	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLC.v_false	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.v_false"><span class="id" type="constructor">v_false<\/span><\/a> :<br\/>$/;"	a
STLC.v_true	plf/Stlc.html	/^&nbsp;&nbsp;| <a name="STLC.v_true"><span class="id" type="constructor">v_true<\/span><\/a> :<br\/>$/;"	a
STLC.value	plf/Stlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLC.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLC.x	plf/Stlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLC.x"><span class="id" type="definition">x<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "x").<br\/>$/;"	a
STLC.y	plf/Stlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLC.y"><span class="id" type="definition">y<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "y").<br\/>$/;"	a
STLC.z	plf/Stlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLC.z"><span class="id" type="definition">z<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "z").<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCArith	plf/StlcProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCArith"><span class="id" type="module">STLCArith<\/span><\/a>.<br\/>$/;"	a
STLCArith.TArrow	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="StlcProp.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="StlcProp.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="StlcProp.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCArith.TNat	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.TNat"><span class="id" type="constructor">TNat<\/span><\/a>   : <a class="idref" href="StlcProp.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCArith.tabs	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="StlcProp.html#STLCArith.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tapp	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tif0	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tif0"><span class="id" type="constructor">tif0<\/span><\/a>  : <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLCArith.tm	plf/StlcProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCArith.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCArith.tmult	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tmult"><span class="id" type="constructor">tmult<\/span><\/a> : <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tnat	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tnat"><span class="id" type="constructor">tnat<\/span><\/a>  : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tpred	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tpred"><span class="id" type="constructor">tpred<\/span><\/a> : <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tsucc	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tsucc"><span class="id" type="constructor">tsucc<\/span><\/a> : <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.tvar	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCArith.tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="StlcProp.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCArith.ty	plf/StlcProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCArith.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCChecker	plf/Typechecking.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCChecker"><span class="id" type="module">STLCChecker<\/span><\/a>.<br\/>$/;"	a
STLCChecker.beq_ty	plf/Typechecking.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCChecker.beq_ty"><span class="id" type="definition">beq_ty<\/span><\/a> (<span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>:<a class="idref" href="Stlc.html#STLC.ty"><span class="id" type="inductive">ty<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
STLCChecker.beq_ty__eq	plf/Typechecking.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCChecker.beq_ty__eq"><span class="id" type="lemma">beq_ty__eq<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCChecker.beq_ty_refl	plf/Typechecking.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCChecker.beq_ty_refl"><span class="id" type="lemma">beq_ty_refl<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCChecker.type_check	plf/Typechecking.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCChecker.type_check"><span class="id" type="definition">type_check<\/span><\/a> (<span class="id" type="var">Gamma<\/span>:<a class="idref" href="Stlc.html#STLC.context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Stlc.html#STLC.ty"><span class="id" type="inductive">ty<\/span><\/a> :=<br\/>$/;"	a
STLCChecker.type_checking_complete	plf/Typechecking.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCChecker.type_checking_complete"><span class="id" type="lemma">type_checking_complete<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCChecker.type_checking_sound	plf/Typechecking.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCChecker.type_checking_sound"><span class="id" type="lemma">type_checking_sound<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended"><span class="id" type="module">STLCExtended<\/span><\/a>.<br\/>$/;"	a
STLCExtended.Examples	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples"><span class="id" type="module">Examples<\/span><\/a>.<br\/>$/;"	a
STLCExtended.Examples.FixTest1	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.FixTest1"><span class="id" type="module">FixTest1<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.FixTest1.fact	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.FixTest1.fact"><span class="id" type="definition">fact<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.FixTest2	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.FixTest2"><span class="id" type="module">FixTest2<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.FixTest2.map	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.FixTest2.map"><span class="id" type="definition">map<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.FixTest3	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.FixTest3"><span class="id" type="module">FixTest3<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.FixTest3.equal	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.FixTest3.equal"><span class="id" type="definition">equal<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.FixTest4	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.FixTest4"><span class="id" type="module">FixTest4<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.FixTest4.eotest	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.FixTest4.eotest"><span class="id" type="definition">eotest<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.LetTest	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.LetTest"><span class="id" type="module">LetTest<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.LetTest.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.LetTest.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.ListTest	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.ListTest"><span class="id" type="module">ListTest<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.ListTest.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.ListTest.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.Numtest	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.Numtest"><span class="id" type="module">Numtest<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.Numtest.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.Numtest.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.Prodtest	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.Prodtest"><span class="id" type="module">Prodtest<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.Prodtest.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.Prodtest.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.Sumtest1	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.Sumtest1"><span class="id" type="module">Sumtest1<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.Sumtest1.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.Sumtest1.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.Sumtest2	plf/MoreStlc.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtended.Examples.Sumtest2"><span class="id" type="module">Sumtest2<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.Examples.Sumtest2.test	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.Examples.Sumtest2.test"><span class="id" type="definition">test<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.Examples.a	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.a"><span class="id" type="abbreviation">a<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "a").<br\/>$/;"	a
STLCExtended.Examples.eo	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.eo"><span class="id" type="abbreviation">eo<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "eo").<br\/>$/;"	a
STLCExtended.Examples.eq	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.eq"><span class="id" type="abbreviation">eq<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "eq").<br\/>$/;"	a
STLCExtended.Examples.even	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.even"><span class="id" type="abbreviation">even<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "even").<br\/>$/;"	a
STLCExtended.Examples.evenodd	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.evenodd"><span class="id" type="abbreviation">evenodd<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "evenodd").<br\/>$/;"	a
STLCExtended.Examples.f	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.f"><span class="id" type="abbreviation">f<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "f").<br\/>$/;"	a
STLCExtended.Examples.g	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.g"><span class="id" type="abbreviation">g<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "g").<br\/>$/;"	a
STLCExtended.Examples.i1	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.i1"><span class="id" type="abbreviation">i<sub>1<\/sub><\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "i<sub>1<\/sub>").<br\/>$/;"	a
STLCExtended.Examples.i2	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.i2"><span class="id" type="abbreviation">i<sub>2<\/sub><\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "i<sub>2<\/sub>").<br\/>$/;"	a
STLCExtended.Examples.k	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.k"><span class="id" type="abbreviation">k<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "k").<br\/>$/;"	a
STLCExtended.Examples.l	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.l"><span class="id" type="abbreviation">l<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "l").<br\/>$/;"	a
STLCExtended.Examples.m	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.m"><span class="id" type="abbreviation">m<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "m").<br\/>$/;"	a
STLCExtended.Examples.n	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.n"><span class="id" type="abbreviation">n<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "n").<br\/>$/;"	a
STLCExtended.Examples.odd	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.odd"><span class="id" type="abbreviation">odd<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "odd").<br\/>$/;"	a
STLCExtended.Examples.processSum	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.processSum"><span class="id" type="abbreviation">processSum<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "processSum").<br\/>$/;"	a
STLCExtended.Examples.x	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.x"><span class="id" type="abbreviation">x<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "x").<br\/>$/;"	a
STLCExtended.Examples.y	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.Examples.y"><span class="id" type="abbreviation">y<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "y").<br\/>$/;"	a
STLCExtended.ST_App1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_App2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtended.ST_AppAbs	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Case	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Case"><span class="id" type="constructor">ST_Case<\/span><\/a> : ∀ <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>0<\/sub>'<\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_CaseInl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_CaseInl"><span class="id" type="constructor">ST_CaseInl<\/span><\/a> : ∀ <span class="id" type="var">v<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.ST_CaseInr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_CaseInr"><span class="id" type="constructor">ST_CaseInr<\/span><\/a> : ∀ <span class="id" type="var">v<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.ST_Cons1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Cons1"><span class="id" type="constructor">ST_Cons1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Cons2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Cons2"><span class="id" type="constructor">ST_Cons2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtended.ST_If0Nonzero	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_If0Nonzero"><span class="id" type="constructor">ST_If0Nonzero<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_If0Zero	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_If0Zero"><span class="id" type="constructor">ST_If0Zero<\/span><\/a> : ∀ <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_If<sub	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_If<sub>01<\/sub>"><span class="id" type="constructor">ST_If<sub>01<\/sub><\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Inl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Inl"><span class="id" type="constructor">ST_Inl<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.ST_Inr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Inr"><span class="id" type="constructor">ST_Inr<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.ST_Lcase1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Lcase1"><span class="id" type="constructor">ST_Lcase1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_LcaseCons	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_LcaseCons"><span class="id" type="constructor">ST_LcaseCons<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">vl<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_LcaseNil	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_LcaseNil"><span class="id" type="constructor">ST_LcaseNil<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Mult1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Mult1"><span class="id" type="constructor">ST_Mult1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Mult2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Mult2"><span class="id" type="constructor">ST_Mult2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtended.ST_MultNats	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_MultNats"><span class="id" type="constructor">ST_MultNats<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Pred	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Pred"><span class="id" type="constructor">ST_Pred<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtended.ST_PredNat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_PredNat"><span class="id" type="constructor">ST_PredNat<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.ST_Succ1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_Succ1"><span class="id" type="constructor">ST_Succ1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtended.ST_SuccNat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.ST_SuccNat"><span class="id" type="constructor">ST_SuccNat<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.TArrow	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtended.TList	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TList"><span class="id" type="constructor">TList<\/span><\/a>  : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtended.TNat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TNat"><span class="id" type="constructor">TNat<\/span><\/a>   : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtended.TProd	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TProd"><span class="id" type="constructor">TProd<\/span><\/a>  : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtended.TSum	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TSum"><span class="id" type="constructor">TSum<\/span><\/a>   : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtended.TUnit	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.TUnit"><span class="id" type="constructor">TUnit<\/span><\/a>  : <a class="idref" href="MoreStlc.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtended.T_Abs	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_App	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Case	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Case"><span class="id" type="constructor">T_Case<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.T_Cons	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Cons"><span class="id" type="constructor">T_Cons<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_If<sub	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_If<sub>0<\/sub>"><span class="id" type="constructor">T_If<sub>0<\/sub><\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Inl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Inl"><span class="id" type="constructor">T_Inl<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Inr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Inr"><span class="id" type="constructor">T_Inr<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Lcase	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Lcase"><span class="id" type="constructor">T_Lcase<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Mult	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Mult"><span class="id" type="constructor">T_Mult<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Nat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Nat"><span class="id" type="constructor">T_Nat<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">n<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Nil	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Nil"><span class="id" type="constructor">T_Nil<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.T_Pred	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Pred"><span class="id" type="constructor">T_Pred<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Succ	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Succ"><span class="id" type="constructor">T_Succ<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.T_Unit	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Unit"><span class="id" type="constructor">T_Unit<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLCExtended.T_Var	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.afi_abs	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_app1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_app2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_case0	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_case0"><span class="id" type="constructor">afi_case0<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_case1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_case1"><span class="id" type="constructor">afi_case1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_case2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_case2"><span class="id" type="constructor">afi_case2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_cons1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_cons1"><span class="id" type="constructor">afi_cons1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_cons2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_cons2"><span class="id" type="constructor">afi_cons2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_if<sub	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_if<sub>01<\/sub>"><span class="id" type="constructor">afi_if<sub>01<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_if<sub	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_if<sub>02<\/sub>"><span class="id" type="constructor">afi_if<sub>02<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_if<sub	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_if<sub>03<\/sub>"><span class="id" type="constructor">afi_if<sub>03<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_inl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_inl"><span class="id" type="constructor">afi_inl<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.afi_inr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_inr"><span class="id" type="constructor">afi_inr<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.afi_lcase1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_lcase1"><span class="id" type="constructor">afi_lcase1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">y<sub>1<\/sub><\/span> <span class="id" type="var">y<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_lcase2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_lcase2"><span class="id" type="constructor">afi_lcase2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">y<sub>1<\/sub><\/span> <span class="id" type="var">y<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_lcase3	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_lcase3"><span class="id" type="constructor">afi_lcase3<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">y<sub>1<\/sub><\/span> <span class="id" type="var">y<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_mult1	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_mult1"><span class="id" type="constructor">afi_mult1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_mult2	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_mult2"><span class="id" type="constructor">afi_mult2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.afi_pred	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_pred"><span class="id" type="constructor">afi_pred<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLCExtended.afi_succ	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_succ"><span class="id" type="constructor">afi_succ<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLCExtended.afi_var	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
STLCExtended.appears_free_in	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtended.context	plf/MoreStlc.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtended.context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCExtended.context_invariance	plf/MoreStlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtended.context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
STLCExtended.free_in_context	plf/MoreStlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtended.free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLCExtended.has_type	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtended.multistep	plf/MoreStlc.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtended.multistep"><span class="id" type="abbreviation">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="MoreStlc.html#STLCExtended.step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
STLCExtended.preservation	plf/MoreStlc.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCExtended.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.progress	plf/MoreStlc.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCExtended.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.step	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtended.subst	plf/MoreStlc.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCExtended.subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
STLCExtended.substitution_preserves_typing	plf/MoreStlc.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtended.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
STLCExtended.tabs	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tapp	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tcase	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tcase"><span class="id" type="constructor">tcase<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tcons	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tcons"><span class="id" type="constructor">tcons<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tfix	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tfix"><span class="id" type="constructor">tfix<\/span><\/a>  : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLCExtended.tfst	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tfst"><span class="id" type="constructor">tfst<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tif0	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tif0"><span class="id" type="constructor">tif0<\/span><\/a>  : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tinl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tinl"><span class="id" type="constructor">tinl<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tinr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tinr"><span class="id" type="constructor">tinr<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tlcase	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tlcase"><span class="id" type="constructor">tlcase<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="inductive">id<\/span> → <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tlet	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tlet"><span class="id" type="constructor">tlet<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tm	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCExtended.tmult	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tmult"><span class="id" type="constructor">tmult<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tnat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tnat"><span class="id" type="constructor">tnat<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tnil	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tnil"><span class="id" type="constructor">tnil<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tpair	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tpair"><span class="id" type="constructor">tpair<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tpred	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tpred"><span class="id" type="constructor">tpred<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tsnd	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tsnd"><span class="id" type="constructor">tsnd<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tsucc	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tsucc"><span class="id" type="constructor">tsucc<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tunit	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tunit"><span class="id" type="constructor">tunit<\/span><\/a> : <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.tvar	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="MoreStlc.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtended.ty	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCExtended.v_abs	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.v_inl	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_inl"><span class="id" type="constructor">v_inl<\/span><\/a> : ∀ <span class="id" type="var">v<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.v_inr	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_inr"><span class="id" type="constructor">v_inr<\/span><\/a> : ∀ <span class="id" type="var">v<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtended.v_lcons	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_lcons"><span class="id" type="constructor">v_lcons<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">vl<\/span>,<br\/>$/;"	a
STLCExtended.v_lnil	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_lnil"><span class="id" type="constructor">v_lnil<\/span><\/a> : ∀ <span class="id" type="var">T<\/span>, <a class="idref" href="MoreStlc.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="MoreStlc.html#STLCExtended.tnil"><span class="id" type="constructor">tnil<\/span><\/a> <a class="idref" href="MoreStlc.html#T"><span class="id" type="variable">T<\/span><\/a>)<br\/>$/;"	a
STLCExtended.v_nat	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_nat"><span class="id" type="constructor">v_nat<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.v_pair	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_pair"><span class="id" type="constructor">v_pair<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtended.v_unit	plf/MoreStlc.html	/^&nbsp;&nbsp;| <a name="STLCExtended.v_unit"><span class="id" type="constructor">v_unit<\/span><\/a> : <a class="idref" href="MoreStlc.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="MoreStlc.html#STLCExtended.tunit"><span class="id" type="constructor">tunit<\/span><\/a><br\/>$/;"	a
STLCExtended.value	plf/MoreStlc.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtended.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords	plf/Records.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtendedRecords"><span class="id" type="module">STLCExtendedRecords<\/span><\/a>.<br\/>$/;"	a
STLCExtendedRecords.A	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.A"><span class="id" type="abbreviation">A<\/span><\/a> := (<a class="idref" href="Records.html#STLCExtendedRecords.TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "A")).<br\/>$/;"	a
STLCExtendedRecords.B	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.B"><span class="id" type="abbreviation">B<\/span><\/a> := (<a class="idref" href="Records.html#STLCExtendedRecords.TBase"><span class="id" type="constructor">TBase<\/span><\/a> (<span class="id" type="constructor">Id<\/span> "B")).<br\/>$/;"	a
STLCExtendedRecords.FirstTry	plf/Records.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCExtendedRecords.FirstTry"><span class="id" type="module">FirstTry<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtendedRecords.FirstTry.TArrow	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.FirstTry.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a>    : <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.FirstTry.TBase	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.FirstTry.TBase"><span class="id" type="constructor">TBase<\/span><\/a>     : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.FirstTry.TRcd	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.FirstTry.TRcd"><span class="id" type="constructor">TRcd<\/span><\/a>      : (<a class="idref" href="Records.html#STLCExtendedRecords.FirstTry.alist"><span class="id" type="definition">alist<\/span><\/a> <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a>) → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCExtendedRecords.FirstTry.alist	plf/Records.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtendedRecords.FirstTry.alist"><span class="id" type="definition">alist<\/span><\/a> (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="Records.html#X"><span class="id" type="variable">X<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtendedRecords.FirstTry.ty	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.FirstTry.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.RTcons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.RTcons"><span class="id" type="constructor">RTcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.RTnil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.RTnil"><span class="id" type="constructor">RTnil<\/span><\/a> :<br\/>$/;"	a
STLCExtendedRecords.ST_App1	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_App2	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_AppAbs	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_Proj1	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_Proj1"><span class="id" type="constructor">ST_Proj1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">i<\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_ProjRcd	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_ProjRcd"><span class="id" type="constructor">ST_ProjRcd<\/span><\/a> : ∀ <span class="id" type="var">tr<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">vi<\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_Rcd_Head	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_Rcd_Head"><span class="id" type="constructor">ST_Rcd_Head<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">tr<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.ST_Rcd_Tail	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.ST_Rcd_Tail"><span class="id" type="constructor">ST_Rcd_Tail<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">tr<sub>2<\/sub><\/span> <span class="id" type="var">tr<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
STLCExtendedRecords.TArrow	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.TBase	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.TBase"><span class="id" type="constructor">TBase<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.TRCons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.TRCons"><span class="id" type="constructor">TRCons<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCExtendedRecords.TRNil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.TRNil"><span class="id" type="constructor">TRNil<\/span><\/a> : <a class="idref" href="Records.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.T_Abs	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.T_App	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.T_Proj	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_Proj"><span class="id" type="constructor">T_Proj<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">Ti<\/span> <span class="id" type="var">Tr<\/span>,<br\/>$/;"	a
STLCExtendedRecords.T_RCons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_RCons"><span class="id" type="constructor">T_RCons<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">tr<\/span> <span class="id" type="var">Tr<\/span>,<br\/>$/;"	a
STLCExtendedRecords.T_RNil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_RNil"><span class="id" type="constructor">T_RNil<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLCExtendedRecords.T_Var	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtendedRecords.Tlookup	plf/Records.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCExtendedRecords.Tlookup"><span class="id" type="definition">Tlookup<\/span><\/a> (<span class="id" type="var">i<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">Tr<\/span>:<a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> :=<br\/>$/;"	a
STLCExtendedRecords.a	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.a"><span class="id" type="abbreviation">a<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "a").<br\/>$/;"	a
STLCExtendedRecords.afi_abs	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_app1	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_app2	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_proj	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_proj"><span class="id" type="constructor">afi_proj<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">i<\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_rhead	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_rhead"><span class="id" type="constructor">afi_rhead<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">ti<\/span> <span class="id" type="var">tr<\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_rtail	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_rtail"><span class="id" type="constructor">afi_rtail<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">ti<\/span> <span class="id" type="var">tr<\/span>,<br\/>$/;"	a
STLCExtendedRecords.afi_var	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
STLCExtendedRecords.appears_free_in	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.context	plf/Records.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtendedRecords.context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCExtendedRecords.context_invariance	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
STLCExtendedRecords.f	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.f"><span class="id" type="abbreviation">f<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "f").<br\/>$/;"	a
STLCExtendedRecords.free_in_context	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLCExtendedRecords.g	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.g"><span class="id" type="abbreviation">g<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "g").<br\/>$/;"	a
STLCExtendedRecords.has_type	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.has_type__wf	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.has_type__wf"><span class="id" type="lemma">has_type__wf<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtendedRecords.i1	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.i1"><span class="id" type="abbreviation">i<sub>1<\/sub><\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "i<sub>1<\/sub>").<br\/>$/;"	a
STLCExtendedRecords.i2	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.i2"><span class="id" type="abbreviation">i<sub>2<\/sub><\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "i<sub>2<\/sub>").<br\/>$/;"	a
STLCExtendedRecords.k	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.k"><span class="id" type="abbreviation">k<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "k").<br\/>$/;"	a
STLCExtendedRecords.l	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.l"><span class="id" type="abbreviation">l<\/span><\/a> := (<span class="id" type="constructor">Id<\/span> "l").<br\/>$/;"	a
STLCExtendedRecords.lookup_field_in_value	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.lookup_field_in_value"><span class="id" type="lemma">lookup_field_in_value<\/span><\/a> : ∀ <span class="id" type="var">v<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
STLCExtendedRecords.multistep	plf/Records.html	/^<span class="id" type="keyword">Notation<\/span> <a name="STLCExtendedRecords.multistep"><span class="id" type="abbreviation">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="Records.html#STLCExtendedRecords.step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
STLCExtendedRecords.preservation	plf/Records.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCExtendedRecords.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtendedRecords.progress	plf/Records.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCExtendedRecords.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCExtendedRecords.record_tm	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.record_tm"><span class="id" type="inductive">record_tm<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.record_ty	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.record_ty"><span class="id" type="inductive">record_ty<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.rtcons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.rtcons"><span class="id" type="constructor">rtcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.rtnil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.rtnil"><span class="id" type="constructor">rtnil<\/span><\/a> :<br\/>$/;"	a
STLCExtendedRecords.step	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.step_preserves_record_tm	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.step_preserves_record_tm"><span class="id" type="lemma">step_preserves_record_tm<\/span><\/a> : ∀ <span class="id" type="var">tr<\/span> <span class="id" type="var">tr'<\/span>,<br\/>$/;"	a
STLCExtendedRecords.subst	plf/Records.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCExtendedRecords.subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
STLCExtendedRecords.substitution_preserves_typing	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
STLCExtendedRecords.tabs	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.tapp	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.tlookup	plf/Records.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCExtendedRecords.tlookup"><span class="id" type="definition">tlookup<\/span><\/a> (<span class="id" type="var">i<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">tr<\/span>:<a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
STLCExtendedRecords.tm	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.tproj	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.tproj"><span class="id" type="constructor">tproj<\/span><\/a> : <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.trcons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.trcons"><span class="id" type="constructor">trcons<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLCExtendedRecords.trnil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.trnil"><span class="id" type="constructor">trnil<\/span><\/a> :  <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.tvar	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Records.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.ty	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.typing_example_2	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.typing_example_2"><span class="id" type="lemma">typing_example_2<\/span><\/a> :<br\/>$/;"	a
STLCExtendedRecords.typing_nonexample	plf/Records.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLCExtendedRecords.typing_nonexample"><span class="id" type="definition">typing_nonexample<\/span><\/a> :<br\/>$/;"	a
STLCExtendedRecords.typing_nonexample_2	plf/Records.html	/^<span class="id" type="keyword">Example<\/span> <a name="STLCExtendedRecords.typing_nonexample_2"><span class="id" type="definition">typing_nonexample_2<\/span><\/a> : ∀ <span class="id" type="var">y<\/span>,<br\/>$/;"	a
STLCExtendedRecords.v_abs	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.v_rcons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.v_rcons"><span class="id" type="constructor">v_rcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">vr<\/span>,<br\/>$/;"	a
STLCExtendedRecords.v_rnil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.v_rnil"><span class="id" type="constructor">v_rnil<\/span><\/a> : <a class="idref" href="Records.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Records.html#STLCExtendedRecords.trnil"><span class="id" type="constructor">trnil<\/span><\/a><br\/>$/;"	a
STLCExtendedRecords.value	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.weird_type	plf/Records.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCExtendedRecords.weird_type"><span class="id" type="definition">weird_type<\/span><\/a> := <a class="idref" href="Records.html#STLCExtendedRecords.TRCons"><span class="id" type="constructor">TRCons<\/span><\/a> <span class="id" type="definition">X<\/span> <a class="idref" href="Records.html#STLCExtendedRecords.A"><span class="id" type="abbreviation">A<\/span><\/a> <a class="idref" href="Records.html#STLCExtendedRecords.B"><span class="id" type="abbreviation">B<\/span><\/a>.<br\/>$/;"	a
STLCExtendedRecords.well_formed_ty	plf/Records.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCExtendedRecords.well_formed_ty"><span class="id" type="inductive">well_formed_ty<\/span><\/a> : <a class="idref" href="Records.html#STLCExtendedRecords.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCExtendedRecords.wfTArrow	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.wfTArrow"><span class="id" type="constructor">wfTArrow<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.wfTBase	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.wfTBase"><span class="id" type="constructor">wfTBase<\/span><\/a> : ∀ <span class="id" type="var">i<\/span>,<br\/>$/;"	a
STLCExtendedRecords.wfTRCons	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.wfTRCons"><span class="id" type="constructor">wfTRCons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCExtendedRecords.wfTRNil	plf/Records.html	/^&nbsp;&nbsp;| <a name="STLCExtendedRecords.wfTRNil"><span class="id" type="constructor">wfTRNil<\/span><\/a> :<br\/>$/;"	a
STLCExtendedRecords.wf_rcd_lookup	plf/Records.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCExtendedRecords.wf_rcd_lookup"><span class="id" type="lemma">wf_rcd_lookup<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
STLCProp	plf/StlcProp.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCProp"><span class="id" type="module">STLCProp<\/span><\/a>.<br\/>$/;"	a
STLCProp.afi_abs	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_app1	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_app2	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_if<sub	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_if<sub>1<\/sub>"><span class="id" type="constructor">afi_if<sub>1<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_if<sub	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_if<sub>2<\/sub>"><span class="id" type="constructor">afi_if<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_if<sub	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_if<sub>3<\/sub>"><span class="id" type="constructor">afi_if<sub>3<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCProp.afi_var	plf/StlcProp.html	/^&nbsp;&nbsp;| <a name="STLCProp.afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
STLCProp.appears_free_in	plf/StlcProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCProp.appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCProp.canonical_forms_bool	plf/StlcProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCProp.canonical_forms_bool"><span class="id" type="lemma">canonical_forms_bool<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLCProp.canonical_forms_fun	plf/StlcProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCProp.canonical_forms_fun"><span class="id" type="lemma">canonical_forms_fun<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCProp.closed	plf/StlcProp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCProp.closed"><span class="id" type="definition">closed<\/span><\/a> (<span class="id" type="var">t<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) :=<br\/>$/;"	a
STLCProp.context_invariance	plf/StlcProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCProp.context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.free_in_context	plf/StlcProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCProp.free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
STLCProp.preservation	plf/StlcProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCProp.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.progress	plf/StlcProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCProp.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.progress'	plf/StlcProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCProp.progress'"><span class="id" type="lemma">progress'<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.soundness	plf/StlcProp.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="STLCProp.soundness"><span class="id" type="lemma">soundness<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.stuck	plf/StlcProp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCProp.stuck"><span class="id" type="definition">stuck<\/span><\/a> (<span class="id" type="var">t<\/span>:<a class="idref" href="Stlc.html#STLC.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCProp.substitution_preserves_typing	plf/StlcProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCProp.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCProp.typable_empty__closed	plf/StlcProp.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="STLCProp.typable_empty__closed"><span class="id" type="lemma">typable_empty__closed<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef	plf/References.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCRef"><span class="id" type="module">STLCRef<\/span><\/a>.<br\/>$/;"	a
STLCRef.ExampleVariables	plf/References.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCRef.ExampleVariables"><span class="id" type="module">ExampleVariables<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCRef.ExampleVariables.r	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.ExampleVariables.r"><span class="id" type="definition">r<\/span><\/a> := <span class="id" type="constructor">Id<\/span> "r".<br\/>$/;"	a
STLCRef.ExampleVariables.s	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.ExampleVariables.s"><span class="id" type="definition">s<\/span><\/a> := <span class="id" type="constructor">Id<\/span> "s".<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCRef.ExampleVariables.x	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.ExampleVariables.x"><span class="id" type="definition">x<\/span><\/a> := <span class="id" type="constructor">Id<\/span> "x".<br\/>$/;"	a
STLCRef.ExampleVariables.y	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.ExampleVariables.y"><span class="id" type="definition">y<\/span><\/a> := <span class="id" type="constructor">Id<\/span> "y".<br\/>$/;"	a
STLCRef.RefsAndNontermination	plf/References.html	/^<span class="id" type="keyword">Module<\/span> <a name="STLCRef.RefsAndNontermination"><span class="id" type="module">RefsAndNontermination<\/span><\/a>.<br\/>$/;"	a
STLCRef.RefsAndNontermination.factorial	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.RefsAndNontermination.factorial"><span class="id" type="definition">factorial<\/span><\/a> : <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> <br\/>$/;"	a
STLCRef.RefsAndNontermination.factorial_type	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.RefsAndNontermination.factorial_type"><span class="id" type="lemma">factorial_type<\/span><\/a> : <span class="id" type="definition">empty<\/span>; <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nil"><span class="id" type="constructor">nil<\/span><\/a> |- <a class="idref" href="References.html#STLCRef.RefsAndNontermination.factorial"><span class="id" type="axiom">factorial<\/span><\/a> &#x2208; (<a class="idref" href="References.html#STLCRef.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> <a class="idref" href="References.html#STLCRef.TNat"><span class="id" type="constructor">TNat<\/span><\/a> <a class="idref" href="References.html#STLCRef.TNat"><span class="id" type="constructor">TNat<\/span><\/a>).<br\/>$/;"	a
STLCRef.RefsAndNontermination.loop	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.RefsAndNontermination.loop"><span class="id" type="definition">loop<\/span><\/a> :=<br\/>$/;"	a
STLCRef.RefsAndNontermination.loop_fun	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.RefsAndNontermination.loop_fun"><span class="id" type="definition">loop_fun<\/span><\/a> :=<br\/>$/;"	a
STLCRef.RefsAndNontermination.loop_fun_step_self	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.RefsAndNontermination.loop_fun_step_self"><span class="id" type="lemma">loop_fun_step_self<\/span><\/a> :<br\/>$/;"	a
STLCRef.RefsAndNontermination.loop_steps_to_loop_fun	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.RefsAndNontermination.loop_steps_to_loop_fun"><span class="id" type="lemma">loop_steps_to_loop_fun<\/span><\/a> :<br\/>$/;"	a
STLCRef.RefsAndNontermination.loop_typeable	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.RefsAndNontermination.loop_typeable"><span class="id" type="lemma">loop_typeable<\/span><\/a> : ∃ <span class="id" type="var">T<\/span>, <span class="id" type="definition">empty<\/span>; <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nil"><span class="id" type="constructor">nil<\/span><\/a> |- <a class="idref" href="References.html#STLCRef.RefsAndNontermination.loop"><span class="id" type="definition">loop<\/span><\/a> &#x2208; <a class="idref" href="References.html#T"><span class="id" type="variable">T<\/span><\/a>.<br\/>$/;"	a
STLCRef.RefsAndNontermination.multistep1	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.RefsAndNontermination.multistep1"><span class="id" type="definition">multistep1<\/span><\/a> := (<a class="idref" href="References.html#STLCRef.RefsAndNontermination.step_closure"><span class="id" type="inductive">step_closure<\/span><\/a> <a class="idref" href="References.html#STLCRef.step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
STLCRef.RefsAndNontermination.sc_one	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.RefsAndNontermination.sc_one"><span class="id" type="constructor">sc_one<\/span><\/a>  : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <span class="id" type="var">X<\/span>),<br\/>$/;"	a
STLCRef.RefsAndNontermination.sc_step	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.RefsAndNontermination.sc_step"><span class="id" type="constructor">sc_step<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <span class="id" type="var">X<\/span>),<br\/>$/;"	a
STLCRef.RefsAndNontermination.step_closure	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.RefsAndNontermination.step_closure"><span class="id" type="inductive">step_closure<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="References.html#X"><span class="id" type="variable">X<\/span><\/a>) : <span class="id" type="var">X<\/span> → <span class="id" type="var">X<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCRef.ST_App1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_App2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_AppAbs	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_Assign	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Assign"><span class="id" type="constructor">ST_Assign<\/span><\/a> : ∀ <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">l<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_Assign1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Assign1"><span class="id" type="constructor">ST_Assign1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_Assign2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Assign2"><span class="id" type="constructor">ST_Assign2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_Deref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Deref"><span class="id" type="constructor">ST_Deref<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_DerefLoc	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_DerefLoc"><span class="id" type="constructor">ST_DerefLoc<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
STLCRef.ST_If0_Nonzero	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_If0_Nonzero"><span class="id" type="constructor">ST_If0_Nonzero<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_If0_Zero	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_If0_Zero"><span class="id" type="constructor">ST_If0_Zero<\/span><\/a> : ∀ <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_If<sub	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_If<sub>0<\/sub>"><span class="id" type="constructor">ST_If<sub>0<\/sub><\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_Mult1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Mult1"><span class="id" type="constructor">ST_Mult1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_Mult2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Mult2"><span class="id" type="constructor">ST_Mult2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_MultNats	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_MultNats"><span class="id" type="constructor">ST_MultNats<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_Pred	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Pred"><span class="id" type="constructor">ST_Pred<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_PredNat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_PredNat"><span class="id" type="constructor">ST_PredNat<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_Ref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Ref"><span class="id" type="constructor">ST_Ref<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_RefValue	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_RefValue"><span class="id" type="constructor">ST_RefValue<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.ST_Succ	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_Succ"><span class="id" type="constructor">ST_Succ<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.ST_SuccNat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.ST_SuccNat"><span class="id" type="constructor">ST_SuccNat<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.TArrow	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCRef.TNat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.TNat"><span class="id" type="constructor">TNat<\/span><\/a>   : <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCRef.TRef	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.TRef"><span class="id" type="constructor">TRef<\/span><\/a>   : <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCRef.TUnit	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.TUnit"><span class="id" type="constructor">TUnit<\/span><\/a>  : <a class="idref" href="References.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
STLCRef.T_Abs	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_App	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Assign	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Assign"><span class="id" type="constructor">T_Assign<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>11<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Deref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Deref"><span class="id" type="constructor">T_Deref<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>11<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_If<sub	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_If<sub>0<\/sub>"><span class="id" type="constructor">T_If<sub>0<\/sub><\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.T_Loc	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Loc"><span class="id" type="constructor">T_Loc<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
STLCRef.T_Mult	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Mult"><span class="id" type="constructor">T_Mult<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Nat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Nat"><span class="id" type="constructor">T_Nat<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
STLCRef.T_Pred	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Pred"><span class="id" type="constructor">T_Pred<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Ref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Ref"><span class="id" type="constructor">T_Ref<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Succ	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Succ"><span class="id" type="constructor">T_Succ<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.T_Unit	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Unit"><span class="id" type="constructor">T_Unit<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span>,<br\/>$/;"	a
STLCRef.T_Var	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.afi_abs	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_app1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_app2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_assign1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_assign1"><span class="id" type="constructor">afi_assign1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_assign2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_assign2"><span class="id" type="constructor">afi_assign2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_deref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_deref"><span class="id" type="constructor">afi_deref<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_if0_1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_if0_1"><span class="id" type="constructor">afi_if0_1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_if0_2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_if0_2"><span class="id" type="constructor">afi_if0_2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_if0_3	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_if0_3"><span class="id" type="constructor">afi_if0_3<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_mult1	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_mult1"><span class="id" type="constructor">afi_mult1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_mult2	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_mult2"><span class="id" type="constructor">afi_mult2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_pred	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_pred"><span class="id" type="constructor">afi_pred<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_ref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_ref"><span class="id" type="constructor">afi_ref<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_succ	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_succ"><span class="id" type="constructor">afi_succ<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.afi_var	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
STLCRef.appears_free_in	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCRef.assign_pres_store_typing	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.assign_pres_store_typing"><span class="id" type="lemma">assign_pres_store_typing<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">l<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLCRef.context	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="References.html#STLCRef.ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
STLCRef.context_invariance	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.extends	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.extends"><span class="id" type="inductive">extends<\/span><\/a> : <a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a> → <a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCRef.extends_app	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.extends_app"><span class="id" type="lemma">extends_app<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.extends_cons	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.extends_cons"><span class="id" type="constructor">extends_cons<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">ST'<\/span> <span class="id" type="var">ST<\/span>,<br\/>$/;"	a
STLCRef.extends_lookup	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.extends_lookup"><span class="id" type="lemma">extends_lookup<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">ST'<\/span>,<br\/>$/;"	a
STLCRef.extends_nil	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.extends_nil"><span class="id" type="constructor">extends_nil<\/span><\/a>  : ∀ <span class="id" type="var">ST'<\/span>,<br\/>$/;"	a
STLCRef.extends_refl	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.extends_refl"><span class="id" type="lemma">extends_refl<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span>,<br\/>$/;"	a
STLCRef.free_in_context	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span>,<br\/>$/;"	a
STLCRef.has_type	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="References.html#STLCRef.context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a> → <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#STLCRef.ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCRef.length_extends	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.length_extends"><span class="id" type="lemma">length_extends<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">ST'<\/span>,<br\/>$/;"	a
STLCRef.length_replace	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.length_replace"><span class="id" type="lemma">length_replace<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">x<\/span> (<span class="id" type="var">l<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a>),<br\/>$/;"	a
STLCRef.lookup_replace_eq	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.lookup_replace_eq"><span class="id" type="lemma">lookup_replace_eq<\/span><\/a> : ∀ <span class="id" type="var">l<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.lookup_replace_neq	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.lookup_replace_neq"><span class="id" type="lemma">lookup_replace_neq<\/span><\/a> : ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.multistep	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.multistep"><span class="id" type="definition">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="References.html#STLCRef.step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
STLCRef.nth_eq_last	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.nth_eq_last"><span class="id" type="lemma">nth_eq_last<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">l<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a>) <span class="id" type="var">x<\/span> <span class="id" type="var">d<\/span>,<br\/>$/;"	a
STLCRef.preservation	plf/References.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCRef.preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.preservation_theorem	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.preservation_theorem"><span class="id" type="definition">preservation_theorem<\/span><\/a> := ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.preservation_wrong1	plf/References.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCRef.preservation_wrong1"><span class="id" type="lemma">preservation_wrong1<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.preservation_wrong2	plf/References.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCRef.preservation_wrong2"><span class="id" type="lemma">preservation_wrong2<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
STLCRef.progress	plf/References.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="STLCRef.progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
STLCRef.replace	plf/References.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCRef.replace"><span class="id" type="definition">replace<\/span><\/a> {<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">x<\/span>:<a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a> :=<br\/>$/;"	a
STLCRef.replace_nil	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.replace_nil"><span class="id" type="lemma">replace_nil<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">n<\/span> (<span class="id" type="var">x<\/span>:<a class="idref" href="References.html#A"><span class="id" type="variable">A<\/span><\/a>),<br\/>$/;"	a
STLCRef.step	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> * <a class="idref" href="References.html#STLCRef.store"><span class="id" type="definition">store<\/span><\/a> → <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> * <a class="idref" href="References.html#STLCRef.store"><span class="id" type="definition">store<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
STLCRef.store	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.store"><span class="id" type="definition">store<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLCRef.store_Tlookup	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.store_Tlookup"><span class="id" type="definition">store_Tlookup<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">ST<\/span>:<a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a>) :=<br\/>$/;"	a
STLCRef.store_lookup	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.store_lookup"><span class="id" type="definition">store_lookup<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">st<\/span>:<a class="idref" href="References.html#STLCRef.store"><span class="id" type="definition">store<\/span><\/a>) :=<br\/>$/;"	a
STLCRef.store_ty	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="References.html#STLCRef.ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
STLCRef.store_weakening	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.store_weakening"><span class="id" type="lemma">store_weakening<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">ST'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.store_well_typed	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.store_well_typed"><span class="id" type="definition">store_well_typed<\/span><\/a> (<span class="id" type="var">ST<\/span>:<a class="idref" href="References.html#STLCRef.store_ty"><span class="id" type="definition">store_ty<\/span><\/a>) (<span class="id" type="var">st<\/span>:<a class="idref" href="References.html#STLCRef.store"><span class="id" type="definition">store<\/span><\/a>) :=<br\/>$/;"	a
STLCRef.store_well_typed_app	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.store_well_typed_app"><span class="id" type="lemma">store_well_typed_app<\/span><\/a> : ∀ <span class="id" type="var">ST<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
STLCRef.subst	plf/References.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="STLCRef.subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
STLCRef.substitution_preserves_typing	plf/References.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="STLCRef.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">ST<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">s<\/span> <span class="id" type="var">S<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
STLCRef.tabs	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tabs"><span class="id" type="constructor">tabs<\/span><\/a>    : <span class="id" type="inductive">id<\/span> → <a class="idref" href="References.html#STLCRef.ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tapp	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tapp"><span class="id" type="constructor">tapp<\/span><\/a>    : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tassign	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tassign"><span class="id" type="constructor">tassign<\/span><\/a> : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tderef	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tderef"><span class="id" type="constructor">tderef<\/span><\/a>  : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tif0	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tif0"><span class="id" type="constructor">tif0<\/span><\/a>    : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tloc	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tloc"><span class="id" type="constructor">tloc<\/span><\/a>    : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
STLCRef.tm	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a>  : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCRef.tmult	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tmult"><span class="id" type="constructor">tmult<\/span><\/a>   : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tnat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tnat"><span class="id" type="constructor">tnat<\/span><\/a>    : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tpred	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tpred"><span class="id" type="constructor">tpred<\/span><\/a>   : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tref	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tref"><span class="id" type="constructor">tref<\/span><\/a>    : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tseq	plf/References.html	/^<span class="id" type="keyword">Definition<\/span> <a name="STLCRef.tseq"><span class="id" type="definition">tseq<\/span><\/a> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> :=<br\/>$/;"	a
STLCRef.tsucc	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tsucc"><span class="id" type="constructor">tsucc<\/span><\/a>   : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tunit	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tunit"><span class="id" type="constructor">tunit<\/span><\/a>   : <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.tvar	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.tvar"><span class="id" type="constructor">tvar<\/span><\/a>    : <span class="id" type="inductive">id<\/span> → <a class="idref" href="References.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
STLCRef.ty	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
STLCRef.v_abs	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.v_abs"><span class="id" type="constructor">v_abs<\/span><\/a>  : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
STLCRef.v_loc	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.v_loc"><span class="id" type="constructor">v_loc<\/span><\/a> : ∀ <span class="id" type="var">l<\/span>,<br\/>$/;"	a
STLCRef.v_nat	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.v_nat"><span class="id" type="constructor">v_nat<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
STLCRef.v_unit	plf/References.html	/^&nbsp;&nbsp;| <a name="STLCRef.v_unit"><span class="id" type="constructor">v_unit<\/span><\/a> :<br\/>$/;"	a
STLCRef.value	plf/References.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="STLCRef.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="References.html#STLCRef.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ST_App1	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_App1	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_App1	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_App1"><span class="id" type="constructor">ST_App1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_App2	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_App2	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_App2	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_App2"><span class="id" type="constructor">ST_App2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_AppAbs	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_AppAbs	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_AppAbs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_AppAbs"><span class="id" type="constructor">ST_AppAbs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<sub>12<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Fst	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_Fst"><span class="id" type="constructor">ST_Fst<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
ST_FstPair	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_FstPair"><span class="id" type="constructor">ST_FstPair<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_If	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>0<\/sub>'<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_If	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
ST_If	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
ST_IfFalse	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_IfFalse	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_IfFalse	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_IfTrue	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_IfTrue	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_IfTrue	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Iszero	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_Iszero"><span class="id" type="constructor">ST_Iszero<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
ST_IszeroSucc	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_IszeroSucc"><span class="id" type="constructor">ST_IszeroSucc<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
ST_IszeroZero	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_IszeroZero"><span class="id" type="constructor">ST_IszeroZero<\/span><\/a> :<br\/>$/;"	a
ST_Pair1	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_Pair1"><span class="id" type="constructor">ST_Pair1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Pair2	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_Pair2"><span class="id" type="constructor">ST_Pair2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="ST_Plus2"><span class="id" type="constructor">ST_Plus2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Pred	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_Pred"><span class="id" type="constructor">ST_Pred<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
ST_PredSucc	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_PredSucc"><span class="id" type="constructor">ST_PredSucc<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
ST_PredZero	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_PredZero"><span class="id" type="constructor">ST_PredZero<\/span><\/a> :<br\/>$/;"	a
ST_Proj1	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_Proj1"><span class="id" type="constructor">ST_Proj1<\/span><\/a> : ∀ <span class="id" type="var">tr<\/span> <span class="id" type="var">tr'<\/span> <span class="id" type="var">i<\/span>,<br\/>$/;"	a
ST_ProjRcd	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_ProjRcd"><span class="id" type="constructor">ST_ProjRcd<\/span><\/a> : ∀ <span class="id" type="var">tr<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">vi<\/span>,<br\/>$/;"	a
ST_Rcd_Head	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_Rcd_Head"><span class="id" type="constructor">ST_Rcd_Head<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">tr<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Rcd_Tail	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="ST_Rcd_Tail"><span class="id" type="constructor">ST_Rcd_Tail<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">tr<sub>2<\/sub><\/span> <span class="id" type="var">tr<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
ST_Snd	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_Snd"><span class="id" type="constructor">ST_Snd<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
ST_SndPair	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ST_SndPair"><span class="id" type="constructor">ST_SndPair<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
ST_Succ	plf/Types.html	/^&nbsp;&nbsp;| <a name="ST_Succ"><span class="id" type="constructor">ST_Succ<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span>,<br\/>$/;"	a
S_Arrow	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_Arrow"><span class="id" type="constructor">S_Arrow<\/span><\/a> : ∀ <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">S<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
S_Arrow	plf/Sub.html	/^&nbsp;&nbsp;| <a name="S_Arrow"><span class="id" type="constructor">S_Arrow<\/span><\/a> : ∀ <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">S<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
S_RcdDepth	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_RcdDepth"><span class="id" type="constructor">S_RcdDepth<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">Sr<sub>2<\/sub><\/span> <span class="id" type="var">Tr<sub>2<\/sub><\/span>,<br\/>$/;"	a
S_RcdPerm	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_RcdPerm"><span class="id" type="constructor">S_RcdPerm<\/span><\/a> : ∀ <span class="id" type="var">i<sub>1<\/sub><\/span> <span class="id" type="var">i<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Tr<sub>3<\/sub><\/span>,<br\/>$/;"	a
S_RcdWidth	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_RcdWidth"><span class="id" type="constructor">S_RcdWidth<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
S_Refl	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_Refl"><span class="id" type="constructor">S_Refl<\/span><\/a> : ∀ <span class="id" type="var">T<\/span>,<br\/>$/;"	a
S_Refl	plf/Sub.html	/^&nbsp;&nbsp;| <a name="S_Refl"><span class="id" type="constructor">S_Refl<\/span><\/a> : ∀ <span class="id" type="var">T<\/span>,<br\/>$/;"	a
S_Top	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_Top"><span class="id" type="constructor">S_Top<\/span><\/a> : ∀ <span class="id" type="var">S<\/span>,<br\/>$/;"	a
S_Top	plf/Sub.html	/^&nbsp;&nbsp;| <a name="S_Top"><span class="id" type="constructor">S_Top<\/span><\/a> : ∀ <span class="id" type="var">S<\/span>,<br\/>$/;"	a
S_Trans	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="S_Trans"><span class="id" type="constructor">S_Trans<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
S_Trans	plf/Sub.html	/^&nbsp;&nbsp;| <a name="S_Trans"><span class="id" type="constructor">S_Trans<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
S_inj	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="S_inj"><span class="id" type="lemma">S_inj<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">b<\/span> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>),<br\/>$/;"	a
S_injective	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="S_injective"><span class="id" type="lemma">S_injective<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
Semantics	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="Semantics"><span class="id" type="module">Semantics<\/span><\/a>.<br\/>$/;"	a
Semantics.multistep__eval	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Semantics.multistep__eval"><span class="id" type="lemma">multistep__eval<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
Semantics.multistep__eval'	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Semantics.multistep__eval'"><span class="id" type="lemma">multistep__eval'<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
Semantics.multistep__eval''	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Semantics.multistep__eval''"><span class="id" type="lemma">multistep__eval''<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
Semantics.multistep_eval_ind	plf/UseAuto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Semantics.multistep_eval_ind"><span class="id" type="lemma">multistep_eval_ind<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
SimpleArith1	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="SimpleArith1"><span class="id" type="module">SimpleArith1<\/span><\/a>.<br\/>$/;"	a
SimpleArith1.ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SimpleArith1.ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
SimpleArith1.ST_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SimpleArith1.ST_Plus2"><span class="id" type="constructor">ST_Plus2<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
SimpleArith1.ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="SimpleArith1.ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
SimpleArith1.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="SimpleArith1.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
SimpleArith1.test_step_1	plf/Smallstep.html	/^<span class="id" type="keyword">Example<\/span> <a name="SimpleArith1.test_step_1"><span class="id" type="definition">test_step_1<\/span><\/a> :<br\/>$/;"	a
SimpleArith1.test_step_2	plf/Smallstep.html	/^<span class="id" type="keyword">Example<\/span> <a name="SimpleArith1.test_step_2"><span class="id" type="definition">test_step_2<\/span><\/a> :<br\/>$/;"	a
SimpleArith2	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="SimpleArith2"><span class="id" type="module">SimpleArith2<\/span><\/a>.<br\/>$/;"	a
SimpleArith2.step_deterministic	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SimpleArith2.step_deterministic"><span class="id" type="lemma">step_deterministic<\/span><\/a>:<br\/>$/;"	a
SimpleArith3	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="SimpleArith3"><span class="id" type="module">SimpleArith3<\/span><\/a>.<br\/>$/;"	a
SimpleArith3.step_deterministic_alt	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SimpleArith3.step_deterministic_alt"><span class="id" type="lemma">step_deterministic_alt<\/span><\/a>: <a class="idref" href="Smallstep.html#deterministic"><span class="id" type="definition">deterministic<\/span><\/a> <a class="idref" href="Smallstep.html#SimpleArith1.step"><span class="id" type="inductive">step<\/span><\/a>.<br\/>$/;"	a
SkipExample	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="SkipExample"><span class="id" type="module">SkipExample<\/span><\/a>.<br\/>$/;"	a
SkipExample.astep_example1	plf/UseTactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="SkipExample.astep_example1"><span class="id" type="definition">astep_example1<\/span><\/a> :<br\/>$/;"	a
SkipExample.ceval_deterministic	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SkipExample.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
SkipExample.demo_skipH	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SkipExample.demo_skipH"><span class="id" type="lemma">demo_skipH<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
SkipExample.mult_0_plus	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SkipExample.mult_0_plus"><span class="id" type="lemma">mult_0_plus<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
Sn_le_Sm__n_le_m	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Sn_le_Sm__n_le_m"><span class="id" type="lemma">Sn_le_Sm__n_le_m<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
Some	lf/Poly.html	/^&nbsp;&nbsp;| <a name="Some"><span class="id" type="constructor">Some<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="Poly.html#option"><span class="id" type="inductive">option<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
Some	lf/imp1.ml	/^| Some of 'a$/;"	C	type:option
Some	lf/imp1.mli	/^| Some of 'a$/;"	C	type:option
Some	lf/imp2.ml	/^| Some of 'a$/;"	C	type:option
Some	lf/imp2.mli	/^| Some of 'a$/;"	C	type:option
SomeE	lf/ImpParser.html	/^&nbsp;&nbsp;| <a name="SomeE"><span class="id" type="constructor">SomeE<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="ImpParser.html#optionE"><span class="id" type="inductive">optionE<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
SomeE	lf/imp.ml	/^| SomeE of 'x$/;"	C	type:optionE
SomeE	lf/imp.mli	/^| SomeE of 'x$/;"	C	type:optionE
SortExamples	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="SortExamples"><span class="id" type="module">SortExamples<\/span><\/a>.<br\/>$/;"	a
SortExamples.ceval_deterministic	plf/UseTactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="SortExamples.ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
Star	lf/IndProp.html	/^| <a name="Star"><span class="id" type="constructor">Star<\/span><\/a> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>.<br\/>$/;"	a
StepFunction	plf/Typechecking.html	/^<span class="id" type="keyword">Module<\/span> <a name="StepFunction"><span class="id" type="module">StepFunction<\/span><\/a>.<br\/>$/;"	a
StlcImpl	plf/Typechecking.html	/^<span class="id" type="keyword">Module<\/span> <a name="StlcImpl"><span class="id" type="module">StlcImpl<\/span><\/a>.<br\/>$/;"	a
String	lf/imp1.ml	/^| String of ascii * string$/;"	C	type:string
String	lf/imp1.mli	/^| String of ascii * string$/;"	C	type:string
String	lf/imp2.ml	/^| String of ascii * string$/;"	C	type:string
String	lf/imp2.mli	/^| String of ascii * string$/;"	C	type:string
SubtypingInversion	plf/UseAuto.html	/^<span class="id" type="keyword">Module<\/span> <a name="SubtypingInversion"><span class="id" type="module">SubtypingInversion<\/span><\/a>.<br\/>$/;"	a
SubtypingInversion.abs_arrow	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="SubtypingInversion.abs_arrow"><span class="id" type="lemma">abs_arrow<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
SubtypingInversion.abs_arrow'	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="SubtypingInversion.abs_arrow'"><span class="id" type="lemma">abs_arrow'<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
SubtypingInversion.substitution_preserves_typing	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="SubtypingInversion.substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
T	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="T"><span class="id" type="definition">T<\/span><\/a> : <span class="id" type="inductive">id<\/span> := <span class="id" type="constructor">Id<\/span> "T".<br\/><hr class='doublespaceincode'\/>$/;"	a
TArrow	plf/Norm.html	/^&nbsp;&nbsp;| <a name="TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TArrow	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TArrow	plf/Sub.html	/^&nbsp;&nbsp;| <a name="TArrow"><span class="id" type="constructor">TArrow<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TBase	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="TBase"><span class="id" type="constructor">TBase<\/span><\/a>  : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TBase	plf/Sub.html	/^&nbsp;&nbsp;| <a name="TBase"><span class="id" type="constructor">TBase<\/span><\/a>  : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TBool	plf/Norm.html	/^&nbsp;&nbsp;| <a name="TBool"><span class="id" type="constructor">TBool<\/span><\/a> : <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TBool	plf/Sub.html	/^&nbsp;&nbsp;| <a name="TBool"><span class="id" type="constructor">TBool<\/span><\/a>  : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TBool	plf/Types.html	/^&nbsp;&nbsp;| <a name="TBool"><span class="id" type="constructor">TBool<\/span><\/a> : <a class="idref" href="Types.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TIMECMD	lf/Makefile	/^TIMECMD?=$/;"	m
TIMECMD	plf/Makefile	/^TIMECMD?=$/;"	m
TIMED	lf/Makefile	/^TIMED?=$/;"	m
TIMED	plf/Makefile	/^TIMED?=$/;"	m
TIMER	lf/Makefile	/^TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))$/;"	m
TIMER	plf/Makefile	/^TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))$/;"	m
TNat	plf/Types.html	/^&nbsp;&nbsp;| <a name="TNat"><span class="id" type="constructor">TNat<\/span><\/a> : <a class="idref" href="Types.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/>$/;"	a
TProd	plf/Norm.html	/^&nbsp;&nbsp;| <a name="TProd"><span class="id" type="constructor">TProd<\/span><\/a>  : <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TRCons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="TRCons"><span class="id" type="constructor">TRCons<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
TRNil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="TRNil"><span class="id" type="constructor">TRNil<\/span><\/a> : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TTop	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="TTop"><span class="id" type="constructor">TTop<\/span><\/a>   : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TTop	plf/Sub.html	/^&nbsp;&nbsp;| <a name="TTop"><span class="id" type="constructor">TTop<\/span><\/a>   : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
TUnit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="TUnit"><span class="id" type="constructor">TUnit<\/span><\/a>  : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a><br\/>$/;"	a
T_Abs	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
T_Abs	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
T_Abs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_Abs"><span class="id" type="constructor">T_Abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">T<sub>12<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
T_App	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_App	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_App	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_App"><span class="id" type="constructor">T_App<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_False	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_False"><span class="id" type="constructor">T_False<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_False	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_False"><span class="id" type="constructor">T_False<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_False	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_False"><span class="id" type="constructor">T_False<\/span><\/a> :<br\/>$/;"	a
T_Fst	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_Fst"><span class="id" type="constructor">T_Fst<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_If	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_If"><span class="id" type="constructor">T_If<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_If	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_If"><span class="id" type="constructor">T_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_If	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_If"><span class="id" type="constructor">T_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Iszero	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_Iszero"><span class="id" type="constructor">T_Iszero<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
T_Pair	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_Pair"><span class="id" type="constructor">T_Pair<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_Pred	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_Pred"><span class="id" type="constructor">T_Pred<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
T_Proj	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_Proj"><span class="id" type="constructor">T_Proj<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
T_RCons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_RCons"><span class="id" type="constructor">T_RCons<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">tr<\/span> <span class="id" type="var">Tr<\/span>,<br\/>$/;"	a
T_RNil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_RNil"><span class="id" type="constructor">T_RNil<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_Snd	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_Snd"><span class="id" type="constructor">T_Snd<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
T_Sub	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_Sub"><span class="id" type="constructor">T_Sub<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Sub	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_Sub"><span class="id" type="constructor">T_Sub<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Succ	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_Succ"><span class="id" type="constructor">T_Succ<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span>,<br\/>$/;"	a
T_True	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_True"><span class="id" type="constructor">T_True<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_True	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_True"><span class="id" type="constructor">T_True<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_True	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_True"><span class="id" type="constructor">T_True<\/span><\/a> :<br\/>$/;"	a
T_Unit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_Unit"><span class="id" type="constructor">T_Unit<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
T_Var	plf/Norm.html	/^&nbsp;&nbsp;| <a name="T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Var	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Var	plf/Sub.html	/^&nbsp;&nbsp;| <a name="T_Var"><span class="id" type="constructor">T_Var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
T_Zero	plf/Types.html	/^&nbsp;&nbsp;| <a name="T_Zero"><span class="id" type="constructor">T_Zero<\/span><\/a> :<br\/>$/;"	a
Temp1	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Temp1"><span class="id" type="module">Temp1<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp1.ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp1.ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp1.ST_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp1.ST_Plus2"><span class="id" type="constructor">ST_Plus2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
Temp1.ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp1.ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp1.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp1.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp1.v_const	plf/Smallstep.html	/^| <a name="Temp1.v_const"><span class="id" type="constructor">v_const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="Smallstep.html#C"><span class="id" type="constructor">C<\/span><\/a> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>)<br\/>$/;"	a
Temp1.v_funny	plf/Smallstep.html	/^| <a name="Temp1.v_funny"><span class="id" type="constructor">v_funny<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,                       <span class="comment">(*&nbsp;&lt;----&nbsp;*)<\/span><br\/>$/;"	a
Temp1.value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp1.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp1.value_not_same_as_normal_form	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Temp1.value_not_same_as_normal_form"><span class="id" type="lemma">value_not_same_as_normal_form<\/span><\/a> :<br\/>$/;"	a
Temp2	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Temp2"><span class="id" type="module">Temp2<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp2.ST_Funny	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp2.ST_Funny"><span class="id" type="constructor">ST_Funny<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,                         <span class="comment">(*&nbsp;&lt;----&nbsp;*)<\/span><br\/>$/;"	a
Temp2.ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp2.ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp2.ST_Plus2	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp2.ST_Plus2"><span class="id" type="constructor">ST_Plus2<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
Temp2.ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp2.ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp2.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp2.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp2.v_const	plf/Smallstep.html	/^| <a name="Temp2.v_const"><span class="id" type="constructor">v_const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="Smallstep.html#C"><span class="id" type="constructor">C<\/span><\/a> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp2.value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp2.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp2.value_not_same_as_normal_form	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Temp2.value_not_same_as_normal_form"><span class="id" type="lemma">value_not_same_as_normal_form<\/span><\/a> :<br\/>$/;"	a
Temp3	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Temp3"><span class="id" type="module">Temp3<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp3.ST_Plus1	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp3.ST_Plus1"><span class="id" type="constructor">ST_Plus1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp3.ST_PlusConstConst	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp3.ST_PlusConstConst"><span class="id" type="constructor">ST_PlusConstConst<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp3.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp3.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp3.v_const	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp3.v_const"><span class="id" type="constructor">v_const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="Smallstep.html#C"><span class="id" type="constructor">C<\/span><\/a> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp3.value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp3.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp3.value_not_same_as_normal_form	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="Temp3.value_not_same_as_normal_form"><span class="id" type="lemma">value_not_same_as_normal_form<\/span><\/a> :<br\/>$/;"	a
Temp4	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Temp4"><span class="id" type="module">Temp4<\/span><\/a>.<br\/>$/;"	a
Temp4.ST_If	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
Temp4.ST_IfFalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp4.ST_IfTrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp4.Temp5	plf/Smallstep.html	/^<span class="id" type="keyword">Module<\/span> <a name="Temp4.Temp5"><span class="id" type="module">Temp5<\/span><\/a>.<br\/>$/;"	a
Temp4.Temp5.ST_If	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.Temp5.ST_If"><span class="id" type="constructor">ST_If<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
Temp4.Temp5.ST_IfFalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.Temp5.ST_IfFalse"><span class="id" type="constructor">ST_IfFalse<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp4.Temp5.ST_IfTrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.Temp5.ST_IfTrue"><span class="id" type="constructor">ST_IfTrue<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
Temp4.Temp5.bool_step_prop4	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Temp4.Temp5.bool_step_prop4"><span class="id" type="definition">bool_step_prop4<\/span><\/a> :=<br\/>$/;"	a
Temp4.Temp5.bool_step_prop4_holds	plf/Smallstep.html	/^<span class="id" type="keyword">Example<\/span> <a name="Temp4.Temp5.bool_step_prop4_holds"><span class="id" type="definition">bool_step_prop4_holds<\/span><\/a> :<br\/>$/;"	a
Temp4.Temp5.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp4.Temp5.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp4.bool_step_prop1	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Temp4.bool_step_prop1"><span class="id" type="definition">bool_step_prop1<\/span><\/a> :=<br\/>$/;"	a
Temp4.bool_step_prop2	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Temp4.bool_step_prop2"><span class="id" type="definition">bool_step_prop2<\/span><\/a> :=<br\/>$/;"	a
Temp4.bool_step_prop3	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Temp4.bool_step_prop3"><span class="id" type="definition">bool_step_prop3<\/span><\/a> :=<br\/>$/;"	a
Temp4.step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp4.step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Temp4.step_deterministic	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Temp4.step_deterministic"><span class="id" type="lemma">step_deterministic<\/span><\/a> :<br\/>$/;"	a
Temp4.strong_progress	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="Temp4.strong_progress"><span class="id" type="lemma">strong_progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
Temp4.tfalse	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Temp4.tif	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp4.tm	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
Temp4.ttrue	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
Temp4.v_false	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.v_false"><span class="id" type="constructor">v_false<\/span><\/a> : <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Smallstep.html#Temp4.tfalse"><span class="id" type="constructor">tfalse<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
Temp4.v_true	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="Temp4.v_true"><span class="id" type="constructor">v_true<\/span><\/a> : <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Smallstep.html#Temp4.ttrue"><span class="id" type="constructor">ttrue<\/span><\/a><br\/>$/;"	a
Temp4.value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="Temp4.value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#Temp4.tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
Tlookup	plf/RecordSub.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="Tlookup"><span class="id" type="definition">Tlookup<\/span><\/a> (<span class="id" type="var">i<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">Tr<\/span>:<a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> :=<br\/>$/;"	a
True	lf/imp1.ml	/^| True$/;"	C	type:bool
True	lf/imp1.mli	/^| True$/;"	C	type:bool
True_is_true	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="True_is_true"><span class="id" type="lemma">True_is_true<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#True"><span class="id" type="inductive">True<\/span><\/a>.<br\/>$/;"	a
Tween	lf/common/jquery-ui/external/jquery/jquery.js	/^function Tween( elem, options, prop, end, easing ) {$/;"	f
Tween	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.Tween = Tween;$/;"	c
Tween	plf/common/jquery-ui/external/jquery/jquery.js	/^function Tween( elem, options, prop, end, easing ) {$/;"	f
Tween	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.Tween = Tween;$/;"	c
TypecheckerExtensions	plf/Typechecking.html	/^<span class="id" type="keyword">Module<\/span> <a name="TypecheckerExtensions"><span class="id" type="module">TypecheckerExtensions<\/span><\/a>.<br\/>$/;"	a
TypecheckerExtensions.beq_ty	plf/Typechecking.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="TypecheckerExtensions.beq_ty"><span class="id" type="definition">beq_ty<\/span><\/a> (<span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>: <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
TypecheckerExtensions.beq_ty__eq	plf/Typechecking.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="TypecheckerExtensions.beq_ty__eq"><span class="id" type="lemma">beq_ty__eq<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
TypecheckerExtensions.beq_ty_refl	plf/Typechecking.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="TypecheckerExtensions.beq_ty_refl"><span class="id" type="lemma">beq_ty_refl<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span>,<br\/>$/;"	a
TypecheckerExtensions.type_check	plf/Typechecking.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="TypecheckerExtensions.type_check"><span class="id" type="definition">type_check<\/span><\/a> (<span class="id" type="var">Gamma<\/span>:<a class="idref" href="MoreStlc.html#STLCExtended.context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="MoreStlc.html#STLCExtended.tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="MoreStlc.html#STLCExtended.ty"><span class="id" type="inductive">ty<\/span><\/a> :=<br\/>$/;"	a
TypecheckerExtensions.type_checking_complete	plf/Typechecking.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="TypecheckerExtensions.type_checking_complete"><span class="id" type="lemma">type_checking_complete<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
TypecheckerExtensions.type_checking_sound	plf/Typechecking.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="TypecheckerExtensions.type_checking_sound"><span class="id" type="lemma">type_checking_sound<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
UnfoldsExample	plf/UseTactics.html	/^<span class="id" type="keyword">Module<\/span> <a name="UnfoldsExample"><span class="id" type="module">UnfoldsExample<\/span><\/a>.<br\/>$/;"	a
UnfoldsExample.bexp_eval_true	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="UnfoldsExample.bexp_eval_true"><span class="id" type="lemma">bexp_eval_true<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
Union	lf/IndProp.html	/^| <a name="Union"><span class="id" type="constructor">Union<\/span><\/a> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a><br\/>$/;"	a
VERBOSE	lf/Makefile	/^VERBOSE?=$/;"	m
VERBOSE	plf/Makefile	/^VERBOSE?=$/;"	m
VFILES	lf/Makefile	/^VFILES:=Preface.v\\$/;"	m
VFILES	plf/Makefile	/^VFILES:=Maps.v\\$/;"	m
VNUId	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="VNUId"><span class="id" type="constructor">VNUId<\/span><\/a>: ∀ <span class="id" type="var">Y<\/span>, <span class="id" type="var">X<\/span> ≠ <a class="idref" href="Equiv.html#Y"><span class="id" type="variable">Y<\/span><\/a> → <a class="idref" href="Equiv.html#var_not_used_in_aexp"><span class="id" type="inductive">var_not_used_in_aexp<\/span><\/a> <span class="id" type="var">X<\/span> (<span class="id" type="constructor">AId<\/span> <a class="idref" href="Equiv.html#Y"><span class="id" type="variable">Y<\/span><\/a>)<br\/>$/;"	a
VNUMinus	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="VNUMinus"><span class="id" type="constructor">VNUMinus<\/span><\/a>: ∀ <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
VNUMult	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="VNUMult"><span class="id" type="constructor">VNUMult<\/span><\/a>: ∀ <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
VNUNum	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="VNUNum"><span class="id" type="constructor">VNUNum<\/span><\/a>: ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Equiv.html#var_not_used_in_aexp"><span class="id" type="inductive">var_not_used_in_aexp<\/span><\/a> <span class="id" type="var">X<\/span> (<span class="id" type="constructor">ANum<\/span> <a class="idref" href="Equiv.html#n"><span class="id" type="variable">n<\/span><\/a>)<br\/>$/;"	a
VNUPlus	plf/Equiv.html	/^&nbsp;&nbsp;| <a name="VNUPlus"><span class="id" type="constructor">VNUPlus<\/span><\/a>: ∀ <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
VO	lf/Makefile	/^VO=vo$/;"	m
VO	plf/Makefile	/^VO=vo$/;"	m
VOFILES	lf/Makefile	/^VOFILES:=$(VFILES:.v=.$(VO))$/;"	m
VOFILES	plf/Makefile	/^VOFILES:=$(VFILES:.v=.$(VO))$/;"	m
V_cons	plf/Norm.html	/^| <a name="V_cons"><span class="id" type="constructor">V_cons<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">e<\/span>,<br\/>$/;"	a
V_nil	plf/Norm.html	/^| <a name="V_nil"><span class="id" type="constructor">V_nil<\/span><\/a> :<br\/>$/;"	a
W	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="W"><span class="id" type="definition">W<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> := <a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "W".<br\/>$/;"	a
WHILE_false	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="WHILE_false"><span class="id" type="lemma">WHILE_false<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
WHILE_true	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="WHILE_true"><span class="id" type="lemma">WHILE_true<\/span><\/a>: ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
WHILE_true_nonterm	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="WHILE_true_nonterm"><span class="id" type="lemma">WHILE_true_nonterm<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
White	lf/imp.mli	/^| White$/;"	C	type:chartype
X	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="X"><span class="id" type="definition">X<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> := <a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "X".<br\/>$/;"	a
XH	lf/imp.mli	/^| XH$/;"	C	type:positive
XI	lf/imp.mli	/^| XI of positive$/;"	C	type:positive
XO	lf/imp.mli	/^| XO of positive$/;"	C	type:positive
XtimesYinZ	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="XtimesYinZ"><span class="id" type="definition">XtimesYinZ<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
Y	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Y"><span class="id" type="definition">Y<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> := <a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "Y".<br\/>$/;"	a
Z	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="Z"><span class="id" type="definition">Z<\/span><\/a> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> := <a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "Z".<br\/>$/;"	a
_default	lf/common/jquery-ui/external/jquery/jquery.js	/^	fast: 200,$/;"	p	class:jQuery.fx.speeds
_default	lf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	p	class:jQuery.easing
_default	lf/common/jquery-ui/external/jquery/jquery.js	/^Tween.propHooks = {$/;"	p	class:Tween.propHooks
_default	plf/common/jquery-ui/external/jquery/jquery.js	/^	fast: 200,$/;"	p	class:jQuery.fx.speeds
_default	plf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	p	class:jQuery.easing
_default	plf/common/jquery-ui/external/jquery/jquery.js	/^Tween.propHooks = {$/;"	p	class:Tween.propHooks
_jQuery	lf/common/jquery-ui/external/jquery/jquery.js	/^var$/;"	v
_jQuery	plf/common/jquery-ui/external/jquery/jquery.js	/^var$/;"	v
_load	lf/common/jquery-ui/external/jquery/jquery.js	/^var _load = jQuery.fn.load;$/;"	v
_load	plf/common/jquery-ui/external/jquery/jquery.js	/^var _load = jQuery.fn.load;$/;"	v
abbreviation_E	plf/coqindex.html	/^<a name="abbreviation_E"><\/a><h2>E <\/h2>$/;"	a
abbreviation_M	plf/coqindex.html	/^<br\/><br\/><a name="abbreviation_M"><\/a><h2>M <\/h2>$/;"	a
abbreviation_S	plf/coqindex.html	/^<br\/><br\/><a name="abbreviation_S"><\/a><h2>S <\/h2>$/;"	a
abs_arrow	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="abs_arrow"><span class="id" type="lemma">abs_arrow<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
abs_arrow	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="abs_arrow"><span class="id" type="lemma">abs_arrow<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
abstraction	plf/StlcProp.v	/^        function abstraction binding a variable of the same name.$/;"	f
acceptData	lf/common/jquery-ui/external/jquery/jquery.js	/^var acceptData = function( elem ) {$/;"	f
acceptData	plf/common/jquery-ui/external/jquery/jquery.js	/^var acceptData = function( elem ) {$/;"	f
access	lf/common/jquery-ui/external/jquery/jquery.js	/^var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {$/;"	f
access	plf/common/jquery-ui/external/jquery/jquery.js	/^var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {$/;"	f
actualDisplay	lf/common/jquery-ui/external/jquery/jquery.js	/^function actualDisplay( name, doc ) {$/;"	f
actualDisplay	plf/common/jquery-ui/external/jquery/jquery.js	/^function actualDisplay( name, doc ) {$/;"	f
add	lf/common/jquery-ui/external/jquery/jquery.js	/^		self = {$/;"	m
add	lf/imp.ml	/^ (** val add : int -> int -> int **)let rec add = ( + )$/;"	v	Module:Coq__1
add	lf/imp.ml	/^let add = Coq__1.add$/;"	v
add	lf/imp.mli	/^val add : int -> int -> int$/;"	v
add	lf/imp1.ml	/^let rec add n m =$/;"	v
add	lf/imp1.mli	/^val add : nat -> nat -> nat$/;"	v
add	lf/imp2.ml	/^let rec add = ( + )$/;"	v
add	lf/imp2.mli	/^val add : int -> int -> int$/;"	v
add	plf/common/jquery-ui/external/jquery/jquery.js	/^		self = {$/;"	m
add1	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="add1"><span class="id" type="definition">add1<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>.<br\/>$/;"	a
addGetHookIf	lf/common/jquery-ui/external/jquery/jquery.js	/^function addGetHookIf( conditionFn, hookFn ) {$/;"	f
addGetHookIf	plf/common/jquery-ui/external/jquery/jquery.js	/^function addGetHookIf( conditionFn, hookFn ) {$/;"	f
addToPrefiltersOrTransports	lf/common/jquery-ui/external/jquery/jquery.js	/^function addToPrefiltersOrTransports( structure ) {$/;"	f
addToPrefiltersOrTransports	plf/common/jquery-ui/external/jquery/jquery.js	/^function addToPrefiltersOrTransports( structure ) {$/;"	f
adjustCSS	lf/common/jquery-ui/external/jquery/jquery.js	/^function adjustCSS( elem, prop, valueParts, tween ) {$/;"	f
adjustCSS	plf/common/jquery-ui/external/jquery/jquery.js	/^function adjustCSS( elem, prop, valueParts, tween ) {$/;"	f
aequiv	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="aequiv"><span class="id" type="definition">aequiv<\/span><\/a> (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
aequiv_example	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="aequiv_example"><span class="id" type="lemma">aequiv_example<\/span><\/a>:<br\/>$/;"	a
aeval	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="aeval"><span class="id" type="definition">aeval<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">a<\/span> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
aeval	lf/imp.ml	/^let rec aeval st = function$/;"	v
aeval	lf/imp.mli	/^val aeval : state -> aexp -> int$/;"	v
aeval	lf/imp1.ml	/^let rec aeval st = function$/;"	v
aeval	lf/imp1.mli	/^val aeval : state -> aexp -> nat$/;"	v
aeval	lf/imp2.ml	/^let rec aeval st = function$/;"	v
aeval	lf/imp2.mli	/^val aeval : state -> aexp -> int$/;"	v
aevalR_division	lf/Imp.html	/^<span class="id" type="keyword">Module<\/span> <a name="aevalR_division"><span class="id" type="module">aevalR_division<\/span><\/a>.<br\/>$/;"	a
aevalR_division.ADiv	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.ADiv"><span class="id" type="constructor">ADiv<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>. <span class="comment">(*&nbsp;&lt;---&nbsp;new&nbsp;*)<\/span><br\/>$/;"	a
aevalR_division.AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.AMinus"><span class="id" type="constructor">AMinus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_division.AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.AMult"><span class="id" type="constructor">AMult<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_division.ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.ANum"><span class="id" type="constructor">ANum<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_division.APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.APlus"><span class="id" type="constructor">APlus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_division.E_ADiv	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.E_ADiv"><span class="id" type="constructor">E_ADiv<\/span><\/a> :  ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> <span class="id" type="var">n<sub>3<\/sub><\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_division.E_AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.E_AMinus"><span class="id" type="constructor">E_AMinus<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_division.E_AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.E_AMult"><span class="id" type="constructor">E_AMult<\/span><\/a> :  ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_division.E_ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.E_ANum"><span class="id" type="constructor">E_ANum<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_division.E_APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_division.E_APlus"><span class="id" type="constructor">E_APlus<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_division.aevalR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aevalR_division.aevalR"><span class="id" type="inductive">aevalR<\/span><\/a> : <a class="idref" href="Imp.html#aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
aevalR_division.aexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aevalR_division.aexp"><span class="id" type="inductive">aexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
aevalR_extended	lf/Imp.html	/^<span class="id" type="keyword">Module<\/span> <a name="aevalR_extended"><span class="id" type="module">aevalR_extended<\/span><\/a>.<br\/>$/;"	a
aevalR_extended.AAny	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.AAny"><span class="id" type="constructor">AAny<\/span><\/a>  : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>                   <span class="comment">(*&nbsp;&lt;---&nbsp;NEW&nbsp;*)<\/span><br\/>$/;"	a
aevalR_extended.AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.AMinus"><span class="id" type="constructor">AMinus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_extended.AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.AMult"><span class="id" type="constructor">AMult<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>.<br\/>$/;"	a
aevalR_extended.ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.ANum"><span class="id" type="constructor">ANum<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_extended.APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.APlus"><span class="id" type="constructor">APlus<\/span><\/a> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a><br\/>$/;"	a
aevalR_extended.E_AMinus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.E_AMinus"><span class="id" type="constructor">E_AMinus<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_extended.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_extended.E_AMult	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.E_AMult"><span class="id" type="constructor">E_AMult<\/span><\/a> :  ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_extended.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_extended.E_ANum	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.E_ANum"><span class="id" type="constructor">E_ANum<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_extended.E_APlus	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.E_APlus"><span class="id" type="constructor">E_APlus<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>: <a class="idref" href="Imp.html#aevalR_extended.aexp"><span class="id" type="inductive">aexp<\/span><\/a>) (<span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_extended.E_Any	lf/Imp.html	/^&nbsp;&nbsp;| <a name="aevalR_extended.E_Any"><span class="id" type="constructor">E_Any<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
aevalR_extended.aevalR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aevalR_extended.aevalR"><span class="id" type="inductive">aevalR<\/span><\/a> : <a class="idref" href="Imp.html#aevalR_extended.aexp"><span class="id" type="inductive">aexp<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
aevalR_extended.aexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aevalR_extended.aexp"><span class="id" type="inductive">aexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
aeval_weakening	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="aeval_weakening"><span class="id" type="lemma">aeval_weakening<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">a<\/span> <span class="id" type="var">ni<\/span>,<br\/>$/;"	a
aexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aexp"><span class="id" type="inductive">aexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
aexp	lf/imp.ml	/^type aexp =$/;"	t
aexp	lf/imp.mli	/^type aexp =$/;"	t
aexp	lf/imp1.ml	/^type aexp =$/;"	t
aexp	lf/imp1.mli	/^type aexp =$/;"	t
aexp	lf/imp2.ml	/^type aexp =$/;"	t
aexp	lf/imp2.mli	/^type aexp =$/;"	t
aexp1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="aexp1"><span class="id" type="definition">aexp1<\/span><\/a> :<br\/>$/;"	a
afi_abs	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
afi_abs	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
afi_abs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_abs"><span class="id" type="constructor">afi_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
afi_app1	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_app1	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_app1	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_app1"><span class="id" type="constructor">afi_app1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_app2	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_app2	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_app2	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_app2"><span class="id" type="constructor">afi_app2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_fst	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_fst"><span class="id" type="constructor">afi_fst<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
afi_if<sub	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>0<\/sub>"><span class="id" type="constructor">afi_if<sub>0<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_if<sub	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>1<\/sub>"><span class="id" type="constructor">afi_if<sub>1<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_if<sub	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>2<\/sub>"><span class="id" type="constructor">afi_if<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>0<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_if<sub	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>1<\/sub>"><span class="id" type="constructor">afi_if<sub>1<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
afi_if<sub	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>2<\/sub>"><span class="id" type="constructor">afi_if<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
afi_if<sub	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_if<sub>3<\/sub>"><span class="id" type="constructor">afi_if<sub>3<\/sub><\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span>,<br\/>$/;"	a
afi_pair1	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_pair1"><span class="id" type="constructor">afi_pair1<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_pair2	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_pair2"><span class="id" type="constructor">afi_pair2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
afi_proj	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_proj"><span class="id" type="constructor">afi_proj<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">i<\/span>,<br\/>$/;"	a
afi_rhead	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_rhead"><span class="id" type="constructor">afi_rhead<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">tr<\/span>,<br\/>$/;"	a
afi_rtail	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_rtail"><span class="id" type="constructor">afi_rtail<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">tr<\/span>,<br\/>$/;"	a
afi_snd	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_snd"><span class="id" type="constructor">afi_snd<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
afi_var	plf/Norm.html	/^&nbsp;&nbsp;| <a name="afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
afi_var	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
afi_var	plf/Sub.html	/^&nbsp;&nbsp;| <a name="afi_var"><span class="id" type="constructor">afi_var<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
ajaxConvert	lf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxConvert( s, response, jqXHR, isSuccess ) {$/;"	f
ajaxConvert	plf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxConvert( s, response, jqXHR, isSuccess ) {$/;"	f
ajaxExtend	lf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxExtend( target, src ) {$/;"	f
ajaxExtend	plf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxExtend( target, src ) {$/;"	f
ajaxHandleResponses	lf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxHandleResponses( s, jqXHR, responses ) {$/;"	f
ajaxHandleResponses	plf/common/jquery-ui/external/jquery/jquery.js	/^function ajaxHandleResponses( s, jqXHR, responses ) {$/;"	f
always_loop_hoare	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="always_loop_hoare"><span class="id" type="lemma">always_loop_hoare<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>,<br\/>$/;"	a
and	plf/Equiv.v	/^    input and produces some variant of the program as output.$/;"	p
and_assoc	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="and_assoc"><span class="id" type="lemma">and_assoc<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
and_commut	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="and_commut"><span class="id" type="lemma">and_commut<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
and_example	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="and_example"><span class="id" type="definition">and_example<\/span><\/a> : 3 + 4 = 7 ∧ 2 * 2 = 4.<br\/>$/;"	a
and_example'	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="and_example'"><span class="id" type="definition">and_example'<\/span><\/a> : 3 + 4 = 7 ∧ 2 * 2 = 4.<br\/>$/;"	a
and_example2	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="and_example2"><span class="id" type="lemma">and_example2<\/span><\/a> :<br\/>$/;"	a
and_example2'	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="and_example2'"><span class="id" type="lemma">and_example2'<\/span><\/a> :<br\/>$/;"	a
and_example2''	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="and_example2''"><span class="id" type="lemma">and_example2''<\/span><\/a> :<br\/>$/;"	a
and_example3	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="and_example3"><span class="id" type="lemma">and_example3<\/span><\/a> :<br\/>$/;"	a
and_exercise	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="and_exercise"><span class="id" type="definition">and_exercise<\/span><\/a> :<br\/>$/;"	a
and_intro	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="and_intro"><span class="id" type="lemma">and_intro<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">B<\/span> : <span class="id" type="keyword">Prop<\/span>, <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Logic.html#B"><span class="id" type="variable">B<\/span><\/a> → <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> ∧ <a class="idref" href="Logic.html#B"><span class="id" type="variable">B<\/span><\/a>.<br\/>$/;"	a
andb	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="andb"><span class="id" type="definition">andb<\/span><\/a> (<span class="id" type="var">b<sub>1<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">b<sub>2<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
andb3	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="andb3"><span class="id" type="definition">andb3<\/span><\/a> (<span class="id" type="var">b<sub>1<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">b<sub>2<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">b<sub>3<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
andb3_exchange	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb3_exchange"><span class="id" type="lemma">andb3_exchange<\/span><\/a> :<br\/>$/;"	a
andb_commutative	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb_commutative"><span class="id" type="lemma">andb_commutative<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>, <a class="idref" href="Basics.html#andb"><span class="id" type="definition">andb<\/span><\/a> <a class="idref" href="Basics.html#b"><span class="id" type="variable">b<\/span><\/a> <a class="idref" href="Basics.html#c"><span class="id" type="variable">c<\/span><\/a> = <a class="idref" href="Basics.html#andb"><span class="id" type="definition">andb<\/span><\/a> <a class="idref" href="Basics.html#c"><span class="id" type="variable">c<\/span><\/a> <a class="idref" href="Basics.html#b"><span class="id" type="variable">b<\/span><\/a>.<br\/>$/;"	a
andb_commutative'	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb_commutative'"><span class="id" type="lemma">andb_commutative'<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>, <a class="idref" href="Basics.html#andb"><span class="id" type="definition">andb<\/span><\/a> <a class="idref" href="Basics.html#b"><span class="id" type="variable">b<\/span><\/a> <a class="idref" href="Basics.html#c"><span class="id" type="variable">c<\/span><\/a> = <a class="idref" href="Basics.html#andb"><span class="id" type="definition">andb<\/span><\/a> <a class="idref" href="Basics.html#c"><span class="id" type="variable">c<\/span><\/a> <a class="idref" href="Basics.html#b"><span class="id" type="variable">b<\/span><\/a>.<br\/>$/;"	a
andb_commutative''	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb_commutative''"><span class="id" type="lemma">andb_commutative''<\/span><\/a> :<br\/>$/;"	a
andb_eq_orb	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb_eq_orb"><span class="id" type="lemma">andb_eq_orb<\/span><\/a> :<br\/>$/;"	a
andb_true_elim2	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="andb_true_elim2"><span class="id" type="lemma">andb_true_elim2<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
andb_true_iff	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="andb_true_iff"><span class="id" type="lemma">andb_true_iff<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
antisymmetric	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="antisymmetric"><span class="id" type="definition">antisymmetric<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
app	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="app"><span class="id" type="definition">app<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>)<br\/>$/;"	a
app	lf/imp.mli	/^val app : 'a1 list -> 'a1 list -> 'a1 list$/;"	v
app_assoc	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="app_assoc"><span class="id" type="lemma">app_assoc<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">l<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#A"><span class="id" type="variable">A<\/span><\/a>),<br\/>$/;"	a
app_length	lf/Poly.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="app_length"><span class="id" type="lemma">app_length<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
app_nil_r	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="app_nil_r"><span class="id" type="lemma">app_nil_r<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>), ∀ <span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>,<br\/>$/;"	a
appears_free_in	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
appears_free_in	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
appears_free_in	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="appears_free_in"><span class="id" type="inductive">appears_free_in<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
append	lf/imp.mli	/^val append : char list -> char list -> char list$/;"	v
application	lf/Maps.v	/^    function application! *)$/;"	f
application	lf/Tactics.html	/^    function application (that, itself, cannot be simplified, even$/;"	f
application	lf/Tactics.v	/^    function application (that, itself, cannot be simplified, even$/;"	f
application	plf/Maps.v	/^    function application! *)$/;"	f
application	plf/References.v	/^    function application, in itself, has no side effects.  The other$/;"	f
application	plf/Stlc.v	/^    function application, where we will need to substitute the$/;"	f
applied	lf/Imp.v	/^    function applied to the [loop] program above would never$/;"	f
applied	plf/Imp.v	/^    function applied to the [loop] program above would never$/;"	f
apply_empty	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="apply_empty"><span class="id" type="lemma">apply_empty<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">x<\/span>, @<a class="idref" href="Maps.html#empty"><span class="id" type="definition">empty<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a> <a class="idref" href="Maps.html#x"><span class="id" type="variable">x<\/span><\/a> = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#None"><span class="id" type="constructor">None<\/span><\/a>.<br\/>$/;"	a
apply_iff_example	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="apply_iff_example"><span class="id" type="lemma">apply_iff_example<\/span><\/a> :<br\/>$/;"	a
arguments	plf/Equiv.v	/^    function arguments are evaluated is unspecified.  The program$/;"	f
as	plf/Hoare.v	/^    function as placeholders for expressions that will be$/;"	f
ascii	lf/imp1.mli	/^type ascii =$/;"	t
ascii	lf/imp2.mli	/^type ascii =$/;"	t
ascii_dec	lf/imp1.mli	/^val ascii_dec : ascii -> ascii -> sumbool$/;"	v
ascii_dec	lf/imp2.mli	/^val ascii_dec : ascii -> ascii -> sumbool$/;"	v
assert_implies	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="assert_implies"><span class="id" type="definition">assert_implies<\/span><\/a> (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
assign	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="assign"><span class="id" type="definition">assign<\/span><\/a> (<span class="id" type="var">pe_st<\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">ids<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span>) : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
assign_aequiv	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="assign_aequiv"><span class="id" type="lemma">assign_aequiv<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> <span class="id" type="var">e<\/span>,<br\/>$/;"	a
assign_removes	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="assign_removes"><span class="id" type="lemma">assign_removes<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">ids<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
assigned	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="assigned"><span class="id" type="definition">assigned<\/span><\/a> (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">ids<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span>) (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>) : <span class="id" type="definition">state<\/span> :=<br\/>$/;"	a
assn_sub	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="assn_sub"><span class="id" type="definition">assn_sub<\/span><\/a> <span class="id" type="var">X<\/span> <span class="id" type="var">a<\/span> <span class="id" type="var">P<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
assn_sub_example	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="assn_sub_example"><span class="id" type="definition">assn_sub_example<\/span><\/a> :<br\/>$/;"	a
astep	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="astep"><span class="id" type="inductive">astep<\/span><\/a> : <span class="id" type="definition">state<\/span> → <span class="id" type="inductive">aexp<\/span> → <span class="id" type="inductive">aexp<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
at	lf/Lists.v	/^    function at level 50,$/;"	f
atrans_sound	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="atrans_sound"><span class="id" type="definition">atrans_sound<\/span><\/a> (<span class="id" type="var">atrans<\/span> : <span class="id" type="inductive">aexp<\/span> → <span class="id" type="inductive">aexp<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
augmentWidthOrHeight	lf/common/jquery-ui/external/jquery/jquery.js	/^function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {$/;"	f
augmentWidthOrHeight	plf/common/jquery-ui/external/jquery/jquery.js	/^function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {$/;"	f
auto_example_1	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_1"><span class="id" type="definition">auto_example_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span>: <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
auto_example_1'	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_1'"><span class="id" type="definition">auto_example_1'<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span>: <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
auto_example_2	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_2"><span class="id" type="definition">auto_example_2<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">U<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
auto_example_3	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_3"><span class="id" type="definition">auto_example_3<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">U<\/span>: <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
auto_example_4	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_4"><span class="id" type="definition">auto_example_4<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
auto_example_6	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_6"><span class="id" type="definition">auto_example_6<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
auto_example_6'	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_6'"><span class="id" type="definition">auto_example_6'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
auto_example_7	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_7"><span class="id" type="definition">auto_example_7<\/span><\/a>: ∀ <span class="id" type="var">x<\/span>, (<a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a> ≤ 42 ∧ 42 ≤ <a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a>) → <a class="idref" href="Auto.html#is_fortytwo"><span class="id" type="definition">is_fortytwo<\/span><\/a> <a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/>$/;"	a
auto_example_7'	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_7'"><span class="id" type="definition">auto_example_7'<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>, (<a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a> ≤ 42 ∧ 42 ≤ <a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a>) → <a class="idref" href="Auto.html#is_fortytwo"><span class="id" type="definition">is_fortytwo<\/span><\/a> <a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/>$/;"	a
auto_example_8	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="auto_example_8"><span class="id" type="definition">auto_example_8<\/span><\/a> : ∃ <span class="id" type="var">s'<\/span>,<br\/>$/;"	a
av_num	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="av_num"><span class="id" type="constructor">av_num<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#aval"><span class="id" type="inductive">aval<\/span><\/a> (<span class="id" type="constructor">ANum<\/span> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/>$/;"	a
aval	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="aval"><span class="id" type="inductive">aval<\/span><\/a> : <span class="id" type="inductive">aexp<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
axiom_E	plf/coqindex.html	/^<a name="axiom_E"><\/a><h2>E <\/h2>$/;"	a
axiom_F	lf/coqindex.html	/^<a name="axiom_F"><\/a><h2>F <\/h2>$/;"	a
axiom_G	plf/coqindex.html	/^<br\/><br\/><a name="axiom_G"><\/a><h2>G <\/h2>$/;"	a
axiom_I	plf/coqindex.html	/^<br\/><br\/><a name="axiom_I"><\/a><h2>I <\/h2>$/;"	a
axiom_L	plf/coqindex.html	/^<br\/><br\/><a name="axiom_L"><\/a><h2>L <\/h2>$/;"	a
axiom_P	plf/coqindex.html	/^<br\/><br\/><a name="axiom_P"><\/a><h2>P <\/h2>$/;"	a
axiom_S	plf/coqindex.html	/^<br\/><br\/><a name="axiom_S"><\/a><h2>S <\/h2>$/;"	a
axiom_T	plf/coqindex.html	/^<br\/><br\/><a name="axiom_T"><\/a><h2>T <\/h2>$/;"	a
bar	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="bar"><span class="id" type="definition">bar<\/span><\/a> <span class="id" type="var">x<\/span> :=<br\/>$/;"	a
bassn	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="bassn"><span class="id" type="definition">bassn<\/span><\/a> <span class="id" type="var">b<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
bassn_eval_false	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="bassn_eval_false"><span class="id" type="lemma">bassn_eval_false<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">st<\/span>, ¬ <a class="idref" href="Hoare.html#bassn"><span class="id" type="definition">bassn<\/span><\/a> <a class="idref" href="HoareAsLogic.html#b"><span class="id" type="variable">b<\/span><\/a> <a class="idref" href="HoareAsLogic.html#st"><span class="id" type="variable">st<\/span><\/a> → <span class="id" type="definition">beval<\/span> <a class="idref" href="HoareAsLogic.html#st"><span class="id" type="variable">st<\/span><\/a> <a class="idref" href="HoareAsLogic.html#b"><span class="id" type="variable">b<\/span><\/a> = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
baz	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="baz"><span class="id" type="inductive">baz<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
being	plf/Stlc.v	/^    function being invoked on some argument, which clearly still has$/;"	f
bempty	lf/IndPrinciples.html	/^&nbsp;| <a name="bempty"><span class="id" type="constructor">bempty<\/span><\/a> : <a class="idref" href="IndPrinciples.html#byntree"><span class="id" type="inductive">byntree<\/span><\/a><br\/>$/;"	a
beq_id	lf/Lists.html	/^<span class="id" type="keyword">Definition<\/span> <a name="beq_id"><span class="id" type="definition">beq_id<\/span><\/a> (<span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span> : <a class="idref" href="Lists.html#id"><span class="id" type="inductive">id<\/span><\/a>) :=<br\/>$/;"	a
beq_id	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="beq_id"><span class="id" type="definition">beq_id<\/span><\/a> <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> :=<br\/>$/;"	a
beq_id	lf/imp.ml	/^let beq_id x y =$/;"	v
beq_id	lf/imp.mli	/^val beq_id : id -> id -> bool$/;"	v
beq_id	lf/imp1.mli	/^val beq_id : id -> id -> bool$/;"	v
beq_id	lf/imp2.mli	/^val beq_id : id -> id -> bool$/;"	v
beq_idP	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="beq_idP"><span class="id" type="lemma">beq_idP<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span>, <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Bool.Bool.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> (<a class="idref" href="Maps.html#x"><span class="id" type="variable">x<\/span><\/a> = <a class="idref" href="Maps.html#y"><span class="id" type="variable">y<\/span><\/a>) (<a class="idref" href="Maps.html#beq_id"><span class="id" type="definition">beq_id<\/span><\/a> <a class="idref" href="Maps.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Maps.html#y"><span class="id" type="variable">y<\/span><\/a>).<br\/>$/;"	a
beq_id_false_iff	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_id_false_iff"><span class="id" type="lemma">beq_id_false_iff<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a>,<br\/>$/;"	a
beq_id_refl	lf/Lists.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_id_refl"><span class="id" type="lemma">beq_id_refl<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>, <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> = <a class="idref" href="Lists.html#beq_id"><span class="id" type="definition">beq_id<\/span><\/a> <a class="idref" href="Lists.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Lists.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/>$/;"	a
beq_id_refl	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_id_refl"><span class="id" type="lemma">beq_id_refl<\/span><\/a> : ∀ <span class="id" type="var">id<\/span>, <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#true"><span class="id" type="constructor">true<\/span><\/a> = <a class="idref" href="Maps.html#beq_id"><span class="id" type="definition">beq_id<\/span><\/a> <a class="idref" href="Maps.html#id"><span class="id" type="variable">id<\/span><\/a> <a class="idref" href="Maps.html#id"><span class="id" type="variable">id<\/span><\/a>.<br\/>$/;"	a
beq_id_true	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_id_true"><span class="id" type="lemma">beq_id_true<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span>,<br\/>$/;"	a
beq_id_true_iff	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_id_true_iff"><span class="id" type="lemma">beq_id_true_iff<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a>,<br\/>$/;"	a
beq_list	lf/Logic.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="beq_list"><span class="id" type="definition">beq_list<\/span><\/a> {<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">beq<\/span> : <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>)<br\/>$/;"	a
beq_list_true_iff	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="beq_list_true_iff"><span class="id" type="lemma">beq_list_true_iff<\/span><\/a> :<br\/>$/;"	a
beq_nat	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="beq_nat"><span class="id" type="definition">beq_nat<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
beq_natP	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="beq_natP"><span class="id" type="lemma">beq_natP<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> (<a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>) (<a class="idref" href="Basics.html#beq_nat"><span class="id" type="definition">beq_nat<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>).<br\/>$/;"	a
beq_natP_practice	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_natP_practice"><span class="id" type="lemma">beq_natP_practice<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
beq_nat_0_l	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_0_l"><span class="id" type="lemma">beq_nat_0_l<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
beq_nat_false_iff	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_false_iff"><span class="id" type="lemma">beq_nat_false_iff<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
beq_nat_sym	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_sym"><span class="id" type="lemma">beq_nat_sym<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
beq_nat_trans	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_trans"><span class="id" type="lemma">beq_nat_trans<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
beq_nat_true	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_true"><span class="id" type="lemma">beq_nat_true<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
beq_nat_true_iff	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="beq_nat_true_iff"><span class="id" type="lemma">beq_nat_true_iff<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
bequiv	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="bequiv"><span class="id" type="definition">bequiv<\/span><\/a> (<span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
bequiv_example	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="bequiv_example"><span class="id" type="lemma">bequiv_example<\/span><\/a>:<br\/>$/;"	a
beval	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="beval"><span class="id" type="definition">beval<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">b<\/span> : <a class="idref" href="Imp.html#bexp"><span class="id" type="inductive">bexp<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
beval	lf/imp.mli	/^val beval : state -> bexp -> bool$/;"	v
beval	lf/imp1.mli	/^val beval : state -> bexp -> bool$/;"	v
beval	lf/imp2.mli	/^val beval : state -> bexp -> bool$/;"	v
bexp	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="bexp"><span class="id" type="inductive">bexp<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
bexp	lf/imp.ml	/^type bexp =$/;"	t
bexp	lf/imp.mli	/^type bexp =$/;"	t
bexp	lf/imp1.ml	/^type bexp =$/;"	t
bexp	lf/imp1.mli	/^type bexp =$/;"	t
bexp	lf/imp2.ml	/^type bexp =$/;"	t
bexp	lf/imp2.mli	/^type bexp =$/;"	t
bexp1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="bexp1"><span class="id" type="definition">bexp1<\/span><\/a> :<br\/>$/;"	a
bexp_eval_false	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="bexp_eval_false"><span class="id" type="lemma">bexp_eval_false<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
bexp_eval_true	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="bexp_eval_true"><span class="id" type="lemma">bexp_eval_true<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
bignumber	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="bignumber"><span class="id" type="definition">bignumber<\/span><\/a> := 1000.<br\/><hr class='doublespaceincode'\/>$/;"	a
bignumber	lf/imp.mli	/^val bignumber : int$/;"	v
black	lf/Basics.html	/^&nbsp;&nbsp;| <a name="black"><span class="id" type="constructor">black<\/span><\/a> : <a class="idref" href="Basics.html#color"><span class="id" type="inductive">color<\/span><\/a><br\/>$/;"	a
bleaf	lf/IndPrinciples.html	/^&nbsp;| <a name="bleaf"><span class="id" type="constructor">bleaf<\/span><\/a>  : <a class="idref" href="IndPrinciples.html#yesno"><span class="id" type="inductive">yesno<\/span><\/a> → <a class="idref" href="IndPrinciples.html#byntree"><span class="id" type="inductive">byntree<\/span><\/a><br\/>$/;"	a
block	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="block"><span class="id" type="inductive">block<\/span><\/a> (<span class="id" type="var">Label<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
blt_nat	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="blt_nat"><span class="id" type="definition">blt_nat<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
blue	lf/Basics.html	/^&nbsp;&nbsp;| <a name="blue"><span class="id" type="constructor">blue<\/span><\/a> : <a class="idref" href="Basics.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
blue	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="blue"><span class="id" type="constructor">blue<\/span><\/a> : <a class="idref" href="IndPrinciples.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a>.<br\/>$/;"	a
body	plf/PE.html	/^&nbsp;&nbsp;| <a name="body"><span class="id" type="constructor">body<\/span><\/a>  : <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a><br\/>$/;"	a
bool	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="bool"><span class="id" type="inductive">bool<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
bool	lf/imp1.ml	/^type bool =$/;"	t
bool	lf/imp1.mli	/^type bool =$/;"	t
bool_canonical	plf/Types.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="bool_canonical"><span class="id" type="lemma">bool_canonical<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
bool_cons	lf/Poly.html	/^&nbsp;&nbsp;| <a name="bool_cons"><span class="id" type="constructor">bool_cons<\/span><\/a> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> → <a class="idref" href="Poly.html#boollist"><span class="id" type="inductive">boollist<\/span><\/a> → <a class="idref" href="Poly.html#boollist"><span class="id" type="inductive">boollist<\/span><\/a>.<br\/>$/;"	a
bool_dec	lf/imp1.mli	/^val bool_dec : bool -> bool -> sumbool$/;"	v
bool_dec	lf/imp2.mli	/^val bool_dec : bool -> bool -> sumbool$/;"	v
bool_fn_applied_thrice	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="bool_fn_applied_thrice"><span class="id" type="lemma">bool_fn_applied_thrice<\/span><\/a> :<br\/>$/;"	a
bool_nil	lf/Poly.html	/^&nbsp;&nbsp;| <a name="bool_nil"><span class="id" type="constructor">bool_nil<\/span><\/a> : <a class="idref" href="Poly.html#boollist"><span class="id" type="inductive">boollist<\/span><\/a><br\/>$/;"	a
boollist	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="boollist"><span class="id" type="inductive">boollist<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
boxer	plf/LibTactics.html	/^&nbsp;&nbsp;| <a name="boxer"><span class="id" type="constructor">boxer<\/span><\/a> : ∀ (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>), <a class="idref" href="LibTactics.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>.<br\/>$/;"	a
bstep	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="bstep"><span class="id" type="inductive">bstep<\/span><\/a> : <span class="id" type="definition">state<\/span> → <span class="id" type="inductive">bexp<\/span> → <span class="id" type="inductive">bexp<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
btrans_sound	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="btrans_sound"><span class="id" type="definition">btrans_sound<\/span><\/a> (<span class="id" type="var">btrans<\/span> : <span class="id" type="inductive">bexp<\/span> → <span class="id" type="inductive">bexp<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
buildFragment	lf/common/jquery-ui/external/jquery/jquery.js	/^function buildFragment( elems, context, scripts, selection, ignored ) {$/;"	f
buildFragment	plf/common/jquery-ui/external/jquery/jquery.js	/^function buildFragment( elems, context, scripts, selection, ignored ) {$/;"	f
buildParams	lf/common/jquery-ui/external/jquery/jquery.js	/^function buildParams( prefix, obj, traditional, add ) {$/;"	f
buildParams	plf/common/jquery-ui/external/jquery/jquery.js	/^function buildParams( prefix, obj, traditional, add ) {$/;"	f
bv_false	plf/Types.html	/^&nbsp;&nbsp;| <a name="bv_false"><span class="id" type="constructor">bv_false<\/span><\/a> : <a class="idref" href="Types.html#bvalue"><span class="id" type="inductive">bvalue<\/span><\/a> <a class="idref" href="Types.html#tfalse"><span class="id" type="constructor">tfalse<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
bv_true	plf/Types.html	/^&nbsp;&nbsp;| <a name="bv_true"><span class="id" type="constructor">bv_true<\/span><\/a> : <a class="idref" href="Types.html#bvalue"><span class="id" type="inductive">bvalue<\/span><\/a> <a class="idref" href="Types.html#ttrue"><span class="id" type="constructor">ttrue<\/span><\/a><br\/>$/;"	a
bvalue	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="bvalue"><span class="id" type="inductive">bvalue<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
byntree	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="byntree"><span class="id" type="inductive">byntree<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
c3_c4_different	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="c3_c4_different"><span class="id" type="lemma">c3_c4_different<\/span><\/a> : ¬ <a class="idref" href="Equiv.html#capprox"><span class="id" type="definition">capprox<\/span><\/a> <a class="idref" href="Equiv.html#c<sub>3<\/sub>"><span class="id" type="axiom">c<sub>3<\/sub><\/span><\/a> <a class="idref" href="Equiv.html#c<sub>4<\/sub>"><span class="id" type="axiom">c<sub>4<\/sub><\/span><\/a> ∧ ¬ <a class="idref" href="Equiv.html#capprox"><span class="id" type="definition">capprox<\/span><\/a> <a class="idref" href="Equiv.html#c<sub>4<\/sub>"><span class="id" type="axiom">c<sub>4<\/sub><\/span><\/a> <a class="idref" href="Equiv.html#c<sub>3<\/sub>"><span class="id" type="axiom">c<sub>3<\/sub><\/span><\/a>.<br\/>$/;"	a
c<sub	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="c<sub>3<\/sub>"><span class="id" type="definition">c<sub>3<\/sub><\/span><\/a> : <span class="id" type="inductive">com<\/span> <span class="comment">(*&nbsp;REPLACE&nbsp;THIS&nbsp;LINE&nbsp;WITH&nbsp;":=&nbsp;_your_definition_&nbsp;."&nbsp;*)<\/span>. <span class="id" type="var">Admitted<\/span>.<br\/>$/;"	a
c<sub	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="c<sub>4<\/sub>"><span class="id" type="definition">c<sub>4<\/sub><\/span><\/a> : <span class="id" type="inductive">com<\/span> <span class="comment">(*&nbsp;REPLACE&nbsp;THIS&nbsp;LINE&nbsp;WITH&nbsp;":=&nbsp;_your_definition_&nbsp;."&nbsp;*)<\/span>. <span class="id" type="var">Admitted<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
canonical_forms_of_Bool	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="canonical_forms_of_Bool"><span class="id" type="lemma">canonical_forms_of_Bool<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">s<\/span>,<br\/>$/;"	a
canonical_forms_of_arrow_types	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="canonical_forms_of_arrow_types"><span class="id" type="lemma">canonical_forms_of_arrow_types<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">s<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
canonical_forms_of_arrow_types	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="canonical_forms_of_arrow_types"><span class="id" type="lemma">canonical_forms_of_arrow_types<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">s<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
capprox	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="capprox"><span class="id" type="definition">capprox<\/span><\/a> (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <span class="id" type="inductive">com<\/span>) : <span class="id" type="keyword">Prop<\/span> := ∀ (<span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> : <span class="id" type="definition">state<\/span>),<br\/>$/;"	a
cequiv	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="cequiv"><span class="id" type="definition">cequiv<\/span><\/a> (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <span class="id" type="inductive">com<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ceval	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ceval"><span class="id" type="inductive">ceval<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ceval'_example1	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="ceval'_example1"><span class="id" type="definition">ceval'_example1<\/span><\/a>:<br\/>$/;"	a
ceval__ceval_step	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval__ceval_step"><span class="id" type="lemma">ceval__ceval_step<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
ceval_and_ceval_step_coincide	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_and_ceval_step_coincide"><span class="id" type="lemma">ceval_and_ceval_step_coincide<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
ceval_deterministic	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic"><span class="id" type="lemma">ceval_deterministic<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic'	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic'	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic'"><span class="id" type="lemma">ceval_deterministic'<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic''	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic''"><span class="id" type="lemma">ceval_deterministic''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic'''	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic'''"><span class="id" type="lemma">ceval_deterministic'''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic''''	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic''''"><span class="id" type="lemma">ceval_deterministic''''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic'''''	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic'''''"><span class="id" type="lemma">ceval_deterministic'''''<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_deterministic'_alt	lf/Auto.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_deterministic'_alt"><span class="id" type="lemma">ceval_deterministic'_alt<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_example1	lf/Auto.html	/^<span class="id" type="keyword">Example<\/span> <a name="ceval_example1"><span class="id" type="definition">ceval_example1<\/span><\/a>:<br\/>$/;"	a
ceval_example1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="ceval_example1"><span class="id" type="definition">ceval_example1<\/span><\/a>:<br\/>$/;"	a
ceval_example2	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="ceval_example2"><span class="id" type="definition">ceval_example2<\/span><\/a>:<br\/>$/;"	a
ceval_extensionality	plf/PE.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ceval_extensionality"><span class="id" type="lemma">ceval_extensionality<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st<sub>1<\/sub><\/span> <span class="id" type="var">st<sub>2<\/sub><\/span>,<br\/>$/;"	a
ceval_fun_no_while	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="ceval_fun_no_while"><span class="id" type="definition">ceval_fun_no_while<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>)<br\/>$/;"	a
ceval_step	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="ceval_step"><span class="id" type="definition">ceval_step<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">i<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
ceval_step	lf/imp.ml	/^let rec ceval_step st c i =$/;"	v
ceval_step	lf/imp.mli	/^val ceval_step : state -> com -> int -> state option$/;"	v
ceval_step	lf/imp1.mli	/^val ceval_step : state -> com -> nat -> state option$/;"	v
ceval_step	lf/imp2.ml	/^let rec ceval_step st c i =$/;"	v
ceval_step	lf/imp2.mli	/^val ceval_step : state -> com -> int -> state option$/;"	v
ceval_step1	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="ceval_step1"><span class="id" type="definition">ceval_step1<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> :=<br\/>$/;"	a
ceval_step2	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="ceval_step2"><span class="id" type="definition">ceval_step2<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">i<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> :=<br\/>$/;"	a
ceval_step3	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="ceval_step3"><span class="id" type="definition">ceval_step3<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) (<span class="id" type="var">i<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
ceval_step__ceval	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_step__ceval"><span class="id" type="lemma">ceval_step__ceval<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
ceval_step_more	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ceval_step_more"><span class="id" type="lemma">ceval_step_more<\/span><\/a>: ∀ <span class="id" type="var">i<sub>1<\/sub><\/span> <span class="id" type="var">i<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
chartype	lf/ImpParser.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="chartype"><span class="id" type="inductive">chartype<\/span><\/a> := <a name="white"><span class="id" type="constructor">white<\/span><\/a> | <a name="alpha"><span class="id" type="constructor">alpha<\/span><\/a> | <a name="digit"><span class="id" type="constructor">digit<\/span><\/a> | <a name="other"><span class="id" type="constructor">other<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
chartype	lf/imp.mli	/^type chartype =$/;"	t
classifyChar	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="classifyChar"><span class="id" type="definition">classifyChar<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="ImpParser.html#chartype"><span class="id" type="inductive">chartype<\/span><\/a> :=<br\/>$/;"	a
classifyChar	lf/imp.mli	/^val classifyChar : char -> chartype$/;"	v
cloneCopyEvent	lf/common/jquery-ui/external/jquery/jquery.js	/^function cloneCopyEvent( src, dest ) {$/;"	f
cloneCopyEvent	plf/common/jquery-ui/external/jquery/jquery.js	/^function cloneCopyEvent( src, dest ) {$/;"	f
clos_refl_trans	lf/Rel.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="clos_refl_trans"><span class="id" type="inductive">clos_refl_trans<\/span><\/a> {<span class="id" type="var">A<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#A"><span class="id" type="variable">A<\/span><\/a>) : <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <span class="id" type="var">A<\/span> :=<br\/>$/;"	a
clos_refl_trans_1n	lf/Rel.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="clos_refl_trans_1n"><span class="id" type="inductive">clos_refl_trans_1n<\/span><\/a> {<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
closed	plf/Norm.html	/^<span class="id" type="keyword">Definition<\/span> <a name="closed"><span class="id" type="definition">closed<\/span><\/a> (<span class="id" type="var">t<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) :=<br\/>$/;"	a
closed_env	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="closed_env"><span class="id" type="definition">closed_env<\/span><\/a> (<span class="id" type="var">env<\/span>:<a class="idref" href="Norm.html#env"><span class="id" type="definition">env<\/span><\/a>) {<span class="id" type="keyword">struct<\/span> <span class="id" type="var">env<\/span>} :=<br\/>$/;"	a
cmin	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="cmin"><span class="id" type="definition">cmin<\/span><\/a> : <span class="id" type="inductive">com<\/span><br\/>$/;"	a
cmin_minimal	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="cmin_minimal"><span class="id" type="lemma">cmin_minimal<\/span><\/a> : ∀ <span class="id" type="var">c<\/span>, <a class="idref" href="Equiv.html#capprox"><span class="id" type="definition">capprox<\/span><\/a> <a class="idref" href="Equiv.html#cmin"><span class="id" type="axiom">cmin<\/span><\/a> <a class="idref" href="Equiv.html#c"><span class="id" type="variable">c<\/span><\/a>.<br\/>$/;"	a
color	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="color"><span class="id" type="inductive">color<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
com	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="com"><span class="id" type="inductive">com<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
com	lf/imp.ml	/^type com =$/;"	t
com	lf/imp.mli	/^type com =$/;"	t
com	lf/imp1.mli	/^type com =$/;"	t
com	lf/imp2.ml	/^type com =$/;"	t
com	lf/imp2.mli	/^type com =$/;"	t
combine	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="combine"><span class="id" type="definition">combine<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">lx<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">ly<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>)<br\/>$/;"	a
combine_odd_even	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="combine_odd_even"><span class="id" type="definition">combine_odd_even<\/span><\/a> (<span class="id" type="var">Podd<\/span> <span class="id" type="var">Peven<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span><br\/>$/;"	a
combine_odd_even_elim_even	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="combine_odd_even_elim_even"><span class="id" type="lemma">combine_odd_even_elim_even<\/span><\/a> :<br\/>$/;"	a
combine_odd_even_elim_odd	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="combine_odd_even_elim_odd"><span class="id" type="lemma">combine_odd_even_elim_odd<\/span><\/a> :<br\/>$/;"	a
combine_odd_even_intro	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="combine_odd_even_intro"><span class="id" type="lemma">combine_odd_even_intro<\/span><\/a> :<br\/>$/;"	a
combine_split	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="combine_split"><span class="id" type="lemma">combine_split<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> (<a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a> * <a class="idref" href="Tactics.html#Y"><span class="id" type="variable">Y<\/span><\/a>)) <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span>,<br\/>$/;"	a
compiler_is_correct	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="compiler_is_correct"><span class="id" type="lemma">compiler_is_correct<\/span><\/a> : <a class="idref" href="Smallstep.html#compiler_is_correct_statement"><span class="id" type="axiom">compiler_is_correct_statement<\/span><\/a>.<br\/>$/;"	a
compiler_is_correct_statement	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="compiler_is_correct_statement"><span class="id" type="definition">compiler_is_correct_statement<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> <br\/>$/;"	a
completed	lf/common/jquery-ui/external/jquery/jquery.js	/^function completed() {$/;"	f
completed	plf/common/jquery-ui/external/jquery/jquery.js	/^function completed() {$/;"	f
computeStyleTests	lf/common/jquery-ui/external/jquery/jquery.js	/^	function computeStyleTests() {$/;"	f
computeStyleTests	plf/common/jquery-ui/external/jquery/jquery.js	/^	function computeStyleTests() {$/;"	f
congruence_demo_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="congruence_demo_1"><span class="id" type="lemma">congruence_demo_1<\/span><\/a> :<br\/>$/;"	a
congruence_demo_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="congruence_demo_2"><span class="id" type="lemma">congruence_demo_2<\/span><\/a> :<br\/>$/;"	a
congruence_demo_3	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="congruence_demo_3"><span class="id" type="lemma">congruence_demo_3<\/span><\/a> :<br\/>$/;"	a
congruence_demo_4	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="congruence_demo_4"><span class="id" type="lemma">congruence_demo_4<\/span><\/a> : ∀ (<span class="id" type="var">f<\/span> <span class="id" type="var">g<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
congruence_example	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="congruence_example"><span class="id" type="definition">congruence_example<\/span><\/a>:<br\/>$/;"	a
cons	lf/Poly.html	/^&nbsp;&nbsp;| <a name="cons"><span class="id" type="constructor">cons<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span> → <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/>$/;"	a
cons'	lf/Poly.html	/^&nbsp;&nbsp;| <a name="cons'"><span class="id" type="constructor">cons'<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="Poly.html#list'"><span class="id" type="inductive">list'<\/span><\/a> → <a class="idref" href="Poly.html#list'"><span class="id" type="inductive">list'<\/span><\/a>.<br\/>$/;"	a
constfun	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="constfun"><span class="id" type="definition">constfun<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">x<\/span>: <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
constfun_example1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="constfun_example1"><span class="id" type="definition">constfun_example1<\/span><\/a> : <a class="idref" href="Poly.html#ftrue"><span class="id" type="definition">ftrue<\/span><\/a> 0 = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
constfun_example2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="constfun_example2"><span class="id" type="definition">constfun_example2<\/span><\/a> : (<a class="idref" href="Poly.html#constfun"><span class="id" type="definition">constfun<\/span><\/a> 5) 99 = 5.<br\/>$/;"	a
constructor	lf/common/jquery-ui/external/jquery/jquery.js	/^Tween.prototype = {$/;"	p	class:Tween
constructor	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.Event.prototype = {$/;"	p	class:jQuery.Event
constructor	lf/common/jquery-ui/jquery-ui.js	/^	} );$/;"	c
constructor	plf/common/jquery-ui/external/jquery/jquery.js	/^Tween.prototype = {$/;"	p	class:Tween
constructor	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.Event.prototype = {$/;"	p	class:jQuery.Event
constructor	plf/common/jquery-ui/jquery-ui.js	/^	} );$/;"	c
constructor_A	lf/coqindex.html	/^<a name="constructor_A"><\/a><h2>A <\/h2>$/;"	a
constructor_A	plf/coqindex.html	/^<a name="constructor_A"><\/a><h2>A <\/h2>$/;"	a
constructor_B	lf/coqindex.html	/^<br\/><br\/><a name="constructor_B"><\/a><h2>B <\/h2>$/;"	a
constructor_B	plf/coqindex.html	/^<br\/><br\/><a name="constructor_B"><\/a><h2>B <\/h2>$/;"	a
constructor_C	lf/coqindex.html	/^<br\/><br\/><a name="constructor_C"><\/a><h2>C <\/h2>$/;"	a
constructor_C	plf/coqindex.html	/^<br\/><br\/><a name="constructor_C"><\/a><h2>C <\/h2>$/;"	a
constructor_D	lf/coqindex.html	/^<br\/><br\/><a name="constructor_D"><\/a><h2>D <\/h2>$/;"	a
constructor_D	plf/coqindex.html	/^<br\/><br\/><a name="constructor_D"><\/a><h2>D <\/h2>$/;"	a
constructor_E	lf/coqindex.html	/^<br\/><br\/><a name="constructor_E"><\/a><h2>E <\/h2>$/;"	a
constructor_E	plf/coqindex.html	/^<br\/><br\/><a name="constructor_E"><\/a><h2>E <\/h2>$/;"	a
constructor_F	lf/coqindex.html	/^<br\/><br\/><a name="constructor_F"><\/a><h2>F <\/h2>$/;"	a
constructor_G	lf/coqindex.html	/^<br\/><br\/><a name="constructor_G"><\/a><h2>G <\/h2>$/;"	a
constructor_G	plf/coqindex.html	/^<br\/><br\/><a name="constructor_G"><\/a><h2>G <\/h2>$/;"	a
constructor_H	plf/coqindex.html	/^<br\/><br\/><a name="constructor_H"><\/a><h2>H <\/h2>$/;"	a
constructor_I	lf/coqindex.html	/^<br\/><br\/><a name="constructor_I"><\/a><h2>I <\/h2>$/;"	a
constructor_I	plf/coqindex.html	/^<br\/><br\/><a name="constructor_I"><\/a><h2>I <\/h2>$/;"	a
constructor_L	lf/coqindex.html	/^<br\/><br\/><a name="constructor_L"><\/a><h2>L <\/h2>$/;"	a
constructor_L	plf/coqindex.html	/^<br\/><br\/><a name="constructor_L"><\/a><h2>L <\/h2>$/;"	a
constructor_M	lf/coqindex.html	/^<br\/><br\/><a name="constructor_M"><\/a><h2>M <\/h2>$/;"	a
constructor_M	plf/coqindex.html	/^<br\/><br\/><a name="constructor_M"><\/a><h2>M <\/h2>$/;"	a
constructor_N	lf/coqindex.html	/^<br\/><br\/><a name="constructor_N"><\/a><h2>N <\/h2>$/;"	a
constructor_N	plf/coqindex.html	/^<br\/><br\/><a name="constructor_N"><\/a><h2>N <\/h2>$/;"	a
constructor_O	lf/coqindex.html	/^<br\/><br\/><a name="constructor_O"><\/a><h2>O <\/h2>$/;"	a
constructor_P	lf/coqindex.html	/^<br\/><br\/><a name="constructor_P"><\/a><h2>P <\/h2>$/;"	a
constructor_P	plf/coqindex.html	/^<br\/><br\/><a name="constructor_P"><\/a><h2>P <\/h2>$/;"	a
constructor_R	lf/coqindex.html	/^<br\/><br\/><a name="constructor_R"><\/a><h2>R <\/h2>$/;"	a
constructor_R	plf/coqindex.html	/^<br\/><br\/><a name="constructor_R"><\/a><h2>R <\/h2>$/;"	a
constructor_S	lf/coqindex.html	/^<br\/><br\/><a name="constructor_S"><\/a><h2>S <\/h2>$/;"	a
constructor_S	plf/coqindex.html	/^<br\/><br\/><a name="constructor_S"><\/a><h2>S <\/h2>$/;"	a
constructor_T	lf/coqindex.html	/^<br\/><br\/><a name="constructor_T"><\/a><h2>T <\/h2>$/;"	a
constructor_T	plf/coqindex.html	/^<br\/><br\/><a name="constructor_T"><\/a><h2>T <\/h2>$/;"	a
constructor_U	lf/coqindex.html	/^<br\/><br\/><a name="constructor_U"><\/a><h2>U <\/h2>$/;"	a
constructor_V	plf/coqindex.html	/^<br\/><br\/><a name="constructor_V"><\/a><h2>V <\/h2>$/;"	a
constructor_W	lf/coqindex.html	/^<br\/><br\/><a name="constructor_W"><\/a><h2>W <\/h2>$/;"	a
constructor_W	plf/coqindex.html	/^<br\/><br\/><a name="constructor_W"><\/a><h2>W <\/h2>$/;"	a
constructor_Y	lf/coqindex.html	/^<br\/><br\/><a name="constructor_Y"><\/a><h2>Y <\/h2>$/;"	a
context	plf/Norm.html	/^<span class="id" type="keyword">Definition<\/span> <a name="context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
context	plf/RecordSub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
context	plf/Sub.html	/^<span class="id" type="keyword">Definition<\/span> <a name="context"><span class="id" type="definition">context<\/span><\/a> := <span class="id" type="definition">partial_map<\/span> <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
context_invariance	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
context_invariance	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
context_invariance	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="context_invariance"><span class="id" type="lemma">context_invariance<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">Gamma'<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
contradiction_implies_anything	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="contradiction_implies_anything"><span class="id" type="lemma">contradiction_implies_anything<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
contrapositive	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="contrapositive"><span class="id" type="lemma">contrapositive<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
count	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="count"><span class="id" type="definition">count<\/span><\/a> <span class="id" type="var">n<\/span> <span class="id" type="var">l<\/span> :=<br\/>$/;"	a
countoddmembers'	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="countoddmembers'"><span class="id" type="definition">countoddmembers'<\/span><\/a> (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
createActiveXHR	lf/common/jquery-ui/external/jquery/jquery.js	/^function createActiveXHR() {$/;"	f
createActiveXHR	plf/common/jquery-ui/external/jquery/jquery.js	/^function createActiveXHR() {$/;"	f
createFxNow	lf/common/jquery-ui/external/jquery/jquery.js	/^function createFxNow() {$/;"	f
createFxNow	plf/common/jquery-ui/external/jquery/jquery.js	/^function createFxNow() {$/;"	f
createOptions	lf/common/jquery-ui/external/jquery/jquery.js	/^function createOptions( options ) {$/;"	f
createOptions	plf/common/jquery-ui/external/jquery/jquery.js	/^function createOptions( options ) {$/;"	f
createSafeFragment	lf/common/jquery-ui/external/jquery/jquery.js	/^function createSafeFragment( document ) {$/;"	f
createSafeFragment	plf/common/jquery-ui/external/jquery/jquery.js	/^function createSafeFragment( document ) {$/;"	f
createStandardXHR	lf/common/jquery-ui/external/jquery/jquery.js	/^function createStandardXHR() {$/;"	f
createStandardXHR	plf/common/jquery-ui/external/jquery/jquery.js	/^function createStandardXHR() {$/;"	f
createTween	lf/common/jquery-ui/external/jquery/jquery.js	/^function createTween( value, prop, animation ) {$/;"	f
createTween	plf/common/jquery-ui/external/jquery/jquery.js	/^function createTween( value, prop, animation ) {$/;"	f
cssExpand	lf/common/jquery-ui/external/jquery/jquery.js	/^var cssExpand = [ "Top", "Right", "Bottom", "Left" ];$/;"	v
cssExpand	plf/common/jquery-ui/external/jquery/jquery.js	/^var cssExpand = [ "Top", "Right", "Bottom", "Left" ];$/;"	v
cstep	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="cstep"><span class="id" type="inductive">cstep<\/span><\/a> : (<span class="id" type="inductive">com<\/span> * <span class="id" type="definition">state<\/span>) → (<span class="id" type="inductive">com<\/span> * <span class="id" type="definition">state<\/span>) → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ctrans_sound	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ctrans_sound"><span class="id" type="definition">ctrans_sound<\/span><\/a> (<span class="id" type="var">ctrans<\/span> : <span class="id" type="inductive">com<\/span> → <span class="id" type="inductive">com<\/span>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
cur	lf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:Tween
cur	plf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:Tween
curCSS	lf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	f
curCSS	plf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	f
curOption	lf/common/jquery-ui/jquery-ui.js	/^		var curOption;$/;"	v
curOption	plf/common/jquery-ui/jquery-ui.js	/^		var curOption;$/;"	v
data	lf/common/jquery-ui/jquery-ui.js	/^var data = $.extend( $.expr[ ":" ], {$/;"	v
data	plf/common/jquery-ui/jquery-ui.js	/^var data = $.extend( $.expr[ ":" ], {$/;"	v
dataAttr	lf/common/jquery-ui/external/jquery/jquery.js	/^function dataAttr( elem, key, data ) {$/;"	f
dataAttr	plf/common/jquery-ui/external/jquery/jquery.js	/^function dataAttr( elem, key, data ) {$/;"	f
dataType	lf/common/jquery-ui/external/jquery/jquery.js	/^		var dataType,$/;"	v
dataType	plf/common/jquery-ui/external/jquery/jquery.js	/^		var dataType,$/;"	v
day	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="day"><span class="id" type="inductive">day<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
dcom	plf/Hoare2.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="dcom"><span class="id" type="inductive">dcom<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
de_morgan_not_and_not	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="de_morgan_not_and_not"><span class="id" type="definition">de_morgan_not_and_not<\/span><\/a> := ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>:<span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="dec_correct"><span class="id" type="definition">dec_correct<\/span><\/a> (<span class="id" type="var">dec<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>) :=<br\/>$/;"	a
dec_while	plf/Hoare2.html	/^<span class="id" type="keyword">Example<\/span> <a name="dec_while"><span class="id" type="definition">dec_while<\/span><\/a> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
dec_while_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="dec_while_correct"><span class="id" type="lemma">dec_while_correct<\/span><\/a> :<br\/>$/;"	a
decorated	plf/Hoare2.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="decorated"><span class="id" type="inductive">decorated<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
defaultDisplay	lf/common/jquery-ui/external/jquery/jquery.js	/^function defaultDisplay( nodeName ) {$/;"	f
defaultDisplay	plf/common/jquery-ui/external/jquery/jquery.js	/^function defaultDisplay( nodeName ) {$/;"	f
defaultElement	lf/common/jquery-ui/jquery-ui.js	/^	widgetEventPrefix: "",$/;"	p	class:$.Widget
defaultElement	plf/common/jquery-ui/jquery-ui.js	/^	widgetEventPrefix: "",$/;"	p	class:$.Widget
defaultPrefilter	lf/common/jquery-ui/external/jquery/jquery.js	/^function defaultPrefilter( elem, props, opts ) {$/;"	f
defaultPrefilter	plf/common/jquery-ui/external/jquery/jquery.js	/^function defaultPrefilter( elem, props, opts ) {$/;"	f
definition_A	lf/coqindex.html	/^<a name="definition_A"><\/a><h2>A <\/h2>$/;"	a
definition_A	plf/coqindex.html	/^<a name="definition_A"><\/a><h2>A <\/h2>$/;"	a
definition_B	lf/coqindex.html	/^<br\/><br\/><a name="definition_B"><\/a><h2>B <\/h2>$/;"	a
definition_B	plf/coqindex.html	/^<br\/><br\/><a name="definition_B"><\/a><h2>B <\/h2>$/;"	a
definition_C	lf/coqindex.html	/^<br\/><br\/><a name="definition_C"><\/a><h2>C <\/h2>$/;"	a
definition_C	plf/coqindex.html	/^<br\/><br\/><a name="definition_C"><\/a><h2>C <\/h2>$/;"	a
definition_D	lf/coqindex.html	/^<br\/><br\/><a name="definition_D"><\/a><h2>D <\/h2>$/;"	a
definition_D	plf/coqindex.html	/^<br\/><br\/><a name="definition_D"><\/a><h2>D <\/h2>$/;"	a
definition_E	lf/coqindex.html	/^<br\/><br\/><a name="definition_E"><\/a><h2>E <\/h2>$/;"	a
definition_E	plf/coqindex.html	/^<br\/><br\/><a name="definition_E"><\/a><h2>E <\/h2>$/;"	a
definition_F	lf/coqindex.html	/^<br\/><br\/><a name="definition_F"><\/a><h2>F <\/h2>$/;"	a
definition_F	plf/coqindex.html	/^<br\/><br\/><a name="definition_F"><\/a><h2>F <\/h2>$/;"	a
definition_H	lf/coqindex.html	/^<br\/><br\/><a name="definition_H"><\/a><h2>H <\/h2>$/;"	a
definition_H	plf/coqindex.html	/^<br\/><br\/><a name="definition_H"><\/a><h2>H <\/h2>$/;"	a
definition_I	lf/coqindex.html	/^<br\/><br\/><a name="definition_I"><\/a><h2>I <\/h2>$/;"	a
definition_I	plf/coqindex.html	/^<br\/><br\/><a name="definition_I"><\/a><h2>I <\/h2>$/;"	a
definition_K	plf/coqindex.html	/^<br\/><br\/><a name="definition_K"><\/a><h2>K <\/h2>$/;"	a
definition_L	lf/coqindex.html	/^<br\/><br\/><a name="definition_L"><\/a><h2>L <\/h2>$/;"	a
definition_L	plf/coqindex.html	/^<br\/><br\/><a name="definition_L"><\/a><h2>L <\/h2>$/;"	a
definition_M	lf/coqindex.html	/^<br\/><br\/><a name="definition_M"><\/a><h2>M <\/h2>$/;"	a
definition_M	plf/coqindex.html	/^<br\/><br\/><a name="definition_M"><\/a><h2>M <\/h2>$/;"	a
definition_N	lf/coqindex.html	/^<br\/><br\/><a name="definition_N"><\/a><h2>N <\/h2>$/;"	a
definition_N	plf/coqindex.html	/^<br\/><br\/><a name="definition_N"><\/a><h2>N <\/h2>$/;"	a
definition_O	lf/coqindex.html	/^<br\/><br\/><a name="definition_O"><\/a><h2>O <\/h2>$/;"	a
definition_P	lf/coqindex.html	/^<br\/><br\/><a name="definition_P"><\/a><h2>P <\/h2>$/;"	a
definition_P	plf/coqindex.html	/^<br\/><br\/><a name="definition_P"><\/a><h2>P <\/h2>$/;"	a
definition_R	lf/coqindex.html	/^<br\/><br\/><a name="definition_R"><\/a><h2>R <\/h2>$/;"	a
definition_R	plf/coqindex.html	/^<br\/><br\/><a name="definition_R"><\/a><h2>R <\/h2>$/;"	a
definition_S	lf/coqindex.html	/^<br\/><br\/><a name="definition_S"><\/a><h2>S <\/h2>$/;"	a
definition_S	plf/coqindex.html	/^<br\/><br\/><a name="definition_S"><\/a><h2>S <\/h2>$/;"	a
definition_T	lf/coqindex.html	/^<br\/><br\/><a name="definition_T"><\/a><h2>T <\/h2>$/;"	a
definition_T	plf/coqindex.html	/^<br\/><br\/><a name="definition_T"><\/a><h2>T <\/h2>$/;"	a
definition_U	lf/coqindex.html	/^<br\/><br\/><a name="definition_U"><\/a><h2>U <\/h2>$/;"	a
definition_V	plf/coqindex.html	/^<br\/><br\/><a name="definition_V"><\/a><h2>V <\/h2>$/;"	a
definition_W	lf/coqindex.html	/^<br\/><br\/><a name="definition_W"><\/a><h2>W <\/h2>$/;"	a
definition_W	plf/coqindex.html	/^<br\/><br\/><a name="definition_W"><\/a><h2>W <\/h2>$/;"	a
definition_X	lf/coqindex.html	/^<br\/><br\/><a name="definition_X"><\/a><h2>X <\/h2>$/;"	a
definition_Y	lf/coqindex.html	/^<br\/><br\/><a name="definition_Y"><\/a><h2>Y <\/h2>$/;"	a
definition_Z	lf/coqindex.html	/^<br\/><br\/><a name="definition_Z"><\/a><h2>Z <\/h2>$/;"	a
definition_Z	plf/coqindex.html	/^<br\/><br\/><a name="definition_Z"><\/a><h2>Z <\/h2>$/;"	a
demo_auto_absurd_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_auto_absurd_1"><span class="id" type="lemma">demo_auto_absurd_1<\/span><\/a> :<br\/>$/;"	a
demo_auto_absurd_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_auto_absurd_2"><span class="id" type="lemma">demo_auto_absurd_2<\/span><\/a> :<br\/>$/;"	a
demo_clears_all_and_clears_but	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_clears_all_and_clears_but"><span class="id" type="lemma">demo_clears_all_and_clears_but<\/span><\/a> : <br\/>$/;"	a
demo_false	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_false"><span class="id" type="lemma">demo_false<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
demo_false	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_false"><span class="id" type="lemma">demo_false<\/span><\/a> :<br\/>$/;"	a
demo_false_arg	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_false_arg"><span class="id" type="lemma">demo_false_arg<\/span><\/a> :<br\/>$/;"	a
demo_hint_unfold_context_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_hint_unfold_context_1"><span class="id" type="lemma">demo_hint_unfold_context_1<\/span><\/a> :<br\/>$/;"	a
demo_hint_unfold_context_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_hint_unfold_context_2"><span class="id" type="lemma">demo_hint_unfold_context_2<\/span><\/a> :<br\/>$/;"	a
demo_hint_unfold_goal_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_hint_unfold_goal_1"><span class="id" type="lemma">demo_hint_unfold_goal_1<\/span><\/a> :<br\/>$/;"	a
demo_hint_unfold_goal_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_hint_unfold_goal_2"><span class="id" type="lemma">demo_hint_unfold_goal_2<\/span><\/a> :<br\/>$/;"	a
demo_tryfalse	plf/UseTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="demo_tryfalse"><span class="id" type="lemma">demo_tryfalse<\/span><\/a> :<br\/>$/;"	a
detach	lf/common/jquery-ui/external/jquery/jquery.js	/^function detach() {$/;"	f
detach	plf/common/jquery-ui/external/jquery/jquery.js	/^function detach() {$/;"	f
deterministic	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="deterministic"><span class="id" type="definition">deterministic<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
dfib	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="dfib"><span class="id" type="definition">dfib<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a><br\/>$/;"	a
dfib_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="dfib_correct"><span class="id" type="lemma">dfib_correct<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
dir	lf/common/jquery-ui/external/jquery/jquery.js	/^var dir = function( elem, dir, until ) {$/;"	f
dir	plf/common/jquery-ui/external/jquery/jquery.js	/^var dir = function( elem, dir, until ) {$/;"	f
disableScript	lf/common/jquery-ui/external/jquery/jquery.js	/^function disableScript( elem ) {$/;"	f
disableScript	plf/common/jquery-ui/external/jquery/jquery.js	/^function disableScript( elem ) {$/;"	f
disableSelection	lf/common/jquery-ui/jquery-ui.js	/^var disableSelection = $.fn.extend( {$/;"	v
disableSelection	plf/common/jquery-ui/jquery-ui.js	/^var disableSelection = $.fn.extend( {$/;"	v
dist_exists_or	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="dist_exists_or"><span class="id" type="lemma">dist_exists_or<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
dist_not_exists	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="dist_not_exists"><span class="id" type="lemma">dist_not_exists<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">P<\/span> : <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
div_mod_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="div_mod_dec"><span class="id" type="definition">div_mod_dec<\/span><\/a> (<span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
div_mod_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="div_mod_dec_correct"><span class="id" type="lemma">div_mod_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span>,<br\/>$/;"	a
documentElement	lf/common/jquery-ui/external/jquery/jquery.js	/^var documentElement = document.documentElement;$/;"	v
documentElement	plf/common/jquery-ui/external/jquery/jquery.js	/^var documentElement = document.documentElement;$/;"	v
doit3times	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="doit3times"><span class="id" type="definition">doit3times<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span>:<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>→<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">n<\/span>:<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
domManip	lf/common/jquery-ui/external/jquery/jquery.js	/^function domManip( collection, args, callback, ignored ) {$/;"	f
domManip	plf/common/jquery-ui/external/jquery/jquery.js	/^function domManip( collection, args, callback, ignored ) {$/;"	f
done	plf/PE.html	/^&nbsp;&nbsp;| <a name="done"><span class="id" type="constructor">done<\/span><\/a>  : <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a>.<br\/>$/;"	a
donewline	lf/Makefile	/^define donewline$/;"	m
donewline	plf/Makefile	/^define donewline$/;"	m
double	lf/Induction.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="double"><span class="id" type="definition">double<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) :=<br\/>$/;"	a
double_injective	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="double_injective"><span class="id" type="lemma">double_injective<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
double_injective_FAILED	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="double_injective_FAILED"><span class="id" type="lemma">double_injective_FAILED<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
double_injective_take2	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="double_injective_take2"><span class="id" type="lemma">double_injective_take2<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
double_injective_take2_FAILED	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="double_injective_take2_FAILED"><span class="id" type="lemma">double_injective_take2_FAILED<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
double_neg	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="double_neg"><span class="id" type="lemma">double_neg<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
double_negation_elimination	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="double_negation_elimination"><span class="id" type="definition">double_negation_elimination<\/span><\/a> := ∀ <span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
double_plus	lf/Induction.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="double_plus"><span class="id" type="lemma">double_plus<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Induction.html#double"><span class="id" type="definition">double<\/span><\/a> <a class="idref" href="Induction.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="Induction.html#n"><span class="id" type="variable">n<\/span><\/a> + <a class="idref" href="Induction.html#n"><span class="id" type="variable">n<\/span><\/a> .<br\/>$/;"	a
dpow2_down	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="dpow2_down"><span class="id" type="definition">dpow2_down<\/span><\/a> <span class="id" type="var">n<\/span> :=<br\/>$/;"	a
dpow2_down_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="dpow2_down_correct"><span class="id" type="lemma">dpow2_down_correct<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
drop	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="drop"><span class="id" type="definition">drop<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Set<\/span>} (<span class="id" type="var">n<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">nxs<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="Norm.html#X"><span class="id" type="variable">X<\/span><\/a>)) {<span class="id" type="keyword">struct<\/span> <span class="id" type="var">nxs<\/span>}<br\/>$/;"	a
dup_lemma	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="dup_lemma"><span class="id" type="lemma">dup_lemma<\/span><\/a> : ∀ <span class="id" type="var">P<\/span>, <a class="idref" href="LibTactics.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="LibTactics.html#P"><span class="id" type="variable">P<\/span><\/a> → <a class="idref" href="LibTactics.html#P"><span class="id" type="variable">P<\/span><\/a>.<br\/>$/;"	a
duplicate_subst	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="duplicate_subst"><span class="id" type="lemma">duplicate_subst<\/span><\/a> : ∀ <span class="id" type="var">t'<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
eauto	plf/LibTactics.v	/^  time eauto 7. (* takes over 4 seconds  to fail! *) *)$/;"	r
empty	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="empty"><span class="id" type="definition">empty<\/span><\/a> {<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>} : <a class="idref" href="Maps.html#partial_map"><span class="id" type="definition">partial_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a> :=<br\/>$/;"	a
empty_is_empty	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="empty_is_empty"><span class="id" type="lemma">empty_is_empty<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
empty_pe_state	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="empty_pe_state"><span class="id" type="definition">empty_pe_state<\/span><\/a> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> := [].<br\/>$/;"	a
empty_state	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="empty_state"><span class="id" type="definition">empty_state<\/span><\/a> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a> :=<br\/>$/;"	a
empty_state	lf/imp.ml	/^let empty_state =$/;"	v
empty_state	lf/imp.mli	/^val empty_state : state$/;"	v
entry	plf/PE.html	/^&nbsp;&nbsp;| <a name="entry"><span class="id" type="constructor">entry<\/span><\/a> : <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a><br\/>$/;"	a
env	plf/Norm.html	/^<span class="id" type="keyword">Definition<\/span> <a name="env"><span class="id" type="definition">env<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
eq'	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="eq'"><span class="id" type="definition">eq'<\/span><\/a> := @<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#eq"><span class="id" type="inductive">eq<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
equality_by_auto	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equality_by_auto"><span class="id" type="lemma">equality_by_auto<\/span><\/a> : ∀ (<span class="id" type="var">f<\/span> <span class="id" type="var">g<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
equatesLemma	plf/LibTactics.html	/^<span class="id" type="keyword">Section<\/span> <a name="equatesLemma"><span class="id" type="section">equatesLemma<\/span><\/a>.<br\/>$/;"	a
equatesLemma.A0	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A0"><span class="id" type="variable">A<sub>0<\/sub><\/span><\/a> <a name="equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a> : <span class="id" type="keyword">Type<\/span>).<br\/>$/;"	a
equatesLemma.A2	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A2"><span class="id" type="variable">A<sub>2<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">x<sub>1<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a>), <span class="id" type="keyword">Type<\/span>).<br\/>$/;"	a
equatesLemma.A3	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A3"><span class="id" type="variable">A<sub>3<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">x<sub>1<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>2<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A2"><span class="id" type="variable">A<sub>2<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>1<\/sub>"><span class="id" type="variable">x<sub>1<\/sub><\/span><\/a>), <span class="id" type="keyword">Type<\/span>).<br\/>$/;"	a
equatesLemma.A4	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A4"><span class="id" type="variable">A<sub>4<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">x<sub>1<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>2<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A2"><span class="id" type="variable">A<sub>2<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>1<\/sub>"><span class="id" type="variable">x<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>3<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A3"><span class="id" type="variable">A<sub>3<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>2<\/sub>"><span class="id" type="variable">x<sub>2<\/sub><\/span><\/a>), <span class="id" type="keyword">Type<\/span>).<br\/>$/;"	a
equatesLemma.A5	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A5"><span class="id" type="variable">A<sub>5<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">x<sub>1<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>2<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A2"><span class="id" type="variable">A<sub>2<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>1<\/sub>"><span class="id" type="variable">x<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>3<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A3"><span class="id" type="variable">A<sub>3<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>2<\/sub>"><span class="id" type="variable">x<sub>2<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>4<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A4"><span class="id" type="variable">A<sub>4<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>3<\/sub>"><span class="id" type="variable">x<sub>3<\/sub><\/span><\/a>), <span class="id" type="keyword">Type<\/span>).<br\/>$/;"	a
equatesLemma.A6	plf/LibTactics.html	/^<span class="id" type="keyword">Variables<\/span> (<a name="equatesLemma.A6"><span class="id" type="variable">A<sub>6<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">x<sub>1<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A1"><span class="id" type="variable">A<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>2<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A2"><span class="id" type="variable">A<sub>2<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>1<\/sub>"><span class="id" type="variable">x<sub>1<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>3<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A3"><span class="id" type="variable">A<sub>3<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>2<\/sub>"><span class="id" type="variable">x<sub>2<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>4<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A4"><span class="id" type="variable">A<sub>4<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>3<\/sub>"><span class="id" type="variable">x<sub>3<\/sub><\/span><\/a>) (<span class="id" type="var">x<sub>5<\/sub><\/span> : <a class="idref" href="LibTactics.html#equatesLemma.A5"><span class="id" type="variable">A<sub>5<\/sub><\/span><\/a> <a class="idref" href="LibTactics.html#x<sub>4<\/sub>"><span class="id" type="variable">x<sub>4<\/sub><\/span><\/a>), <span class="id" type="keyword">Type<\/span>).<br\/><hr class='doublespaceincode'\/>$/;"	a
equates_0	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_0"><span class="id" type="lemma">equates_0<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>:<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
equates_1	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_1"><span class="id" type="lemma">equates_1<\/span><\/a> :<br\/>$/;"	a
equates_2	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_2"><span class="id" type="lemma">equates_2<\/span><\/a> :<br\/>$/;"	a
equates_3	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_3"><span class="id" type="lemma">equates_3<\/span><\/a> :<br\/>$/;"	a
equates_4	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_4"><span class="id" type="lemma">equates_4<\/span><\/a> :<br\/>$/;"	a
equates_5	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_5"><span class="id" type="lemma">equates_5<\/span><\/a> :<br\/>$/;"	a
equates_6	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="equates_6"><span class="id" type="lemma">equates_6<\/span><\/a> :<br\/>$/;"	a
equiv_classes	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="equiv_classes"><span class="id" type="definition">equiv_classes<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">com<\/span>)<br\/>$/;"	a
equivalence	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="equivalence"><span class="id" type="definition">equivalence<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
ev	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ev"><span class="id" type="inductive">ev<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev	plf/Hoare2.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ev"><span class="id" type="inductive">ev<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev'	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ev'"><span class="id" type="inductive">ev'<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev'_0	lf/IndProp.html	/^| <a name="ev'_0"><span class="id" type="constructor">ev'_0<\/span><\/a> : <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> 0<br\/>$/;"	a
ev'_2	lf/IndProp.html	/^| <a name="ev'_2"><span class="id" type="constructor">ev'_2<\/span><\/a> : <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> 2<br\/>$/;"	a
ev'_ev	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev'_ev"><span class="id" type="lemma">ev'_ev<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> ↔ <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
ev'_sum	lf/IndProp.html	/^| <a name="ev'_sum"><span class="id" type="constructor">ev'_sum<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> → <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> (<a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> + <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>).<br\/>$/;"	a
evSS_ev	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="evSS_ev"><span class="id" type="lemma">evSS_ev<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_0	lf/IndProp.html	/^| <a name="ev_0"><span class="id" type="constructor">ev_0<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 0<br\/>$/;"	a
ev_0	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="ev_0"><span class="id" type="constructor">ev_0<\/span><\/a> : <a class="idref" href="Hoare2.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#O"><span class="id" type="constructor">O<\/span><\/a><br\/>$/;"	a
ev_4	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_4"><span class="id" type="lemma">ev_4<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4.<br\/>$/;"	a
ev_4	lf/ProofObjects.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_4"><span class="id" type="lemma">ev_4<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4.<br\/>$/;"	a
ev_4'	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_4'"><span class="id" type="lemma">ev_4'<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4.<br\/>$/;"	a
ev_4'	lf/ProofObjects.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_4'"><span class="id" type="lemma">ev_4'<\/span><\/a>: <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4.<br\/>$/;"	a
ev_4''	lf/ProofObjects.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_4''"><span class="id" type="lemma">ev_4''<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4.<br\/>$/;"	a
ev_4'''	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_4'''"><span class="id" type="definition">ev_4'''<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 4 :=<br\/>$/;"	a
ev_8	lf/ProofObjects.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_8"><span class="id" type="lemma">ev_8<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 8.<br\/>$/;"	a
ev_8'	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_8'"><span class="id" type="definition">ev_8'<\/span><\/a> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 8 <br\/>$/;"	a
ev_SS	lf/IndProp.html	/^| <a name="ev_SS"><span class="id" type="constructor">ev_SS<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>)).<br\/>$/;"	a
ev_SS	plf/Hoare2.html	/^&nbsp;&nbsp;| <a name="ev_SS"><span class="id" type="constructor">ev_SS<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, <a class="idref" href="Hoare2.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="Hoare2.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="Hoare2.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="Hoare2.html#n"><span class="id" type="variable">n<\/span><\/a>)).<br\/><hr class='doublespaceincode'\/>$/;"	a
ev_double	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_double"><span class="id" type="lemma">ev_double<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_ev'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_ev'"><span class="id" type="lemma">ev_ev'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndPrinciples.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev'"><span class="id" type="inductive">ev'<\/span><\/a> <a class="idref" href="IndPrinciples.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
ev_ev__ev	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_ev__ev"><span class="id" type="lemma">ev_ev__ev<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
ev_even	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ev_even"><span class="id" type="lemma">ev_even<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_even_firsttry	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ev_even_firsttry"><span class="id" type="lemma">ev_even_firsttry<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_even_iff	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_even_iff"><span class="id" type="lemma">ev_even_iff<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_minus2	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_minus2"><span class="id" type="lemma">ev_minus2<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_minus2'	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_minus2'"><span class="id" type="lemma">ev_minus2'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ev_plus2	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_plus2"><span class="id" type="definition">ev_plus2<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev_plus2'	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_plus2'"><span class="id" type="definition">ev_plus2'<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev_plus2''	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_plus2''"><span class="id" type="definition">ev_plus2''<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
ev_plus4	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_plus4"><span class="id" type="lemma">ev_plus4<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (4 + <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/>$/;"	a
ev_plus4	lf/ProofObjects.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_plus4"><span class="id" type="lemma">ev_plus4<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (4 + <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/>$/;"	a
ev_plus4'	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_plus4'"><span class="id" type="definition">ev_plus4'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (4 + <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a>) :=<br\/>$/;"	a
ev_plus4''	lf/ProofObjects.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ev_plus4''"><span class="id" type="definition">ev_plus4''<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">H<\/span> : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a>) : <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (4 + <a class="idref" href="ProofObjects.html#n"><span class="id" type="variable">n<\/span><\/a>) :=<br\/>$/;"	a
ev_plus_plus	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_plus_plus"><span class="id" type="lemma">ev_plus_plus<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
ev_sum	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ev_sum"><span class="id" type="lemma">ev_sum<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> → <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> + <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>).<br\/>$/;"	a
eval	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="eval"><span class="id" type="inductive">eval<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
evalF	plf/Smallstep.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="evalF"><span class="id" type="definition">evalF<\/span><\/a> (<span class="id" type="var">t<\/span> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
evalF_eval	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="evalF_eval"><span class="id" type="lemma">evalF_eval<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
eval__multistep	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="eval__multistep"><span class="id" type="lemma">eval__multistep<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
eval_assign	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="eval_assign"><span class="id" type="lemma">eval_assign<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">ids<\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
even5_nonsense	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="even5_nonsense"><span class="id" type="lemma">even5_nonsense<\/span><\/a> :<br\/>$/;"	a
even_1000	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="even_1000"><span class="id" type="definition">even_1000<\/span><\/a> : ∃ <span class="id" type="var">k<\/span>, 1000 = <a class="idref" href="Induction.html#double"><span class="id" type="definition">double<\/span><\/a> <a class="idref" href="Logic.html#k"><span class="id" type="variable">k<\/span><\/a>.<br\/>$/;"	a
even_1000'	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="even_1000'"><span class="id" type="definition">even_1000'<\/span><\/a> : <a class="idref" href="Basics.html#evenb"><span class="id" type="definition">evenb<\/span><\/a> 1000 = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
even_1000''	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="even_1000''"><span class="id" type="definition">even_1000''<\/span><\/a> : ∃ <span class="id" type="var">k<\/span>, 1000 = <a class="idref" href="Induction.html#double"><span class="id" type="definition">double<\/span><\/a> <a class="idref" href="Logic.html#k"><span class="id" type="variable">k<\/span><\/a>.<br\/>$/;"	a
even_bool_prop	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="even_bool_prop"><span class="id" type="lemma">even_bool_prop<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
evenb	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="evenb"><span class="id" type="definition">evenb<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
evenb_S	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="evenb_S"><span class="id" type="lemma">evenb_S<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
evenb_double	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="evenb_double"><span class="id" type="lemma">evenb_double<\/span><\/a> : ∀ <span class="id" type="var">k<\/span>, <a class="idref" href="Basics.html#evenb"><span class="id" type="definition">evenb<\/span><\/a> (<a class="idref" href="Induction.html#double"><span class="id" type="definition">double<\/span><\/a> <a class="idref" href="Logic.html#k"><span class="id" type="variable">k<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
evenb_double_conv	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="evenb_double_conv"><span class="id" type="lemma">evenb_double_conv<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
ex_falso_quodlibet	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="ex_falso_quodlibet"><span class="id" type="lemma">ex_falso_quodlibet<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
examplemap	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="examplemap"><span class="id" type="definition">examplemap<\/span><\/a> :=<br\/>$/;"	a
excluded_middle	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="excluded_middle"><span class="id" type="definition">excluded_middle<\/span><\/a> := ∀ <span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
excluded_middle_irrefutable	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="excluded_middle_irrefutable"><span class="id" type="lemma">excluded_middle_irrefutable<\/span><\/a>:  ∀ (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
exists_example_2	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="exists_example_2"><span class="id" type="lemma">exists_example_2<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
exp	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="exp"><span class="id" type="definition">exp<\/span><\/a> (<span class="id" type="var">base<\/span> <span class="id" type="var">power<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
exp_match	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="exp_match"><span class="id" type="inductive">exp_match<\/span><\/a> {<span class="id" type="var">T<\/span>} : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">T<\/span> → <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
expect	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="expect"><span class="id" type="definition">expect<\/span><\/a> (<span class="id" type="var">t<\/span> : <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>) : <a class="idref" href="ImpParser.html#parser"><span class="id" type="definition">parser<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#unit"><span class="id" type="inductive">unit<\/span><\/a> :=<br\/>$/;"	a
expect	lf/imp.ml	/^let expect t =$/;"	v
expect	lf/imp.mli	/^val expect : token -> unit parser0$/;"	v
explode	lf/impdriver.ml	/^let explode s =$/;"	v
extract	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="extract"><span class="id" type="definition">extract<\/span><\/a> (<span class="id" type="var">d<\/span>:<a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a>) : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
extract_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="extract_dec"><span class="id" type="definition">extract_dec<\/span><\/a> (<span class="id" type="var">dec<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>) : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
f_equal	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="f_equal"><span class="id" type="lemma">f_equal<\/span><\/a> : ∀ (<span class="id" type="var">A<\/span> <span class="id" type="var">B<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">f<\/span>: <a class="idref" href="Tactics.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Tactics.html#B"><span class="id" type="variable">B<\/span><\/a>) (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span>: <a class="idref" href="Tactics.html#A"><span class="id" type="variable">A<\/span><\/a>),<br\/>$/;"	a
fact_in_coq	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="fact_in_coq"><span class="id" type="definition">fact_in_coq<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
factorial	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="factorial"><span class="id" type="definition">factorial<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
false	lf/Basics.html	/^&nbsp;&nbsp;| <a name="false"><span class="id" type="constructor">false<\/span><\/a> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>.<br\/>$/;"	a
false_beq_id	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="false_beq_id"><span class="id" type="lemma">false_beq_id<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a>,<br\/>$/;"	a
fast	lf/common/jquery-ui/external/jquery/jquery.js	/^	slow: 600,$/;"	p	class:jQuery.fx.speeds
fast	plf/common/jquery-ui/external/jquery/jquery.js	/^	slow: 600,$/;"	p	class:jQuery.fx.speeds
fib	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="fib"><span class="id" type="definition">fib<\/span><\/a> <span class="id" type="var">n<\/span> :=<br\/>$/;"	a
fib_eqn	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="fib_eqn"><span class="id" type="lemma">fib_eqn<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
filter	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="filter"><span class="id" type="definition">filter<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">test<\/span>: <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>→<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>)<br\/>$/;"	a
filterHidden	lf/common/jquery-ui/external/jquery/jquery.js	/^function filterHidden( elem ) {$/;"	f
filterHidden	plf/common/jquery-ui/external/jquery/jquery.js	/^function filterHidden( elem ) {$/;"	f
filter_even_gt<sub	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="filter_even_gt<sub>7<\/sub>"><span class="id" type="definition">filter_even_gt<sub>7<\/sub><\/span><\/a> (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a><br\/>$/;"	a
filter_exercise	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="filter_exercise"><span class="id" type="lemma">filter_exercise<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">test<\/span> : <a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>)<br\/>$/;"	a
filter_not_empty_In	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="filter_not_empty_In"><span class="id" type="lemma">filter_not_empty_In<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
filter_not_empty_In'	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="filter_not_empty_In'"><span class="id" type="lemma">filter_not_empty_In'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">l<\/span>,<br\/>$/;"	a
find_parity	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="find_parity"><span class="id" type="definition">find_parity<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
find_parity_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="find_parity_correct"><span class="id" type="lemma">find_parity_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
find_parity_correct'	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="find_parity_correct'"><span class="id" type="lemma">find_parity_correct'<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
find_parity_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="find_parity_dec"><span class="id" type="definition">find_parity_dec<\/span><\/a> <span class="id" type="var">m<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> :=<br\/>$/;"	a
find_parity_dec'	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="find_parity_dec'"><span class="id" type="definition">find_parity_dec'<\/span><\/a> <span class="id" type="var">m<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> :=<br\/>$/;"	a
firstExpect	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="firstExpect"><span class="id" type="definition">firstExpect<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">t<\/span> : <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>) (<span class="id" type="var">p<\/span> : <a class="idref" href="ImpParser.html#parser"><span class="id" type="definition">parser<\/span><\/a> <a class="idref" href="ImpParser.html#T"><span class="id" type="variable">T<\/span><\/a>)<br\/>$/;"	a
firstExpect	lf/imp.mli	/^val firstExpect : token -> 'a1 parser0 -> 'a1 parser0$/;"	v
fit	lf/common/jquery-ui/jquery-ui.js	/^$.ui.position = {$/;"	p	class:$.ui.position
fit	plf/common/jquery-ui/jquery-ui.js	/^$.ui.position = {$/;"	p	class:$.ui.position
fixCloneNodeIssues	lf/common/jquery-ui/external/jquery/jquery.js	/^function fixCloneNodeIssues( src, dest ) {$/;"	f
fixCloneNodeIssues	plf/common/jquery-ui/external/jquery/jquery.js	/^function fixCloneNodeIssues( src, dest ) {$/;"	f
fixDefaultChecked	lf/common/jquery-ui/external/jquery/jquery.js	/^function fixDefaultChecked( elem ) {$/;"	f
fixDefaultChecked	plf/common/jquery-ui/external/jquery/jquery.js	/^function fixDefaultChecked( elem ) {$/;"	f
flat_map	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="flat_map"><span class="id" type="definition">flat_map<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span>:<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>)<br\/>$/;"	a
fn	lf/common/jquery-ui/external/jquery/jquery.js	/^				bulk = fn;$/;"	f
fn	plf/common/jquery-ui/external/jquery/jquery.js	/^				bulk = fn;$/;"	f
focusable	lf/common/jquery-ui/jquery-ui.js	/^var focusable = $.ui.focusable;$/;"	v
focusable	plf/common/jquery-ui/jquery-ui.js	/^var focusable = $.ui.focusable;$/;"	v
fold	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="fold"><span class="id" type="definition">fold<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span>: <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>→<a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>→<a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">b<\/span>:<a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>)<br\/>$/;"	a
fold_aexp_ex<sub	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_aexp_ex<sub>1<\/sub>"><span class="id" type="definition">fold_aexp_ex<sub>1<\/sub><\/span><\/a> :<br\/>$/;"	a
fold_aexp_ex<sub	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_aexp_ex<sub>2<\/sub>"><span class="id" type="definition">fold_aexp_ex<sub>2<\/sub><\/span><\/a> :<br\/>$/;"	a
fold_bexp_ex<sub	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_bexp_ex<sub>1<\/sub>"><span class="id" type="definition">fold_bexp_ex<sub>1<\/sub><\/span><\/a> :<br\/>$/;"	a
fold_bexp_ex<sub	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_bexp_ex<sub>2<\/sub>"><span class="id" type="definition">fold_bexp_ex<sub>2<\/sub><\/span><\/a> :<br\/>$/;"	a
fold_com_ex<sub	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_com_ex<sub>1<\/sub>"><span class="id" type="definition">fold_com_ex<sub>1<\/sub><\/span><\/a> :<br\/>$/;"	a
fold_constants_aexp	plf/Equiv.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="fold_constants_aexp"><span class="id" type="definition">fold_constants_aexp<\/span><\/a> (<span class="id" type="var">a<\/span> : <span class="id" type="inductive">aexp<\/span>) : <span class="id" type="inductive">aexp<\/span> :=<br\/>$/;"	a
fold_constants_aexp_sound	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="fold_constants_aexp_sound"><span class="id" type="lemma">fold_constants_aexp_sound<\/span><\/a> :<br\/>$/;"	a
fold_constants_bexp	plf/Equiv.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="fold_constants_bexp"><span class="id" type="definition">fold_constants_bexp<\/span><\/a> (<span class="id" type="var">b<\/span> : <span class="id" type="inductive">bexp<\/span>) : <span class="id" type="inductive">bexp<\/span> :=<br\/>$/;"	a
fold_constants_bexp_sound	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="fold_constants_bexp_sound"><span class="id" type="lemma">fold_constants_bexp_sound<\/span><\/a>:<br\/>$/;"	a
fold_constants_com	plf/Equiv.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="fold_constants_com"><span class="id" type="definition">fold_constants_com<\/span><\/a> (<span class="id" type="var">c<\/span> : <span class="id" type="inductive">com<\/span>) : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
fold_constants_com_sound	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="fold_constants_com_sound"><span class="id" type="lemma">fold_constants_com_sound<\/span><\/a> :<br\/>$/;"	a
fold_example1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_example1"><span class="id" type="definition">fold_example1<\/span><\/a> :<br\/>$/;"	a
fold_example2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_example2"><span class="id" type="definition">fold_example2<\/span><\/a> :<br\/>$/;"	a
fold_example3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="fold_example3"><span class="id" type="definition">fold_example3<\/span><\/a> :<br\/>$/;"	a
fold_left	lf/imp.mli	/^val fold_left : ('a1 -> 'a2 -> 'a1) -> 'a2 list -> 'a1 -> 'a1$/;"	v
fold_right	lf/imp.mli	/^val fold_right : ('a2 -> 'a1 -> 'a1) -> 'a1 -> 'a2 list -> 'a1$/;"	v
fontWeight	lf/common/jquery-ui/external/jquery/jquery.js	/^		letterSpacing: "0",$/;"	p
fontWeight	plf/common/jquery-ui/external/jquery/jquery.js	/^		letterSpacing: "0",$/;"	p
foo	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="foo"><span class="id" type="definition">foo<\/span><\/a> (<span class="id" type="var">x<\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) := 5.<br\/>$/;"	a
foo'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="foo'"><span class="id" type="inductive">foo'<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
for	lf/Maps.v	/^    function for [id]s and its fundamental property. *)$/;"	f
for	plf/Maps.v	/^    function for [id]s and its fundamental property. *)$/;"	f
forallb	lf/Logic.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="forallb"><span class="id" type="definition">forallb<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">test<\/span> : <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
forallb	lf/imp.mli	/^val forallb : ('a1 -> bool) -> 'a1 list -> bool$/;"	v
forallb_true_iff	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="forallb_true_iff"><span class="id" type="lemma">forallb_true_iff<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> <span class="id" type="var">test<\/span> (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
four_is_even	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="four_is_even"><span class="id" type="lemma">four_is_even<\/span><\/a> : ∃ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, 4 = <a class="idref" href="Logic.html#n"><span class="id" type="variable">n<\/span><\/a> + <a class="idref" href="Logic.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
free_in_context	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
free_in_context	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
free_in_context	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="free_in_context"><span class="id" type="lemma">free_in_context<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Gamma<\/span>,<br\/>$/;"	a
friday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="friday"><span class="id" type="constructor">friday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
from	lf/Logic.v	/^    function from taking an element and a list and returning a$/;"	f
from	lf/Poly.v	/^    function from [Type]s to [Type]s.  For any particular type [X],$/;"	f
fst	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="fst"><span class="id" type="definition">fst<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> * <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
ftrue	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ftrue"><span class="id" type="definition">ftrue<\/span><\/a> := <a class="idref" href="Poly.html#constfun"><span class="id" type="definition">constfun<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
function_equality_ex<sub	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="function_equality_ex<sub>1<\/sub>"><span class="id" type="definition">function_equality_ex<sub>1<\/sub><\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> 3 = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#pred"><span class="id" type="abbreviation">pred<\/span><\/a> 4).<br\/>$/;"	a
function_equality_ex<sub	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="function_equality_ex<sub>2<\/sub>"><span class="id" type="definition">function_equality_ex<sub>2<\/sub><\/span><\/a> :<br\/>$/;"	a
functional_extensionality	lf/Logic.html	/^<span class="id" type="keyword">Axiom<\/span> <a name="functional_extensionality"><span class="id" type="axiom">functional_extensionality<\/span><\/a> : ∀ {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>: <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
fxNow	lf/common/jquery-ui/external/jquery/jquery.js	/^var$/;"	v
fxNow	plf/common/jquery-ui/external/jquery/jquery.js	/^var$/;"	v
genFx	lf/common/jquery-ui/external/jquery/jquery.js	/^function genFx( type, includeWidth ) {$/;"	f
genFx	plf/common/jquery-ui/external/jquery/jquery.js	/^function genFx( type, includeWidth ) {$/;"	f
get	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.style = {$/;"	m	class:jQuery.attrHooks.style
get	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.cssHooks.opacity = {$/;"	m	class:jQuery.cssHooks.opacity
get	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.propHooks.selected = {$/;"	m	class:jQuery.propHooks.selected
get	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.valHooks.button = {$/;"	m	class:jQuery.valHooks.button
get	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.style = {$/;"	m	class:jQuery.attrHooks.style
get	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.cssHooks.opacity = {$/;"	m	class:jQuery.cssHooks.opacity
get	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.propHooks.selected = {$/;"	m	class:jQuery.propHooks.selected
get	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.valHooks.button = {$/;"	m	class:jQuery.valHooks.button
getAll	lf/common/jquery-ui/external/jquery/jquery.js	/^function getAll( context, tag ) {$/;"	f
getAll	plf/common/jquery-ui/external/jquery/jquery.js	/^function getAll( context, tag ) {$/;"	f
getClass	lf/common/jquery-ui/external/jquery/jquery.js	/^function getClass( elem ) {$/;"	f
getClass	plf/common/jquery-ui/external/jquery/jquery.js	/^function getClass( elem ) {$/;"	f
getDimensions	lf/common/jquery-ui/jquery-ui.js	/^function getDimensions( elem ) {$/;"	f
getDimensions	plf/common/jquery-ui/jquery-ui.js	/^function getDimensions( elem ) {$/;"	f
getDisplay	lf/common/jquery-ui/external/jquery/jquery.js	/^function getDisplay( elem ) {$/;"	f
getDisplay	plf/common/jquery-ui/external/jquery/jquery.js	/^function getDisplay( elem ) {$/;"	f
getOffsets	lf/common/jquery-ui/jquery-ui.js	/^function getOffsets( offsets, width, height ) {$/;"	f
getOffsets	plf/common/jquery-ui/jquery-ui.js	/^function getOffsets( offsets, width, height ) {$/;"	f
getScrollInfo	lf/common/jquery-ui/jquery-ui.js	/^	},$/;"	m	class:$.position
getScrollInfo	plf/common/jquery-ui/jquery-ui.js	/^	},$/;"	m	class:$.position
getStyles	lf/common/jquery-ui/external/jquery/jquery.js	/^if ( window.getComputedStyle ) {$/;"	f
getStyles	lf/common/jquery-ui/external/jquery/jquery.js	/^var getStyles, curCSS,$/;"	v
getStyles	plf/common/jquery-ui/external/jquery/jquery.js	/^if ( window.getComputedStyle ) {$/;"	f
getStyles	plf/common/jquery-ui/external/jquery/jquery.js	/^var getStyles, curCSS,$/;"	v
getWidthOrHeight	lf/common/jquery-ui/external/jquery/jquery.js	/^function getWidthOrHeight( elem, name, extra ) {$/;"	f
getWidthOrHeight	plf/common/jquery-ui/external/jquery/jquery.js	/^function getWidthOrHeight( elem, name, extra ) {$/;"	f
getWindow	lf/common/jquery-ui/external/jquery/jquery.js	/^function getWindow( elem ) {$/;"	f
getWindow	plf/common/jquery-ui/external/jquery/jquery.js	/^function getWindow( elem ) {$/;"	f
global	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.event = {$/;"	p	class:jQuery.event
global	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.event = {$/;"	p	class:jQuery.event
global_:	lf/coqindex.html	/^<br\/><br\/><a name="global_:"><\/a><h2>: <\/h2>$/;"	a
global_:	plf/coqindex.html	/^<br\/><br\/><a name="global_:"><\/a><h2>: <\/h2>$/;"	a
global_A	lf/coqindex.html	/^<a name="global_A"><\/a><h2>A <\/h2>$/;"	a
global_A	plf/coqindex.html	/^<a name="global_A"><\/a><h2>A <\/h2>$/;"	a
global_B	lf/coqindex.html	/^<br\/><br\/><a name="global_B"><\/a><h2>B <\/h2>$/;"	a
global_B	plf/coqindex.html	/^<br\/><br\/><a name="global_B"><\/a><h2>B <\/h2>$/;"	a
global_C	lf/coqindex.html	/^<br\/><br\/><a name="global_C"><\/a><h2>C <\/h2>$/;"	a
global_C	plf/coqindex.html	/^<br\/><br\/><a name="global_C"><\/a><h2>C <\/h2>$/;"	a
global_D	lf/coqindex.html	/^<br\/><br\/><a name="global_D"><\/a><h2>D <\/h2>$/;"	a
global_D	plf/coqindex.html	/^<br\/><br\/><a name="global_D"><\/a><h2>D <\/h2>$/;"	a
global_E	lf/coqindex.html	/^<br\/><br\/><a name="global_E"><\/a><h2>E <\/h2>$/;"	a
global_E	plf/coqindex.html	/^<br\/><br\/><a name="global_E"><\/a><h2>E <\/h2>$/;"	a
global_F	lf/coqindex.html	/^<br\/><br\/><a name="global_F"><\/a><h2>F <\/h2>$/;"	a
global_F	plf/coqindex.html	/^<br\/><br\/><a name="global_F"><\/a><h2>F <\/h2>$/;"	a
global_G	lf/coqindex.html	/^<br\/><br\/><a name="global_G"><\/a><h2>G <\/h2>$/;"	a
global_G	plf/coqindex.html	/^<br\/><br\/><a name="global_G"><\/a><h2>G <\/h2>$/;"	a
global_H	lf/coqindex.html	/^<br\/><br\/><a name="global_H"><\/a><h2>H <\/h2>$/;"	a
global_H	plf/coqindex.html	/^<br\/><br\/><a name="global_H"><\/a><h2>H <\/h2>$/;"	a
global_I	lf/coqindex.html	/^<br\/><br\/><a name="global_I"><\/a><h2>I <\/h2>$/;"	a
global_I	plf/coqindex.html	/^<br\/><br\/><a name="global_I"><\/a><h2>I <\/h2>$/;"	a
global_K	plf/coqindex.html	/^<br\/><br\/><a name="global_K"><\/a><h2>K <\/h2>$/;"	a
global_L	lf/coqindex.html	/^<br\/><br\/><a name="global_L"><\/a><h2>L <\/h2>$/;"	a
global_L	plf/coqindex.html	/^<br\/><br\/><a name="global_L"><\/a><h2>L <\/h2>$/;"	a
global_M	lf/coqindex.html	/^<br\/><br\/><a name="global_M"><\/a><h2>M <\/h2>$/;"	a
global_M	plf/coqindex.html	/^<br\/><br\/><a name="global_M"><\/a><h2>M <\/h2>$/;"	a
global_N	lf/coqindex.html	/^<br\/><br\/><a name="global_N"><\/a><h2>N <\/h2>$/;"	a
global_N	plf/coqindex.html	/^<br\/><br\/><a name="global_N"><\/a><h2>N <\/h2>$/;"	a
global_O	lf/coqindex.html	/^<br\/><br\/><a name="global_O"><\/a><h2>O <\/h2>$/;"	a
global_O	plf/coqindex.html	/^<br\/><br\/><a name="global_O"><\/a><h2>O <\/h2>$/;"	a
global_P	lf/coqindex.html	/^<br\/><br\/><a name="global_P"><\/a><h2>P <\/h2>$/;"	a
global_P	plf/coqindex.html	/^<br\/><br\/><a name="global_P"><\/a><h2>P <\/h2>$/;"	a
global_R	lf/coqindex.html	/^<br\/><br\/><a name="global_R"><\/a><h2>R <\/h2>$/;"	a
global_R	plf/coqindex.html	/^<br\/><br\/><a name="global_R"><\/a><h2>R <\/h2>$/;"	a
global_S	lf/coqindex.html	/^<br\/><br\/><a name="global_S"><\/a><h2>S <\/h2>$/;"	a
global_S	plf/coqindex.html	/^<br\/><br\/><a name="global_S"><\/a><h2>S <\/h2>$/;"	a
global_T	lf/coqindex.html	/^<br\/><br\/><a name="global_T"><\/a><h2>T <\/h2>$/;"	a
global_T	plf/coqindex.html	/^<br\/><br\/><a name="global_T"><\/a><h2>T <\/h2>$/;"	a
global_U	lf/coqindex.html	/^<br\/><br\/><a name="global_U"><\/a><h2>U <\/h2>$/;"	a
global_U	plf/coqindex.html	/^<br\/><br\/><a name="global_U"><\/a><h2>U <\/h2>$/;"	a
global_V	plf/coqindex.html	/^<br\/><br\/><a name="global_V"><\/a><h2>V <\/h2>$/;"	a
global_W	lf/coqindex.html	/^<br\/><br\/><a name="global_W"><\/a><h2>W <\/h2>$/;"	a
global_W	plf/coqindex.html	/^<br\/><br\/><a name="global_W"><\/a><h2>W <\/h2>$/;"	a
global_X	lf/coqindex.html	/^<br\/><br\/><a name="global_X"><\/a><h2>X <\/h2>$/;"	a
global_Y	lf/coqindex.html	/^<br\/><br\/><a name="global_Y"><\/a><h2>Y <\/h2>$/;"	a
global_Z	lf/coqindex.html	/^<br\/><br\/><a name="global_Z"><\/a><h2>Z <\/h2>$/;"	a
global_Z	plf/coqindex.html	/^<br\/><br\/><a name="global_Z"><\/a><h2>Z <\/h2>$/;"	a
green	lf/Basics.html	/^&nbsp;&nbsp;| <a name="green"><span class="id" type="constructor">green<\/span><\/a> : <a class="idref" href="Basics.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a><br\/>$/;"	a
green	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="green"><span class="id" type="constructor">green<\/span><\/a> : <a class="idref" href="IndPrinciples.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a><br\/>$/;"	a
gt_not_le	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="gt_not_le"><span class="id" type="axiom">gt_not_le<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
h	lf/imp.ml	/^  let h i = (n land (1 lsl i)) <> 0 in$/;"	v
halts	plf/Norm.html	/^<span class="id" type="keyword">Definition<\/span> <a name="halts"><span class="id" type="definition">halts<\/span><\/a>  (<span class="id" type="var">t<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=  ∃ <span class="id" type="var">t'<\/span>, <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> ==&gt;* <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a> ∧  <a class="idref" href="Norm.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a>.<br\/>$/;"	a
handle	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.change
handle	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.change
has	lf/Basics.v	/^    function [f] has the property that [f x = negb x].*)$/;"	f
has_type	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="Norm.html#context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
has_type	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="RecordSub.html#context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
has_type	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="Sub.html#context"><span class="id" type="definition">context<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
has_type	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="has_type"><span class="id" type="inductive">has_type<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
has_type_1	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="has_type_1"><span class="id" type="definition">has_type_1<\/span><\/a> :<br\/>$/;"	a
has_type__wf	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="has_type__wf"><span class="id" type="lemma">has_type__wf<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
has_type_not	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="has_type_not"><span class="id" type="definition">has_type_not<\/span><\/a> :<br\/>$/;"	a
hd_error	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="hd_error"><span class="id" type="definition">hd_error<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a><br\/>$/;"	a
height	lf/common/jquery-ui/external/jquery/jquery.js	/^		attrs = { height: type },$/;"	p	class:genFx.which
height	plf/common/jquery-ui/external/jquery/jquery.js	/^		attrs = { height: type },$/;"	p	class:genFx.which
hideAll	lf/common/toggleproofs.js	/^function hideAll(cls)$/;"	f
hideAll	plf/common/toggleproofs.js	/^function hideAll(cls)$/;"	f
hoare_asgn	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_asgn"><span class="id" type="lemma">hoare_asgn<\/span><\/a> : ∀ <span class="id" type="var">Q<\/span> <span class="id" type="var">X<\/span> <span class="id" type="var">a<\/span>,<br\/>$/;"	a
hoare_asgn_example1	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="hoare_asgn_example1"><span class="id" type="definition">hoare_asgn_example1<\/span><\/a> :<br\/>$/;"	a
hoare_asgn_example1'	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="hoare_asgn_example1'"><span class="id" type="definition">hoare_asgn_example1'<\/span><\/a> :<br\/>$/;"	a
hoare_asgn_example3	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="hoare_asgn_example3"><span class="id" type="definition">hoare_asgn_example3<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
hoare_asgn_example4	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="hoare_asgn_example4"><span class="id" type="definition">hoare_asgn_example4<\/span><\/a> :<br\/>$/;"	a
hoare_asgn_fwd	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_asgn_fwd"><span class="id" type="lemma">hoare_asgn_fwd<\/span><\/a> :<br\/>$/;"	a
hoare_asgn_fwd_exists	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_asgn_fwd_exists"><span class="id" type="lemma">hoare_asgn_fwd_exists<\/span><\/a> :<br\/>$/;"	a
hoare_asgn_weakest	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_asgn_weakest"><span class="id" type="lemma">hoare_asgn_weakest<\/span><\/a> : ∀ <span class="id" type="var">Q<\/span> <span class="id" type="var">X<\/span> <span class="id" type="var">a<\/span>,<br\/>$/;"	a
hoare_consequence	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_consequence"><span class="id" type="lemma">hoare_consequence<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">P'<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">Q'<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hoare_consequence_post	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_consequence_post"><span class="id" type="lemma">hoare_consequence_post<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">Q'<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hoare_consequence_pre	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_consequence_pre"><span class="id" type="lemma">hoare_consequence_pre<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">P'<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hoare_if	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_if"><span class="id" type="lemma">hoare_if<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
hoare_post_true	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_post_true"><span class="id" type="lemma">hoare_post_true<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hoare_pre_false	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_pre_false"><span class="id" type="lemma">hoare_pre_false<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hoare_proof	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="hoare_proof"><span class="id" type="inductive">hoare_proof<\/span><\/a> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <span class="id" type="inductive">com<\/span> → <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> → <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
hoare_proof_complete	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_proof_complete"><span class="id" type="lemma">hoare_proof_complete<\/span><\/a>: ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span>,<br\/>$/;"	a
hoare_proof_sound	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_proof_sound"><span class="id" type="lemma">hoare_proof_sound<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span>,<br\/>$/;"	a
hoare_seq	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_seq"><span class="id" type="lemma">hoare_seq<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span>,<br\/>$/;"	a
hoare_skip	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="hoare_skip"><span class="id" type="lemma">hoare_skip<\/span><\/a> : ∀ <span class="id" type="var">P<\/span>,<br\/>$/;"	a
hoare_triple	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="hoare_triple"><span class="id" type="definition">hoare_triple<\/span><\/a><br\/>$/;"	a
hoare_while	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="hoare_while"><span class="id" type="lemma">hoare_while<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
hooks.empty.fire	lf/common/jquery-ui/external/jquery/jquery.js	/^			oldfire = hooks.empty.fire;$/;"	f
hooks.empty.fire	plf/common/jquery-ui/external/jquery/jquery.js	/^			oldfire = hooks.empty.fire;$/;"	f
i	lf/common/jquery-ui/external/jquery/jquery.js	/^		var i, prop, copy,$/;"	v
i	lf/common/jquery-ui/external/jquery/jquery.js	/^var i;$/;"	v
i	lf/common/jquery-ui/jquery-ui.js	/^		var i;$/;"	v
i	plf/common/jquery-ui/external/jquery/jquery.js	/^		var i, prop, copy,$/;"	v
i	plf/common/jquery-ui/external/jquery/jquery.js	/^var i;$/;"	v
i	plf/common/jquery-ui/jquery-ui.js	/^		var i;$/;"	v
id	lf/Lists.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="id"><span class="id" type="inductive">id<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
id	lf/Maps.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="id"><span class="id" type="inductive">id<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
id	lf/imp.ml	/^type id =$/;"	t
id	lf/imp.mli	/^type id =$/;"	t
id	lf/imp1.mli	/^type id =$/;"	t
id	lf/imp2.mli	/^type id =$/;"	t
identity_assignment	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="identity_assignment"><span class="id" type="lemma">identity_assignment<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
identity_fn_applied_twice	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="identity_fn_applied_twice"><span class="id" type="lemma">identity_fn_applied_twice<\/span><\/a> :<br\/>$/;"	a
if_example	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="if_example"><span class="id" type="definition">if_example<\/span><\/a> :<br\/>$/;"	a
if_minus_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="if_minus_correct"><span class="id" type="lemma">if_minus_correct<\/span><\/a> :<br\/>$/;"	a
if_minus_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="if_minus_dec"><span class="id" type="definition">if_minus_dec<\/span><\/a> :=<br\/>$/;"	a
if_minus_plus	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="if_minus_plus"><span class="id" type="lemma">if_minus_plus<\/span><\/a> :<br\/>$/;"	a
if_minus_plus_com	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="if_minus_plus_com"><span class="id" type="definition">if_minus_plus_com<\/span><\/a> :=<br\/>$/;"	a
if_minus_plus_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="if_minus_plus_correct"><span class="id" type="lemma">if_minus_plus_correct<\/span><\/a> :<br\/>$/;"	a
if_minus_plus_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="if_minus_plus_dec"><span class="id" type="definition">if_minus_plus_dec<\/span><\/a> :=<br\/>$/;"	a
iff_intro_swap	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="iff_intro_swap"><span class="id" type="lemma">iff_intro_swap<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
iff_refl	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="iff_refl"><span class="id" type="lemma">iff_refl<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
iff_reflect	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="iff_reflect"><span class="id" type="lemma">iff_reflect<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">b<\/span>, (<a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> ↔ <a class="idref" href="IndProp.html#b"><span class="id" type="variable">b<\/span><\/a> = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) → <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> <a class="idref" href="IndProp.html#b"><span class="id" type="variable">b<\/span><\/a>.<br\/>$/;"	a
iff_sym	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="iff_sym"><span class="id" type="lemma">iff_sym<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
iff_trans	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="iff_trans"><span class="id" type="lemma">iff_trans<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
iff_trans	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="iff_trans"><span class="id" type="lemma">iff_trans<\/span><\/a> : ∀ (<span class="id" type="var">P<sub>1<\/sub><\/span> <span class="id" type="var">P<sub>2<\/sub><\/span> <span class="id" type="var">P<sub>3<\/sub><\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
implies_to_or	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="implies_to_or"><span class="id" type="definition">implies_to_or<\/span><\/a> := ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>:<span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
in	plf/References.v	/^    function application, in itself, has no side effects.  The other$/;"	f
in_app_iff	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="in_app_iff"><span class="id" type="lemma">in_app_iff<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">l<\/span> <span class="id" type="var">l'<\/span> (<span class="id" type="var">a<\/span>:<a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a>),<br\/>$/;"	a
in_re_match	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="in_re_match"><span class="id" type="lemma">in_re_match<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>) (<span class="id" type="var">x<\/span> : <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
in_split	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="in_split"><span class="id" type="lemma">in_split<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span>:<a class="idref" href="IndProp.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
inb	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="inb"><span class="id" type="definition">inb<\/span><\/a> {<span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">beq<\/span> : <a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">a<\/span> : <a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a>) :=<br\/>$/;"	a
inbP	plf/PE.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="inbP"><span class="id" type="lemma">inbP<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> : <span class="id" type="keyword">Type<\/span>, ∀ <span class="id" type="var">beq<\/span> : <a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a>→<a class="idref" href="PE.html#A"><span class="id" type="variable">A<\/span><\/a>→<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
induct_height_max2	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="induct_height_max2"><span class="id" type="lemma">induct_height_max2<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
inductive_A	lf/coqindex.html	/^<a name="inductive_A"><\/a><h2>A <\/h2>$/;"	a
inductive_A	plf/coqindex.html	/^<a name="inductive_A"><\/a><h2>A <\/h2>$/;"	a
inductive_B	lf/coqindex.html	/^<br\/><br\/><a name="inductive_B"><\/a><h2>B <\/h2>$/;"	a
inductive_B	plf/coqindex.html	/^<br\/><br\/><a name="inductive_B"><\/a><h2>B <\/h2>$/;"	a
inductive_C	lf/coqindex.html	/^<br\/><br\/><a name="inductive_C"><\/a><h2>C <\/h2>$/;"	a
inductive_C	plf/coqindex.html	/^<br\/><br\/><a name="inductive_C"><\/a><h2>C <\/h2>$/;"	a
inductive_D	lf/coqindex.html	/^<br\/><br\/><a name="inductive_D"><\/a><h2>D <\/h2>$/;"	a
inductive_D	plf/coqindex.html	/^<br\/><br\/><a name="inductive_D"><\/a><h2>D <\/h2>$/;"	a
inductive_E	lf/coqindex.html	/^<br\/><br\/><a name="inductive_E"><\/a><h2>E <\/h2>$/;"	a
inductive_E	plf/coqindex.html	/^<br\/><br\/><a name="inductive_E"><\/a><h2>E <\/h2>$/;"	a
inductive_F	lf/coqindex.html	/^<br\/><br\/><a name="inductive_F"><\/a><h2>F <\/h2>$/;"	a
inductive_H	plf/coqindex.html	/^<br\/><br\/><a name="inductive_H"><\/a><h2>H <\/h2>$/;"	a
inductive_I	lf/coqindex.html	/^<br\/><br\/><a name="inductive_I"><\/a><h2>I <\/h2>$/;"	a
inductive_I	plf/coqindex.html	/^<br\/><br\/><a name="inductive_I"><\/a><h2>I <\/h2>$/;"	a
inductive_L	lf/coqindex.html	/^<br\/><br\/><a name="inductive_L"><\/a><h2>L <\/h2>$/;"	a
inductive_L	plf/coqindex.html	/^<br\/><br\/><a name="inductive_L"><\/a><h2>L <\/h2>$/;"	a
inductive_M	lf/coqindex.html	/^<br\/><br\/><a name="inductive_M"><\/a><h2>M <\/h2>$/;"	a
inductive_M	plf/coqindex.html	/^<br\/><br\/><a name="inductive_M"><\/a><h2>M <\/h2>$/;"	a
inductive_N	lf/coqindex.html	/^<br\/><br\/><a name="inductive_N"><\/a><h2>N <\/h2>$/;"	a
inductive_N	plf/coqindex.html	/^<br\/><br\/><a name="inductive_N"><\/a><h2>N <\/h2>$/;"	a
inductive_O	lf/coqindex.html	/^<br\/><br\/><a name="inductive_O"><\/a><h2>O <\/h2>$/;"	a
inductive_P	lf/coqindex.html	/^<br\/><br\/><a name="inductive_P"><\/a><h2>P <\/h2>$/;"	a
inductive_P	plf/coqindex.html	/^<br\/><br\/><a name="inductive_P"><\/a><h2>P <\/h2>$/;"	a
inductive_R	lf/coqindex.html	/^<br\/><br\/><a name="inductive_R"><\/a><h2>R <\/h2>$/;"	a
inductive_R	plf/coqindex.html	/^<br\/><br\/><a name="inductive_R"><\/a><h2>R <\/h2>$/;"	a
inductive_S	lf/coqindex.html	/^<br\/><br\/><a name="inductive_S"><\/a><h2>S <\/h2>$/;"	a
inductive_S	plf/coqindex.html	/^<br\/><br\/><a name="inductive_S"><\/a><h2>S <\/h2>$/;"	a
inductive_T	lf/coqindex.html	/^<br\/><br\/><a name="inductive_T"><\/a><h2>T <\/h2>$/;"	a
inductive_T	plf/coqindex.html	/^<br\/><br\/><a name="inductive_T"><\/a><h2>T <\/h2>$/;"	a
inductive_V	plf/coqindex.html	/^<br\/><br\/><a name="inductive_V"><\/a><h2>V <\/h2>$/;"	a
inductive_W	lf/coqindex.html	/^<br\/><br\/><a name="inductive_W"><\/a><h2>W <\/h2>$/;"	a
inductive_W	plf/coqindex.html	/^<br\/><br\/><a name="inductive_W"><\/a><h2>W <\/h2>$/;"	a
inductive_Y	lf/coqindex.html	/^<br\/><br\/><a name="inductive_Y"><\/a><h2>Y <\/h2>$/;"	a
inequiv_exercise	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="inequiv_exercise"><span class="id" type="lemma">inequiv_exercise<\/span><\/a>:<br\/>$/;"	a
init	lf/common/jquery-ui/external/jquery/jquery.js	/^	constructor: Tween,$/;"	m	class:Tween
init	lf/common/jquery-ui/external/jquery/jquery.js	/^	return new Tween.prototype.init( elem, options, prop, end, easing );$/;"	m	class:return
init	lf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	c
init	lf/common/jquery-ui/external/jquery/jquery.js	/^Tween.prototype.init.prototype = Tween.prototype;$/;"	m	class:Tween
init	plf/common/jquery-ui/external/jquery/jquery.js	/^	constructor: Tween,$/;"	m	class:Tween
init	plf/common/jquery-ui/external/jquery/jquery.js	/^	return new Tween.prototype.init( elem, options, prop, end, easing );$/;"	m	class:return
init	plf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	c
init	plf/common/jquery-ui/external/jquery/jquery.js	/^Tween.prototype.init.prototype = Tween.prototype;$/;"	m	class:Tween
inj_pair2	plf/LibTactics.html	/^<span class="id" type="keyword">Axiom<\/span> <a name="inj_pair2"><span class="id" type="axiom">inj_pair2<\/span><\/a> :  <span class="comment">(*&nbsp;is&nbsp;in&nbsp;fact&nbsp;derivable&nbsp;from&nbsp;the&nbsp;axioms&nbsp;in&nbsp;LibAxiom.v&nbsp;*)<\/span><br\/>$/;"	a
injective	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="injective"><span class="id" type="definition">injective<\/span><\/a> {<span class="id" type="var">A<\/span> <span class="id" type="var">B<\/span>} (<span class="id" type="var">f<\/span> : <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Logic.html#B"><span class="id" type="variable">B<\/span><\/a>) :=<br\/>$/;"	a
inspect	lf/common/jquery-ui/external/jquery/jquery.js	/^	function inspect( dataType ) {$/;"	f	function:inspectPrefiltersOrTransports
inspect	plf/common/jquery-ui/external/jquery/jquery.js	/^	function inspect( dataType ) {$/;"	f	function:inspectPrefiltersOrTransports
inspectPrefiltersOrTransports	lf/common/jquery-ui/external/jquery/jquery.js	/^function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {$/;"	f
inspectPrefiltersOrTransports	plf/common/jquery-ui/external/jquery/jquery.js	/^function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {$/;"	f
instantiation	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="instantiation"><span class="id" type="inductive">instantiation<\/span><\/a> :  <a class="idref" href="Norm.html#tass"><span class="id" type="definition">tass<\/span><\/a> → <a class="idref" href="Norm.html#env"><span class="id" type="definition">env<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
instantiation_R	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="instantiation_R"><span class="id" type="lemma">instantiation_R<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">e<\/span>,<br\/>$/;"	a
instantiation_domains_match	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="instantiation_domains_match"><span class="id" type="lemma">instantiation_domains_match<\/span><\/a>: ∀ {<span class="id" type="var">c<\/span>} {<span class="id" type="var">e<\/span>},<br\/>$/;"	a
instantiation_drop	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="instantiation_drop"><span class="id" type="lemma">instantiation_drop<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">env<\/span>,<br\/>$/;"	a
instantiation_env_closed	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="instantiation_env_closed"><span class="id" type="lemma">instantiation_env_closed<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">e<\/span>,<br\/>$/;"	a
internalData	lf/common/jquery-ui/external/jquery/jquery.js	/^function internalData( elem, name, data, pvt \/* Internal Use Only *\/ ) {$/;"	f
internalData	plf/common/jquery-ui/external/jquery/jquery.js	/^function internalData( elem, name, data, pvt \/* Internal Use Only *\/ ) {$/;"	f
internalRemoveData	lf/common/jquery-ui/external/jquery/jquery.js	/^function internalRemoveData( elem, name, pvt ) {$/;"	f
internalRemoveData	plf/common/jquery-ui/external/jquery/jquery.js	/^function internalRemoveData( elem, name, pvt ) {$/;"	f
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="inversion_ex<sub>3<\/sub>"><span class="id" type="definition">inversion_ex<sub>3<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">l<\/span> <span class="id" type="var">j<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="inversion_ex<sub>6<\/sub>"><span class="id" type="definition">inversion_ex<sub>6<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>)<br\/>$/;"	a
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="inversion_ex<sub>1<\/sub>"><span class="id" type="lemma">inversion_ex<sub>1<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="inversion_ex<sub>2<\/sub>"><span class="id" type="lemma">inversion_ex<sub>2<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="inversion_ex<sub>4<\/sub>"><span class="id" type="lemma">inversion_ex<sub>4<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
inversion_ex<sub	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="inversion_ex<sub>5<\/sub>"><span class="id" type="lemma">inversion_ex<sub>5<\/sub><\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
is	lf/Imp.v	/^    function is that we now need to construct _proofs_ that some$/;"	f
is	plf/Imp.v	/^    function is that we now need to construct _proofs_ that some$/;"	f
is	plf/Stlc.v	/^    function is actually applied to an argument.  We also make the$/;"	f
isAlpha	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="isAlpha"><span class="id" type="definition">isAlpha<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
isAlpha	lf/imp.mli	/^val isAlpha : char -> bool$/;"	v
isArrayLike	lf/common/jquery-ui/external/jquery/jquery.js	/^function isArrayLike( obj ) {$/;"	f
isArrayLike	plf/common/jquery-ui/external/jquery/jquery.js	/^function isArrayLike( obj ) {$/;"	f
isDigit	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="isDigit"><span class="id" type="definition">isDigit<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
isDigit	lf/imp.ml	/^let isDigit c =$/;"	v
isDigit	lf/imp.mli	/^val isDigit : char -> bool$/;"	v
isEmptyDataObject	lf/common/jquery-ui/external/jquery/jquery.js	/^function isEmptyDataObject( obj ) {$/;"	f
isEmptyDataObject	plf/common/jquery-ui/external/jquery/jquery.js	/^function isEmptyDataObject( obj ) {$/;"	f
isHidden	lf/common/jquery-ui/external/jquery/jquery.js	/^var isHidden = function( elem, el ) {$/;"	f
isHidden	plf/common/jquery-ui/external/jquery/jquery.js	/^var isHidden = function( elem, el ) {$/;"	f
isLowerAlpha	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="isLowerAlpha"><span class="id" type="definition">isLowerAlpha<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
isLowerAlpha	lf/imp.ml	/^let isLowerAlpha c =$/;"	v
isLowerAlpha	lf/imp.mli	/^val isLowerAlpha : char -> bool$/;"	v
isWhite	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="isWhite"><span class="id" type="definition">isWhite<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
isWhite	lf/imp.mli	/^val isWhite : char -> bool$/;"	v
is_even_prime	lf/Logic.html	/^<span class="id" type="var">Fail<\/span> <span class="id" type="keyword">Definition<\/span> <a name="is_even_prime"><span class="id" type="definition">is_even_prime<\/span><\/a> <span class="id" type="var">n<\/span> :=<br\/>$/;"	a
is_fortytwo	lf/Auto.html	/^<span class="id" type="keyword">Definition<\/span> <a name="is_fortytwo"><span class="id" type="definition">is_fortytwo<\/span><\/a> <span class="id" type="var">x<\/span> := (<a class="idref" href="Auto.html#x"><span class="id" type="variable">x<\/span><\/a> = 42).<br\/><hr class='doublespaceincode'\/>$/;"	a
is_three	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="is_three"><span class="id" type="definition">is_three<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
is_wp	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="is_wp"><span class="id" type="definition">is_wp<\/span><\/a> <span class="id" type="var">P<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span> :=<br\/>$/;"	a
is_wp_example	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="is_wp_example"><span class="id" type="lemma">is_wp_example<\/span><\/a> :<br\/>$/;"	a
isred	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="isred"><span class="id" type="definition">isred<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="Basics.html#color"><span class="id" type="inductive">color<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
jQuery.Callbacks	lf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.Callbacks	plf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.Event	lf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	c
jQuery.Event	plf/common/jquery-ui/external/jquery/jquery.js	/^	};$/;"	c
jQuery._evalUrl	lf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery._evalUrl	plf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.expr.filters.animated	lf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.expr.filters.animated	plf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.expr.filters.hidden	lf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.expr.filters.hidden	plf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.expr.filters.visible	lf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.expr.filters.visible	plf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.filter	lf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.filter	plf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.fn.delay	lf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.fn.delay	plf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.fn.load	lf/common/jquery-ui/external/jquery/jquery.js	/^var _load = jQuery.fn.load;$/;"	f
jQuery.fn.load	plf/common/jquery-ui/external/jquery/jquery.js	/^var _load = jQuery.fn.load;$/;"	f
jQuery.fn.ready	lf/common/jquery-ui/external/jquery/jquery.js	/^var readyList;$/;"	f
jQuery.fn.ready	plf/common/jquery-ui/external/jquery/jquery.js	/^var readyList;$/;"	f
jQuery.fn.size	lf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.fn.size	plf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.fx.start	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.fx.interval = 13;$/;"	f
jQuery.fx.start	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.fx.interval = 13;$/;"	f
jQuery.fx.stop	lf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.fx.stop	plf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.fx.tick	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.timers = [];$/;"	f
jQuery.fx.tick	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.timers = [];$/;"	f
jQuery.fx.timer	lf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.fx.timer	plf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.noConflict	lf/common/jquery-ui/external/jquery/jquery.js	/^	_$ = window.$;$/;"	f
jQuery.noConflict	plf/common/jquery-ui/external/jquery/jquery.js	/^	_$ = window.$;$/;"	f
jQuery.param	lf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.param	plf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.parseHTML	lf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.parseHTML	plf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.parseJSON	lf/common/jquery-ui/external/jquery/jquery.js	/^var rvalidtokens = \/(,)|(\\[|{)|(}|])|"(?:[^"\\\\\\r\\n]|\\\\["\\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)\/g;$/;"	f
jQuery.parseJSON	plf/common/jquery-ui/external/jquery/jquery.js	/^var rvalidtokens = \/(,)|(\\[|{)|(}|])|"(?:[^"\\\\\\r\\n]|\\\\["\\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)\/g;$/;"	f
jQuery.parseXML	lf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.parseXML	plf/common/jquery-ui/external/jquery/jquery.js	/^};$/;"	f
jQuery.ready.promise	lf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.ready.promise	plf/common/jquery-ui/external/jquery/jquery.js	/^}$/;"	f
jQuery.speed	lf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
jQuery.speed	plf/common/jquery-ui/external/jquery/jquery.js	/^} );$/;"	f
keval	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="keval"><span class="id" type="definition">keval<\/span><\/a> {<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>) (<span class="id" type="var">k<\/span> : <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>) : <span class="id" type="definition">state<\/span> * <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a> :=<br\/>$/;"	a
keval_example	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="keval_example"><span class="id" type="definition">keval_example<\/span><\/a>:<br\/>$/;"	a
l<sub	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="l<sub>1<\/sub>"><span class="id" type="lemma">l<sub>1<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
l<sub	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="l<sub>2<\/sub>"><span class="id" type="lemma">l<sub>2<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
l<sub	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="l<sub>3<\/sub>"><span class="id" type="lemma">l<sub>3<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
l<sub	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="l<sub>3<\/sub>'"><span class="id" type="lemma">l<sub>3<\/sub>'<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
l<sub	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="l<sub>4<\/sub>"><span class="id" type="lemma">l<sub>4<\/sub><\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
lab1	lf/Preface.html	/^<a name="lab1"><\/a><h1 class="section">Welcome<\/h1>$/;"	a
lab1	plf/Preface.html	/^<a name="lab1"><\/a><h1 class="section">Welcome<\/h1>$/;"	a
lab10	lf/Preface.html	/^<a name="lab10"><\/a><h2 class="section">Exercises<\/h2>$/;"	a
lab10	plf/Equiv.html	/^<a name="lab10"><\/a><h2 class="section">Definitions<\/h2>$/;"	a
lab100	lf/Poly.html	/^<a name="lab100"><\/a><h3 class="section">Implicit Arguments<\/h3>$/;"	a
lab100	plf/Hoare2.html	/^<a name="lab100"><\/a><h2 class="section">Exercise: Power Series<\/h2>$/;"	a
lab101	lf/Poly.html	/^<a name="lab101"><\/a><h3 class="section">Supplying Type Arguments Explicitly<\/h3>$/;"	a
lab101	plf/Hoare2.html	/^<a name="lab101"><\/a><h4 class="section">Exercise: 4 stars, optional (dpow2_down)<\/h4>$/;"	a
lab102	lf/Poly.html	/^<a name="lab102"><\/a><h3 class="section">Exercises<\/h3>$/;"	a
lab102	plf/Hoare2.html	/^<a name="lab102"><\/a><h1 class="section">Weakest Preconditions (Optional)<\/h1>$/;"	a
lab103	lf/Poly.html	/^<a name="lab103"><\/a><h4 class="section">Exercise: 2 stars, optional (poly_exercises)<\/h4>$/;"	a
lab103	plf/Hoare2.html	/^<a name="lab103"><\/a><h4 class="section">Exercise: 1 star, optional (wp)<\/h4>$/;"	a
lab104	lf/Poly.html	/^<a name="lab104"><\/a><h4 class="section">Exercise: 2 stars, optional (more_poly_exercises)<\/h4>$/;"	a
lab104	plf/Hoare2.html	/^<a name="lab104"><\/a><h4 class="section">Exercise: 3 stars, advanced, optional (is_wp_formal)<\/h4>$/;"	a
lab105	lf/Poly.html	/^<a name="lab105"><\/a><h2 class="section">Polymorphic Pairs<\/h2>$/;"	a
lab105	plf/Hoare2.html	/^<a name="lab105"><\/a><h4 class="section">Exercise: 2 stars, advanced, optional (hoare_asgn_weakest)<\/h4>$/;"	a
lab106	lf/Poly.html	/^<a name="lab106"><\/a><h4 class="section">Exercise: 1 star, optional (combine_checks)<\/h4>$/;"	a
lab106	plf/Hoare2.html	/^<a name="lab106"><\/a><h4 class="section">Exercise: 2 stars, advanced, optional (hoare_havoc_weakest)<\/h4>$/;"	a
lab107	lf/Poly.html	/^<a name="lab107"><\/a><h4 class="section">Exercise: 2 stars, recommended (split)<\/h4>$/;"	a
lab107	plf/Hoare2.html	/^<a name="lab107"><\/a><h1 class="section">Formal Decorated Programs (Optional)<\/h1>$/;"	a
lab108	lf/Poly.html	/^<a name="lab108"><\/a><h2 class="section">Polymorphic Options<\/h2>$/;"	a
lab108	plf/Hoare2.html	/^<a name="lab108"><\/a><h2 class="section">Syntax<\/h2>$/;"	a
lab109	lf/Poly.html	/^<a name="lab109"><\/a><h4 class="section">Exercise: 1 star, optional (hd_error_poly)<\/h4>$/;"	a
lab109	plf/Hoare2.html	/^<a name="lab109"><\/a><h2 class="section">Extracting Verification Conditions<\/h2>$/;"	a
lab11	lf/Preface.html	/^<a name="lab11"><\/a><h2 class="section">Downloading the Coq Files<\/h2>$/;"	a
lab11	plf/Equiv.html	/^<a name="lab11"><\/a><h2 class="section">Simple Examples<\/h2>$/;"	a
lab110	lf/Poly.html	/^<a name="lab110"><\/a><h1 class="section">Functions as Data<\/h1>$/;"	a
lab110	plf/Hoare2.html	/^<a name="lab110"><\/a><h2 class="section">Automation<\/h2>$/;"	a
lab111	lf/Poly.html	/^<a name="lab111"><\/a><h2 class="section">Higher-Order Functions<\/h2>$/;"	a
lab111	plf/Hoare2.html	/^<a name="lab111"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab112	lf/Poly.html	/^<a name="lab112"><\/a><h2 class="section">Filter<\/h2>$/;"	a
lab112	plf/Hoare2.html	/^<a name="lab112"><\/a><h3 class="section">Swapping Using Addition and Subtraction<\/h3>$/;"	a
lab113	lf/Poly.html	/^<a name="lab113"><\/a><h2 class="section">Anonymous Functions<\/h2>$/;"	a
lab113	plf/Hoare2.html	/^<a name="lab113"><\/a><h3 class="section">Simple Conditionals<\/h3>$/;"	a
lab114	lf/Poly.html	/^<a name="lab114"><\/a><h4 class="section">Exercise: 2 stars (filter_even_gt<sub>7<\/sub>)<\/h4>$/;"	a
lab114	plf/Hoare2.html	/^<a name="lab114"><\/a><h3 class="section">Division<\/h3>$/;"	a
lab115	lf/Poly.html	/^<a name="lab115"><\/a><h4 class="section">Exercise: 3 stars (partition)<\/h4>$/;"	a
lab115	plf/Hoare2.html	/^<a name="lab115"><\/a><h3 class="section">Parity<\/h3>$/;"	a
lab116	lf/Poly.html	/^<a name="lab116"><\/a><h2 class="section">Map<\/h2>$/;"	a
lab116	plf/Hoare2.html	/^<a name="lab116"><\/a><h3 class="section">Square Roots<\/h3>$/;"	a
lab117	lf/Poly.html	/^<a name="lab117"><\/a><h3 class="section">Exercises<\/h3>$/;"	a
lab117	plf/Hoare2.html	/^<a name="lab117"><\/a><h3 class="section">Squaring<\/h3>$/;"	a
lab118	lf/Poly.html	/^<a name="lab118"><\/a><h4 class="section">Exercise: 3 stars (map_rev)<\/h4>$/;"	a
lab118	plf/Hoare2.html	/^<a name="lab118"><\/a><h3 class="section">Two loops<\/h3>$/;"	a
lab119	lf/Poly.html	/^<a name="lab119"><\/a><h4 class="section">Exercise: 2 stars, recommended (flat_map)<\/h4>$/;"	a
lab119	plf/Hoare2.html	/^<a name="lab119"><\/a><h3 class="section">Power Series<\/h3>$/;"	a
lab12	lf/Preface.html	/^<a name="lab12"><\/a><h2 class="section">Lecture Videos<\/h2>$/;"	a
lab12	plf/Equiv.html	/^<a name="lab12"><\/a><h4 class="section">Exercise: 2 stars (skip_right)<\/h4>$/;"	a
lab120	lf/Poly.html	/^<a name="lab120"><\/a><h4 class="section">Exercise: 2 stars, optional (implicit_args)<\/h4>$/;"	a
lab120	plf/Hoare2.html	/^<a name="lab120"><\/a><h4 class="section">Exercise: 3 stars, advanced (slow_assignment_dec)<\/h4>$/;"	a
lab121	lf/Poly.html	/^<a name="lab121"><\/a><h2 class="section">Fold<\/h2>$/;"	a
lab121	plf/Hoare2.html	/^<a name="lab121"><\/a><h4 class="section">Exercise: 4 stars, advanced (factorial_dec)<\/h4>$/;"	a
lab122	lf/Poly.html	/^<a name="lab122"><\/a><h4 class="section">Exercise: 1 star, advanced (fold_types_different)<\/h4>$/;"	a
lab122	plf/Hoare2.html	/^<a name="lab122"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (fib_eqn)<\/h4>$/;"	a
lab123	lf/Poly.html	/^<a name="lab123"><\/a><h2 class="section">Functions That Construct Functions<\/h2>$/;"	a
lab123	plf/Hoare2.html	/^<a name="lab123"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (fib)<\/h4>$/;"	a
lab124	lf/Poly.html	/^<a name="lab124"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab124	plf/Hoare2.html	/^<a name="lab124"><\/a><h4 class="section">Exercise: 5 stars, advanced, optional (improve_dcom)<\/h4>$/;"	a
lab125	lf/Poly.html	/^<a name="lab125"><\/a><h4 class="section">Exercise: 2 stars (fold_length)<\/h4>$/;"	a
lab125	plf/Hoare2.html	/^<a name="lab125"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (implement_dcom)<\/h4>$/;"	a
lab126	lf/Poly.html	/^<a name="lab126"><\/a><h4 class="section">Exercise: 3 stars (fold_map)<\/h4>$/;"	a
lab126	plf/HoareAsLogic.html	/^<a name="lab126"><\/a><h1 class="section">Definitions<\/h1>$/;"	a
lab127	lf/Poly.html	/^<a name="lab127"><\/a><h4 class="section">Exercise: 2 stars, advanced (currying)<\/h4>$/;"	a
lab127	plf/HoareAsLogic.html	/^<a name="lab127"><\/a><h1 class="section">Properties<\/h1>$/;"	a
lab128	lf/Poly.html	/^<a name="lab128"><\/a><h4 class="section">Exercise: 2 stars, advanced (nth_error_informal)<\/h4>$/;"	a
lab128	plf/HoareAsLogic.html	/^<a name="lab128"><\/a><h4 class="section">Exercise: 2 stars (hoare_proof_sound)<\/h4>$/;"	a
lab129	lf/Poly.html	/^<a name="lab129"><\/a><h4 class="section">Exercise: 4 stars, advanced (church_numerals)<\/h4>$/;"	a
lab129	plf/HoareAsLogic.html	/^<a name="lab129"><\/a><h4 class="section">Exercise: 1 star (wp_is_precondition)<\/h4>$/;"	a
lab13	lf/Preface.html	/^<a name="lab13"><\/a><h1 class="section">Note for Instructors<\/h1>$/;"	a
lab13	plf/Equiv.html	/^<a name="lab13"><\/a><h4 class="section">Exercise: 2 stars, recommended (IFB_false)<\/h4>$/;"	a
lab130	lf/Tactics.html	/^<a name="lab130"><\/a><h1 class="section">The <span class="inlinecode"><span class="id" type="tactic">apply<\/span><\/span> Tactic<\/h1>$/;"	a
lab130	plf/HoareAsLogic.html	/^<a name="lab130"><\/a><h4 class="section">Exercise: 1 star (wp_is_weakest)<\/h4>$/;"	a
lab131	lf/Tactics.html	/^<a name="lab131"><\/a><h4 class="section">Exercise: 2 stars, optional (silly_ex)<\/h4>$/;"	a
lab131	plf/HoareAsLogic.html	/^<a name="lab131"><\/a><h4 class="section">Exercise: 5 stars (hoare_proof_complete)<\/h4>$/;"	a
lab132	lf/Tactics.html	/^<a name="lab132"><\/a><h4 class="section">Exercise: 3 stars (apply_exercise1)<\/h4>$/;"	a
lab132	plf/Smallstep.html	/^<a name="lab132"><\/a><h1 class="section">A Toy Language<\/h1>$/;"	a
lab133	lf/Tactics.html	/^<a name="lab133"><\/a><h4 class="section">Exercise: 1 star, optional (apply_rewrite)<\/h4>$/;"	a
lab133	plf/Smallstep.html	/^<a name="lab133"><\/a><h4 class="section">Exercise: 1 star (test_step_2)<\/h4>$/;"	a
lab134	lf/Tactics.html	/^<a name="lab134"><\/a><h1 class="section">The <span class="inlinecode"><span class="id" type="tactic">apply<\/span><\/span> <span class="inlinecode">...<\/span> <span class="inlinecode"><span class="id" type="keyword">with<\/span><\/span> <span class="inlinecode">...<\/span> Tactic<\/h1>$/;"	a
lab134	plf/Smallstep.html	/^<a name="lab134"><\/a><h1 class="section">Relations<\/h1>$/;"	a
lab135	lf/Tactics.html	/^<a name="lab135"><\/a><h4 class="section">Exercise: 3 stars, optional (apply_with_exercise)<\/h4>$/;"	a
lab135	plf/Smallstep.html	/^<a name="lab135"><\/a><h2 class="section">Values<\/h2>$/;"	a
lab136	lf/Tactics.html	/^<a name="lab136"><\/a><h1 class="section">The <span class="inlinecode"><span class="id" type="tactic">inversion<\/span><\/span> Tactic<\/h1>$/;"	a
lab136	plf/Smallstep.html	/^<a name="lab136"><\/a><h4 class="section">Exercise: 3 stars, recommended (redo_determinism)<\/h4>$/;"	a
lab137	lf/Tactics.html	/^<a name="lab137"><\/a><h4 class="section">Exercise: 1 star (inversion_ex<sub>3<\/sub>)<\/h4>$/;"	a
lab137	plf/Smallstep.html	/^<a name="lab137"><\/a><h2 class="section">Strong Progress and Normal Forms<\/h2>$/;"	a
lab138	lf/Tactics.html	/^<a name="lab138"><\/a><h4 class="section">Exercise: 1 star (inversion_ex<sub>6<\/sub>)<\/h4>$/;"	a
lab138	plf/Smallstep.html	/^<a name="lab138"><\/a><h4 class="section">Exercise: 3 stars, optional (value_not_same_as_normal_form1)<\/h4>$/;"	a
lab139	lf/Tactics.html	/^<a name="lab139"><\/a><h1 class="section">Using Tactics on Hypotheses<\/h1>$/;"	a
lab139	plf/Smallstep.html	/^<a name="lab139"><\/a><h4 class="section">Exercise: 2 stars, optional (value_not_same_as_normal_form2)<\/h4>$/;"	a
lab14	lf/Preface.html	/^<a name="lab14"><\/a><h1 class="section">Translations<\/h1>$/;"	a
lab14	plf/Equiv.html	/^<a name="lab14"><\/a><h4 class="section">Exercise: 3 stars (swap_if_branches)<\/h4>$/;"	a
lab140	lf/Tactics.html	/^<a name="lab140"><\/a><h4 class="section">Exercise: 3 stars, recommended (plus_n_n_injective)<\/h4>$/;"	a
lab140	plf/Smallstep.html	/^<a name="lab140"><\/a><h4 class="section">Exercise: 3 stars, optional (value_not_same_as_normal_form3)<\/h4>$/;"	a
lab141	lf/Tactics.html	/^<a name="lab141"><\/a><h1 class="section">Varying the Induction Hypothesis<\/h1>$/;"	a
lab141	plf/Smallstep.html	/^<a name="lab141"><\/a><h3 class="section">Additional Exercises<\/h3>$/;"	a
lab142	lf/Tactics.html	/^<a name="lab142"><\/a><h4 class="section">Exercise: 2 stars (beq_nat_true)<\/h4>$/;"	a
lab142	plf/Smallstep.html	/^<a name="lab142"><\/a><h4 class="section">Exercise: 1 star (smallstep_bools)<\/h4>$/;"	a
lab143	lf/Tactics.html	/^<a name="lab143"><\/a><h4 class="section">Exercise: 2 stars, advanced (beq_nat_true_informal)<\/h4>$/;"	a
lab143	plf/Smallstep.html	/^<a name="lab143"><\/a><h4 class="section">Exercise: 3 stars, optional (progress_bool)<\/h4>$/;"	a
lab144	lf/Tactics.html	/^<a name="lab144"><\/a><h4 class="section">Exercise: 3 stars, recommended (gen_dep_practice)<\/h4>$/;"	a
lab144	plf/Smallstep.html	/^<a name="lab144"><\/a><h4 class="section">Exercise: 2 stars, optional (step_deterministic)<\/h4>$/;"	a
lab145	lf/Tactics.html	/^<a name="lab145"><\/a><h1 class="section">Unfolding Definitions<\/h1>$/;"	a
lab145	plf/Smallstep.html	/^<a name="lab145"><\/a><h4 class="section">Exercise: 2 stars (smallstep_bool_shortcut)<\/h4>$/;"	a
lab146	lf/Tactics.html	/^<a name="lab146"><\/a><h1 class="section">Using <span class="inlinecode"><span class="id" type="tactic">destruct<\/span><\/span> on Compound Expressions<\/h1>$/;"	a
lab146	plf/Smallstep.html	/^<a name="lab146"><\/a><h4 class="section">Exercise: 3 stars, optional (properties_of_altered_step)<\/h4>$/;"	a
lab147	lf/Tactics.html	/^<a name="lab147"><\/a><h4 class="section">Exercise: 3 stars, optional (combine_split)<\/h4>$/;"	a
lab147	plf/Smallstep.html	/^<a name="lab147"><\/a><h1 class="section">Multi-Step Reduction<\/h1>$/;"	a
lab148	lf/Tactics.html	/^<a name="lab148"><\/a><h4 class="section">Exercise: 2 stars (destruct_eqn_practice)<\/h4>$/;"	a
lab148	plf/Smallstep.html	/^<a name="lab148"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab149	lf/Tactics.html	/^<a name="lab149"><\/a><h1 class="section">Review<\/h1>$/;"	a
lab149	plf/Smallstep.html	/^<a name="lab149"><\/a><h4 class="section">Exercise: 1 star, optional (test_multistep_2)<\/h4>$/;"	a
lab15	lf/Preface.html	/^<a name="lab15"><\/a><h1 class="section">Thanks<\/h1>$/;"	a
lab15	plf/Equiv.html	/^<a name="lab15"><\/a><h4 class="section">Exercise: 2 stars, advanced, optional (WHILE_false_informal)<\/h4>$/;"	a
lab150	lf/Tactics.html	/^<a name="lab150"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab150	plf/Smallstep.html	/^<a name="lab150"><\/a><h4 class="section">Exercise: 1 star, optional (test_multistep_3)<\/h4>$/;"	a
lab151	lf/Tactics.html	/^<a name="lab151"><\/a><h4 class="section">Exercise: 3 stars (beq_nat_sym)<\/h4>$/;"	a
lab151	plf/Smallstep.html	/^<a name="lab151"><\/a><h4 class="section">Exercise: 2 stars (test_multistep_4)<\/h4>$/;"	a
lab152	lf/Tactics.html	/^<a name="lab152"><\/a><h4 class="section">Exercise: 3 stars, advanced? (beq_nat_sym_informal)<\/h4>$/;"	a
lab152	plf/Smallstep.html	/^<a name="lab152"><\/a><h2 class="section">Normal Forms Again<\/h2>$/;"	a
lab153	lf/Tactics.html	/^<a name="lab153"><\/a><h4 class="section">Exercise: 3 stars, optional (beq_nat_trans)<\/h4>$/;"	a
lab153	plf/Smallstep.html	/^<a name="lab153"><\/a><h4 class="section">Exercise: 3 stars, optional (normal_forms_unique)<\/h4>$/;"	a
lab154	lf/Tactics.html	/^<a name="lab154"><\/a><h4 class="section">Exercise: 3 stars, advanced (split_combine)<\/h4>$/;"	a
lab154	plf/Smallstep.html	/^<a name="lab154"><\/a><h4 class="section">Exercise: 2 stars (multistep_congr_2)<\/h4>$/;"	a
lab155	lf/Tactics.html	/^<a name="lab155"><\/a><h4 class="section">Exercise: 3 stars, advanced (filter_exercise)<\/h4>$/;"	a
lab155	plf/Smallstep.html	/^<a name="lab155"><\/a><h2 class="section">Equivalence of Big-Step and Small-Step<\/h2>$/;"	a
lab156	lf/Tactics.html	/^<a name="lab156"><\/a><h4 class="section">Exercise: 4 stars, advanced, recommended (forall_exists_challenge)<\/h4>$/;"	a
lab156	plf/Smallstep.html	/^<a name="lab156"><\/a><h4 class="section">Exercise: 3 stars (eval__multistep)<\/h4>$/;"	a
lab157	lf/Logic.html	/^<a name="lab157"><\/a><h1 class="section">Logical Connectives<\/h1>$/;"	a
lab157	plf/Smallstep.html	/^<a name="lab157"><\/a><h4 class="section">Exercise: 3 stars, advanced (eval__multistep_inf)<\/h4>$/;"	a
lab158	lf/Logic.html	/^<a name="lab158"><\/a><h2 class="section">Conjunction<\/h2>$/;"	a
lab158	plf/Smallstep.html	/^<a name="lab158"><\/a><h4 class="section">Exercise: 3 stars (step__eval)<\/h4>$/;"	a
lab159	lf/Logic.html	/^<a name="lab159"><\/a><h4 class="section">Exercise: 2 stars (and_exercise)<\/h4>$/;"	a
lab159	plf/Smallstep.html	/^<a name="lab159"><\/a><h4 class="section">Exercise: 3 stars (multistep__eval)<\/h4>$/;"	a
lab16	lf/Basics.html	/^<a name="lab16"><\/a><h1 class="section">Introduction<\/h1>$/;"	a
lab16	plf/Equiv.html	/^<a name="lab16"><\/a><h4 class="section">Exercise: 2 stars, optional (WHILE_true_nonterm_informal)<\/h4>$/;"	a
lab160	lf/Logic.html	/^<a name="lab160"><\/a><h4 class="section">Exercise: 1 star, optional (proj2)<\/h4>$/;"	a
lab160	plf/Smallstep.html	/^<a name="lab160"><\/a><h2 class="section">Additional Exercises<\/h2>$/;"	a
lab161	lf/Logic.html	/^<a name="lab161"><\/a><h4 class="section">Exercise: 2 stars (and_assoc)<\/h4>$/;"	a
lab161	plf/Smallstep.html	/^<a name="lab161"><\/a><h4 class="section">Exercise: 3 stars, optional (interp_tm)<\/h4>$/;"	a
lab162	lf/Logic.html	/^<a name="lab162"><\/a><h2 class="section">Disjunction<\/h2>$/;"	a
lab162	plf/Smallstep.html	/^<a name="lab162"><\/a><h4 class="section">Exercise: 4 stars (combined_properties)<\/h4>$/;"	a
lab163	lf/Logic.html	/^<a name="lab163"><\/a><h4 class="section">Exercise: 1 star (mult_eq_0)<\/h4>$/;"	a
lab163	plf/Smallstep.html	/^<a name="lab163"><\/a><h1 class="section">Small-Step Imp<\/h1>$/;"	a
lab164	lf/Logic.html	/^<a name="lab164"><\/a><h4 class="section">Exercise: 1 star (or_commut)<\/h4>$/;"	a
lab164	plf/Smallstep.html	/^<a name="lab164"><\/a><h1 class="section">Concurrent Imp<\/h1>$/;"	a
lab165	lf/Logic.html	/^<a name="lab165"><\/a><h2 class="section">Falsehood and Negation<\/h2>$/;"	a
lab165	plf/Smallstep.html	/^<a name="lab165"><\/a><h4 class="section">Exercise: 3 stars, optional (par_body_n__Sn)<\/h4>$/;"	a
lab166	lf/Logic.html	/^<a name="lab166"><\/a><h4 class="section">Exercise: 2 stars, optional (not_implies_our_not)<\/h4>$/;"	a
lab166	plf/Smallstep.html	/^<a name="lab166"><\/a><h4 class="section">Exercise: 3 stars, optional (par_body_n)<\/h4>$/;"	a
lab167	lf/Logic.html	/^<a name="lab167"><\/a><h4 class="section">Exercise: 2 stars, advanced, recommended (double_neg_inf)<\/h4>$/;"	a
lab167	plf/Smallstep.html	/^<a name="lab167"><\/a><h1 class="section">A Small-Step Stack Machine<\/h1>$/;"	a
lab168	lf/Logic.html	/^<a name="lab168"><\/a><h4 class="section">Exercise: 2 stars, recommended (contrapositive)<\/h4>$/;"	a
lab168	plf/Smallstep.html	/^<a name="lab168"><\/a><h4 class="section">Exercise: 3 stars, advanced (compiler_is_correct)<\/h4>$/;"	a
lab169	lf/Logic.html	/^<a name="lab169"><\/a><h4 class="section">Exercise: 1 star (not_both_true_and_false)<\/h4>$/;"	a
lab169	plf/Types.html	/^<a name="lab169"><\/a><h1 class="section">Typed Arithmetic Expressions<\/h1>$/;"	a
lab17	lf/Basics.html	/^<a name="lab17"><\/a><h1 class="section">Data and Functions<\/h1>$/;"	a
lab17	plf/Equiv.html	/^<a name="lab17"><\/a><h4 class="section">Exercise: 2 stars, recommended (WHILE_true)<\/h4>$/;"	a
lab170	lf/Logic.html	/^<a name="lab170"><\/a><h4 class="section">Exercise: 1 star, advanced (informal_not_PNP)<\/h4>$/;"	a
lab170	plf/Types.html	/^<a name="lab170"><\/a><h2 class="section">Syntax<\/h2>$/;"	a
lab171	lf/Logic.html	/^<a name="lab171"><\/a><h2 class="section">Truth<\/h2>$/;"	a
lab171	plf/Types.html	/^<a name="lab171"><\/a><h2 class="section">Operational Semantics<\/h2>$/;"	a
lab172	lf/Logic.html	/^<a name="lab172"><\/a><h2 class="section">Logical Equivalence<\/h2>$/;"	a
lab172	plf/Types.html	/^<a name="lab172"><\/a><h2 class="section">Normal Forms and Values<\/h2>$/;"	a
lab173	lf/Logic.html	/^<a name="lab173"><\/a><h4 class="section">Exercise: 1 star, optional (iff_properties)<\/h4>$/;"	a
lab173	plf/Types.html	/^<a name="lab173"><\/a><h4 class="section">Exercise: 2 stars (some_term_is_stuck)<\/h4>$/;"	a
lab174	lf/Logic.html	/^<a name="lab174"><\/a><h4 class="section">Exercise: 3 stars (or_distributes_over_and)<\/h4>$/;"	a
lab174	plf/Types.html	/^<a name="lab174"><\/a><h4 class="section">Exercise: 3 stars (value_is_nf)<\/h4>$/;"	a
lab175	lf/Logic.html	/^<a name="lab175"><\/a><h2 class="section">Existential Quantification<\/h2>$/;"	a
lab175	plf/Types.html	/^<a name="lab175"><\/a><h4 class="section">Exercise: 3 stars, optional (step_deterministic)<\/h4>$/;"	a
lab176	lf/Logic.html	/^<a name="lab176"><\/a><h4 class="section">Exercise: 1 star (dist_not_exists)<\/h4>$/;"	a
lab176	plf/Types.html	/^<a name="lab176"><\/a><h2 class="section">Typing<\/h2>$/;"	a
lab177	lf/Logic.html	/^<a name="lab177"><\/a><h4 class="section">Exercise: 2 stars (dist_exists_or)<\/h4>$/;"	a
lab177	plf/Types.html	/^<a name="lab177"><\/a><h4 class="section">Exercise: 1 star, optional (succ_hastype_nat__hastype_nat)<\/h4>$/;"	a
lab178	lf/Logic.html	/^<a name="lab178"><\/a><h1 class="section">Programming with Propositions<\/h1>$/;"	a
lab178	plf/Types.html	/^<a name="lab178"><\/a><h3 class="section">Canonical forms<\/h3>$/;"	a
lab179	lf/Logic.html	/^<a name="lab179"><\/a><h4 class="section">Exercise: 2 stars (In_map_iff)<\/h4>$/;"	a
lab179	plf/Types.html	/^<a name="lab179"><\/a><h2 class="section">Progress<\/h2>$/;"	a
lab18	lf/Basics.html	/^<a name="lab18"><\/a><h2 class="section">Enumerated Types<\/h2>$/;"	a
lab18	plf/Equiv.html	/^<a name="lab18"><\/a><h4 class="section">Exercise: 2 stars, optional (seq_assoc)<\/h4>$/;"	a
lab180	lf/Logic.html	/^<a name="lab180"><\/a><h4 class="section">Exercise: 2 stars (in_app_iff)<\/h4>$/;"	a
lab180	plf/Types.html	/^<a name="lab180"><\/a><h4 class="section">Exercise: 3 stars (finish_progress)<\/h4>$/;"	a
lab181	lf/Logic.html	/^<a name="lab181"><\/a><h4 class="section">Exercise: 3 stars, recommended (All)<\/h4>$/;"	a
lab181	plf/Types.html	/^<a name="lab181"><\/a><h4 class="section">Exercise: 3 stars, advanced (finish_progress_informal)<\/h4>$/;"	a
lab182	lf/Logic.html	/^<a name="lab182"><\/a><h4 class="section">Exercise: 3 stars (combine_odd_even)<\/h4>$/;"	a
lab182	plf/Types.html	/^<a name="lab182"><\/a><h2 class="section">Type Preservation<\/h2>$/;"	a
lab183	lf/Logic.html	/^<a name="lab183"><\/a><h1 class="section">Applying Theorems to Arguments<\/h1>$/;"	a
lab183	plf/Types.html	/^<a name="lab183"><\/a><h4 class="section">Exercise: 2 stars (finish_preservation)<\/h4>$/;"	a
lab184	lf/Logic.html	/^<a name="lab184"><\/a><h1 class="section">Coq vs. Set Theory<\/h1>$/;"	a
lab184	plf/Types.html	/^<a name="lab184"><\/a><h4 class="section">Exercise: 3 stars, advanced (finish_preservation_informal)<\/h4>$/;"	a
lab185	lf/Logic.html	/^<a name="lab185"><\/a><h2 class="section">Functional Extensionality<\/h2>$/;"	a
lab185	plf/Types.html	/^<a name="lab185"><\/a><h4 class="section">Exercise: 3 stars (preservation_alternate_proof)<\/h4>$/;"	a
lab186	lf/Logic.html	/^<a name="lab186"><\/a><h4 class="section">Exercise: 4 stars (tr_rev)<\/h4>$/;"	a
lab186	plf/Types.html	/^<a name="lab186"><\/a><h2 class="section">Type Soundness<\/h2>$/;"	a
lab187	lf/Logic.html	/^<a name="lab187"><\/a><h2 class="section">Propositions and Booleans<\/h2>$/;"	a
lab187	plf/Types.html	/^<a name="lab187"><\/a><h1 class="section">Aside: the <span class="inlinecode"><span class="id" type="var">normalize<\/span><\/span> Tactic<\/h1>$/;"	a
lab188	lf/Logic.html	/^<a name="lab188"><\/a><h4 class="section">Exercise: 3 stars (evenb_double_conv)<\/h4>$/;"	a
lab188	plf/Types.html	/^<a name="lab188"><\/a><h4 class="section">Exercise: 1 star (normalize_ex)<\/h4>$/;"	a
lab189	lf/Logic.html	/^<a name="lab189"><\/a><h4 class="section">Exercise: 2 stars (logical_connectives)<\/h4>$/;"	a
lab189	plf/Types.html	/^<a name="lab189"><\/a><h4 class="section">Exercise: 1 star, optional (normalize_ex')<\/h4>$/;"	a
lab19	lf/Basics.html	/^<a name="lab19"><\/a><h2 class="section">Days of the Week<\/h2>$/;"	a
lab19	plf/Equiv.html	/^<a name="lab19"><\/a><h4 class="section">Exercise: 2 stars, recommended (assign_aequiv)<\/h4>$/;"	a
lab190	lf/Logic.html	/^<a name="lab190"><\/a><h4 class="section">Exercise: 1 star (beq_nat_false_iff)<\/h4>$/;"	a
lab190	plf/Types.html	/^<a name="lab190"><\/a><h2 class="section">Additional Exercises<\/h2>$/;"	a
lab191	lf/Logic.html	/^<a name="lab191"><\/a><h4 class="section">Exercise: 3 stars (beq_list)<\/h4>$/;"	a
lab191	plf/Types.html	/^<a name="lab191"><\/a><h4 class="section">Exercise: 2 stars, recommended (subject_expansion)<\/h4>$/;"	a
lab192	lf/Logic.html	/^<a name="lab192"><\/a><h4 class="section">Exercise: 2 stars, recommended (All_forallb)<\/h4>$/;"	a
lab192	plf/Types.html	/^<a name="lab192"><\/a><h4 class="section">Exercise: 2 stars (variation1)<\/h4>$/;"	a
lab193	lf/Logic.html	/^<a name="lab193"><\/a><h2 class="section">Classical vs. Constructive Logic<\/h2>$/;"	a
lab193	plf/Types.html	/^<a name="lab193"><\/a><h4 class="section">Exercise: 2 stars (variation2)<\/h4>$/;"	a
lab194	lf/Logic.html	/^<a name="lab194"><\/a><h4 class="section">Exercise: 3 stars (excluded_middle_irrefutable)<\/h4>$/;"	a
lab194	plf/Types.html	/^<a name="lab194"><\/a><h4 class="section">Exercise: 2 stars, optional (variation3)<\/h4>$/;"	a
lab195	lf/Logic.html	/^<a name="lab195"><\/a><h4 class="section">Exercise: 3 stars, advanced (not_exists_dist)<\/h4>$/;"	a
lab195	plf/Types.html	/^<a name="lab195"><\/a><h4 class="section">Exercise: 2 stars, optional (variation4)<\/h4>$/;"	a
lab196	lf/Logic.html	/^<a name="lab196"><\/a><h4 class="section">Exercise: 5 stars, optional (classical_axioms)<\/h4>$/;"	a
lab196	plf/Types.html	/^<a name="lab196"><\/a><h4 class="section">Exercise: 2 stars, optional (variation5)<\/h4>$/;"	a
lab197	lf/IndProp.html	/^<a name="lab197"><\/a><h1 class="section">Inductively Defined Propositions<\/h1>$/;"	a
lab197	plf/Types.html	/^<a name="lab197"><\/a><h4 class="section">Exercise: 2 stars, optional (variation6)<\/h4>$/;"	a
lab198	lf/IndProp.html	/^<a name="lab198"><\/a><h4 class="section">Exercise: 1 star (ev_double)<\/h4>$/;"	a
lab198	plf/Types.html	/^<a name="lab198"><\/a><h4 class="section">Exercise: 3 stars, optional (more_variations)<\/h4>$/;"	a
lab199	lf/IndProp.html	/^<a name="lab199"><\/a><h1 class="section">Using Evidence in Proofs<\/h1>$/;"	a
lab199	plf/Types.html	/^<a name="lab199"><\/a><h4 class="section">Exercise: 1 star (remove_predzero)<\/h4>$/;"	a
lab2	lf/Preface.html	/^<a name="lab2"><\/a><h1 class="section">Overview<\/h1>$/;"	a
lab2	plf/Preface.html	/^<a name="lab2"><\/a><h1 class="section">Overview<\/h1>$/;"	a
lab20	lf/Basics.html	/^<a name="lab20"><\/a><h2 class="section">Homework Submission Guidelines<\/h2>$/;"	a
lab20	plf/Equiv.html	/^<a name="lab20"><\/a><h4 class="section">Exercise: 2 stars (equiv_classes)<\/h4>$/;"	a
lab200	lf/IndProp.html	/^<a name="lab200"><\/a><h2 class="section">Inversion on Evidence<\/h2>$/;"	a
lab200	plf/Types.html	/^<a name="lab200"><\/a><h4 class="section">Exercise: 4 stars, advanced (prog_pres_bigstep)<\/h4>$/;"	a
lab201	lf/IndProp.html	/^<a name="lab201"><\/a><h4 class="section">Exercise: 1 star (inversion_practice)<\/h4>$/;"	a
lab201	plf/Stlc.html	/^<a name="lab201"><\/a><h1 class="section">Overview<\/h1>$/;"	a
lab202	lf/IndProp.html	/^<a name="lab202"><\/a><h2 class="section">Induction on Evidence<\/h2>$/;"	a
lab202	plf/Stlc.html	/^<a name="lab202"><\/a><h1 class="section">Syntax<\/h1>$/;"	a
lab203	lf/IndProp.html	/^<a name="lab203"><\/a><h4 class="section">Exercise: 2 stars (ev_sum)<\/h4>$/;"	a
lab203	plf/Stlc.html	/^<a name="lab203"><\/a><h2 class="section">Types<\/h2>$/;"	a
lab204	lf/IndProp.html	/^<a name="lab204"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (ev_alternate)<\/h4>$/;"	a
lab204	plf/Stlc.html	/^<a name="lab204"><\/a><h2 class="section">Terms<\/h2>$/;"	a
lab205	lf/IndProp.html	/^<a name="lab205"><\/a><h4 class="section">Exercise: 3 stars, advanced, recommended (ev_ev__ev)<\/h4>$/;"	a
lab205	plf/Stlc.html	/^<a name="lab205"><\/a><h1 class="section">Operational Semantics<\/h1>$/;"	a
lab206	lf/IndProp.html	/^<a name="lab206"><\/a><h4 class="section">Exercise: 3 stars, optional (ev_plus_plus)<\/h4>$/;"	a
lab206	plf/Stlc.html	/^<a name="lab206"><\/a><h2 class="section">Values<\/h2>$/;"	a
lab207	lf/IndProp.html	/^<a name="lab207"><\/a><h1 class="section">Inductive Relations<\/h1>$/;"	a
lab207	plf/Stlc.html	/^<a name="lab207"><\/a><h2 class="section">Substitution<\/h2>$/;"	a
lab208	lf/IndProp.html	/^<a name="lab208"><\/a><h4 class="section">Exercise: 2 stars, optional (total_relation)<\/h4>$/;"	a
lab208	plf/Stlc.html	/^<a name="lab208"><\/a><h4 class="section">Exercise: 3 stars (substi)<\/h4>$/;"	a
lab209	lf/IndProp.html	/^<a name="lab209"><\/a><h4 class="section">Exercise: 2 stars, optional (empty_relation)<\/h4>$/;"	a
lab209	plf/Stlc.html	/^<a name="lab209"><\/a><h2 class="section">Reduction<\/h2>$/;"	a
lab21	lf/Basics.html	/^<a name="lab21"><\/a><h2 class="section">Booleans<\/h2>$/;"	a
lab21	plf/Equiv.html	/^<a name="lab21"><\/a><h1 class="section">Properties of Behavioral Equivalence<\/h1>$/;"	a
lab210	lf/IndProp.html	/^<a name="lab210"><\/a><h4 class="section">Exercise: 3 stars, optional (le_exercises)<\/h4>$/;"	a
lab210	plf/Stlc.html	/^<a name="lab210"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab211	lf/IndProp.html	/^<a name="lab211"><\/a><h4 class="section">Exercise: 2 stars, optional (leb_iff)<\/h4>$/;"	a
lab211	plf/Stlc.html	/^<a name="lab211"><\/a><h4 class="section">Exercise: 2 stars (step_example5)<\/h4>$/;"	a
lab212	lf/IndProp.html	/^<a name="lab212"><\/a><h4 class="section">Exercise: 3 stars, recommended (R_provability)<\/h4>$/;"	a
lab212	plf/Stlc.html	/^<a name="lab212"><\/a><h1 class="section">Typing<\/h1>$/;"	a
lab213	lf/IndProp.html	/^<a name="lab213"><\/a><h4 class="section">Exercise: 3 stars, optional (R_fact)<\/h4>$/;"	a
lab213	plf/Stlc.html	/^<a name="lab213"><\/a><h2 class="section">Contexts<\/h2>$/;"	a
lab214	lf/IndProp.html	/^<a name="lab214"><\/a><h4 class="section">Exercise: 4 stars, advanced (subsequence)<\/h4>$/;"	a
lab214	plf/Stlc.html	/^<a name="lab214"><\/a><h2 class="section">Typing Relation<\/h2>$/;"	a
lab215	lf/IndProp.html	/^<a name="lab215"><\/a><h4 class="section">Exercise: 2 stars, optional (R_provability2)<\/h4>$/;"	a
lab215	plf/Stlc.html	/^<a name="lab215"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab216	lf/IndProp.html	/^<a name="lab216"><\/a><h1 class="section">Case Study: Regular Expressions<\/h1>$/;"	a
lab216	plf/Stlc.html	/^<a name="lab216"><\/a><h4 class="section">Exercise: 2 stars, optional (typing_example_2_full)<\/h4>$/;"	a
lab217	lf/IndProp.html	/^<a name="lab217"><\/a><h4 class="section">Exercise: 3 stars (exp_match_ex<sub>1<\/sub>)<\/h4>$/;"	a
lab217	plf/Stlc.html	/^<a name="lab217"><\/a><h4 class="section">Exercise: 2 stars (typing_example_3)<\/h4>$/;"	a
lab218	lf/IndProp.html	/^<a name="lab218"><\/a><h4 class="section">Exercise: 4 stars (reg_exp_of_list)<\/h4>$/;"	a
lab218	plf/Stlc.html	/^<a name="lab218"><\/a><h4 class="section">Exercise: 3 stars, optional (typing_nonexample_3)<\/h4>$/;"	a
lab219	lf/IndProp.html	/^<a name="lab219"><\/a><h4 class="section">Exercise: 4 stars (re_not_empty)<\/h4>$/;"	a
lab219	plf/StlcProp.html	/^<a name="lab219"><\/a><h1 class="section">Canonical Forms<\/h1>$/;"	a
lab22	lf/Basics.html	/^<a name="lab22"><\/a><h4 class="section">Exercise: 1 star (nandb)<\/h4>$/;"	a
lab22	plf/Equiv.html	/^<a name="lab22"><\/a><h2 class="section">Behavioral Equivalence Is an Equivalence<\/h2>$/;"	a
lab220	lf/IndProp.html	/^<a name="lab220"><\/a><h2 class="section">The <span class="inlinecode"><span class="id" type="var">remember<\/span><\/span> Tactic<\/h2>$/;"	a
lab220	plf/StlcProp.html	/^<a name="lab220"><\/a><h1 class="section">Progress<\/h1>$/;"	a
lab221	lf/IndProp.html	/^<a name="lab221"><\/a><h4 class="section">Exercise: 4 stars (exp_match_ex<sub>2<\/sub>)<\/h4>$/;"	a
lab221	plf/StlcProp.html	/^<a name="lab221"><\/a><h4 class="section">Exercise: 3 stars, advanced (progress_from_term_ind)<\/h4>$/;"	a
lab222	lf/IndProp.html	/^<a name="lab222"><\/a><h4 class="section">Exercise: 5 stars, advanced (pumping)<\/h4>$/;"	a
lab222	plf/StlcProp.html	/^<a name="lab222"><\/a><h1 class="section">Preservation<\/h1>$/;"	a
lab223	lf/IndProp.html	/^<a name="lab223"><\/a><h1 class="section">Case Study: Improving Reflection<\/h1>$/;"	a
lab223	plf/StlcProp.html	/^<a name="lab223"><\/a><h2 class="section">Free Occurrences<\/h2>$/;"	a
lab224	lf/IndProp.html	/^<a name="lab224"><\/a><h4 class="section">Exercise: 2 stars, recommended (reflect_iff)<\/h4>$/;"	a
lab224	plf/StlcProp.html	/^<a name="lab224"><\/a><h4 class="section">Exercise: 1 star (afi)<\/h4>$/;"	a
lab225	lf/IndProp.html	/^<a name="lab225"><\/a><h4 class="section">Exercise: 3 stars, recommended (beq_natP_practice)<\/h4>$/;"	a
lab225	plf/StlcProp.html	/^<a name="lab225"><\/a><h2 class="section">Substitution<\/h2>$/;"	a
lab226	lf/IndProp.html	/^<a name="lab226"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab226	plf/StlcProp.html	/^<a name="lab226"><\/a><h4 class="section">Exercise: 2 stars, optional (typable_empty__closed)<\/h4>$/;"	a
lab227	lf/IndProp.html	/^<a name="lab227"><\/a><h4 class="section">Exercise: 3 stars, recommended (nostutter)<\/h4>$/;"	a
lab227	plf/StlcProp.html	/^<a name="lab227"><\/a><h2 class="section">Main Theorem<\/h2>$/;"	a
lab228	lf/IndProp.html	/^<a name="lab228"><\/a><h4 class="section">Exercise: 4 stars, advanced (filter_challenge)<\/h4>$/;"	a
lab228	plf/StlcProp.html	/^<a name="lab228"><\/a><h4 class="section">Exercise: 2 stars, recommended (subject_expansion_stlc)<\/h4>$/;"	a
lab229	lf/IndProp.html	/^<a name="lab229"><\/a><h4 class="section">Exercise: 5 stars, advanced, optional (filter_challenge_2)<\/h4>$/;"	a
lab229	plf/StlcProp.html	/^<a name="lab229"><\/a><h1 class="section">Type Soundness<\/h1>$/;"	a
lab23	lf/Basics.html	/^<a name="lab23"><\/a><h4 class="section">Exercise: 1 star (andb3)<\/h4>$/;"	a
lab23	plf/Equiv.html	/^<a name="lab23"><\/a><h2 class="section">Behavioral Equivalence Is a Congruence<\/h2>$/;"	a
lab230	lf/IndProp.html	/^<a name="lab230"><\/a><h4 class="section">Exercise: 4 stars, optional (palindromes)<\/h4>$/;"	a
lab230	plf/StlcProp.html	/^<a name="lab230"><\/a><h4 class="section">Exercise: 2 stars, optional (type_soundness)<\/h4>$/;"	a
lab231	lf/IndProp.html	/^<a name="lab231"><\/a><h4 class="section">Exercise: 5 stars, optional (palindrome_converse)<\/h4>$/;"	a
lab231	plf/StlcProp.html	/^<a name="lab231"><\/a><h1 class="section">Uniqueness of Types<\/h1>$/;"	a
lab232	lf/IndProp.html	/^<a name="lab232"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (NoDup)<\/h4>$/;"	a
lab232	plf/StlcProp.html	/^<a name="lab232"><\/a><h4 class="section">Exercise: 3 stars (types_unique)<\/h4>$/;"	a
lab233	lf/IndProp.html	/^<a name="lab233"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (pigeonhole principle)<\/h4>$/;"	a
lab233	plf/StlcProp.html	/^<a name="lab233"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab234	lf/Maps.html	/^<a name="lab234"><\/a><h1 class="section">The Coq Standard Library<\/h1>$/;"	a
lab234	plf/StlcProp.html	/^<a name="lab234"><\/a><h4 class="section">Exercise: 1 star (progress_preservation_statement)<\/h4>$/;"	a
lab235	lf/Maps.html	/^<a name="lab235"><\/a><h1 class="section">Identifiers<\/h1>$/;"	a
lab235	plf/StlcProp.html	/^<a name="lab235"><\/a><h4 class="section">Exercise: 2 stars (stlc_variation1)<\/h4>$/;"	a
lab236	lf/Maps.html	/^<a name="lab236"><\/a><h1 class="section">Total Maps<\/h1>$/;"	a
lab236	plf/StlcProp.html	/^<a name="lab236"><\/a><h4 class="section">Exercise: 2 stars (stlc_variation2)<\/h4>$/;"	a
lab237	lf/Maps.html	/^<a name="lab237"><\/a><h4 class="section">Exercise: 1 star, optional (t_apply_empty)<\/h4>$/;"	a
lab237	plf/StlcProp.html	/^<a name="lab237"><\/a><h4 class="section">Exercise: 2 stars (stlc_variation3)<\/h4>$/;"	a
lab238	lf/Maps.html	/^<a name="lab238"><\/a><h4 class="section">Exercise: 2 stars, optional (t_update_eq)<\/h4>$/;"	a
lab238	plf/StlcProp.html	/^<a name="lab238"><\/a><h4 class="section">Exercise: 2 stars, optional (stlc_variation4)<\/h4>$/;"	a
lab239	lf/Maps.html	/^<a name="lab239"><\/a><h4 class="section">Exercise: 2 stars, optional (t_update_neq)<\/h4>$/;"	a
lab239	plf/StlcProp.html	/^<a name="lab239"><\/a><h4 class="section">Exercise: 2 stars, optional (stlc_variation5)<\/h4>$/;"	a
lab24	lf/Basics.html	/^<a name="lab24"><\/a><h2 class="section">Function Types<\/h2>$/;"	a
lab24	plf/Equiv.html	/^<a name="lab24"><\/a><h4 class="section">Exercise: 3 stars, optional (CSeq_congruence)<\/h4>$/;"	a
lab240	lf/Maps.html	/^<a name="lab240"><\/a><h4 class="section">Exercise: 2 stars, optional (t_update_shadow)<\/h4>$/;"	a
lab240	plf/StlcProp.html	/^<a name="lab240"><\/a><h4 class="section">Exercise: 2 stars, optional (stlc_variation6)<\/h4>$/;"	a
lab241	lf/Maps.html	/^<a name="lab241"><\/a><h4 class="section">Exercise: 2 stars, optional (beq_idP)<\/h4>$/;"	a
lab241	plf/StlcProp.html	/^<a name="lab241"><\/a><h4 class="section">Exercise: 2 stars, optional (stlc_variation7)<\/h4>$/;"	a
lab242	lf/Maps.html	/^<a name="lab242"><\/a><h4 class="section">Exercise: 2 stars (t_update_same)<\/h4>$/;"	a
lab242	plf/StlcProp.html	/^<a name="lab242"><\/a><h2 class="section">Exercise: STLC with Arithmetic<\/h2>$/;"	a
lab243	lf/Maps.html	/^<a name="lab243"><\/a><h4 class="section">Exercise: 3 stars, recommended (t_update_permute)<\/h4>$/;"	a
lab243	plf/StlcProp.html	/^<a name="lab243"><\/a><h4 class="section">Exercise: 4 stars (stlc_arith)<\/h4>$/;"	a
lab244	lf/Maps.html	/^<a name="lab244"><\/a><h1 class="section">Partial maps<\/h1>$/;"	a
lab244	plf/MoreStlc.html	/^<a name="lab244"><\/a><h1 class="section">Simple Extensions to STLC<\/h1>$/;"	a
lab245	lf/ProofObjects.html	/^<a name="lab245"><\/a><h1 class="section">Proof Scripts<\/h1>$/;"	a
lab245	plf/MoreStlc.html	/^<a name="lab245"><\/a><h2 class="section">Numbers<\/h2>$/;"	a
lab246	lf/ProofObjects.html	/^<a name="lab246"><\/a><h4 class="section">Exercise: 1 star (eight_is_even)<\/h4>$/;"	a
lab246	plf/MoreStlc.html	/^<a name="lab246"><\/a><h2 class="section">Let Bindings<\/h2>$/;"	a
lab247	lf/ProofObjects.html	/^<a name="lab247"><\/a><h1 class="section">Quantifiers, Implications, Functions<\/h1>$/;"	a
lab247	plf/MoreStlc.html	/^<a name="lab247"><\/a><h2 class="section">Pairs<\/h2>$/;"	a
lab248	lf/ProofObjects.html	/^<a name="lab248"><\/a><h1 class="section">Programming with Tactics<\/h1>$/;"	a
lab248	plf/MoreStlc.html	/^<a name="lab248"><\/a><h2 class="section">Unit<\/h2>$/;"	a
lab249	lf/ProofObjects.html	/^<a name="lab249"><\/a><h1 class="section">Logical Connectives as Inductive Types<\/h1>$/;"	a
lab249	plf/MoreStlc.html	/^<a name="lab249"><\/a><h2 class="section">Sums<\/h2>$/;"	a
lab25	lf/Basics.html	/^<a name="lab25"><\/a><h2 class="section">Compound Types<\/h2>$/;"	a
lab25	plf/Equiv.html	/^<a name="lab25"><\/a><h4 class="section">Exercise: 3 stars (CIf_congruence)<\/h4>$/;"	a
lab250	lf/ProofObjects.html	/^<a name="lab250"><\/a><h2 class="section">Conjunction<\/h2>$/;"	a
lab250	plf/MoreStlc.html	/^<a name="lab250"><\/a><h2 class="section">Lists<\/h2>$/;"	a
lab251	lf/ProofObjects.html	/^<a name="lab251"><\/a><h4 class="section">Exercise: 2 stars, optional (conj_fact)<\/h4>$/;"	a
lab251	plf/MoreStlc.html	/^<a name="lab251"><\/a><h2 class="section">General Recursion<\/h2>$/;"	a
lab252	lf/ProofObjects.html	/^<a name="lab252"><\/a><h2 class="section">Disjunction<\/h2>$/;"	a
lab252	plf/MoreStlc.html	/^<a name="lab252"><\/a><h4 class="section">Exercise: 1 star, optional (halve_fix)<\/h4>$/;"	a
lab253	lf/ProofObjects.html	/^<a name="lab253"><\/a><h4 class="section">Exercise: 2 stars, optional (or_commut'')<\/h4>$/;"	a
lab253	plf/MoreStlc.html	/^<a name="lab253"><\/a><h4 class="section">Exercise: 1 star, optional (fact_steps)<\/h4>$/;"	a
lab254	lf/ProofObjects.html	/^<a name="lab254"><\/a><h2 class="section">Existential Quantification<\/h2>$/;"	a
lab254	plf/MoreStlc.html	/^<a name="lab254"><\/a><h2 class="section">Records<\/h2>$/;"	a
lab255	lf/ProofObjects.html	/^<a name="lab255"><\/a><h4 class="section">Exercise: 2 stars, optional (ex_ev_Sn)<\/h4>$/;"	a
lab255	plf/MoreStlc.html	/^<a name="lab255"><\/a><h3 class="section">Encoding Records (Optional)<\/h3>$/;"	a
lab256	lf/ProofObjects.html	/^<a name="lab256"><\/a><h2 class="section"><span class="inlinecode"><span class="id" type="var">True<\/span><\/span> and <span class="inlinecode"><span class="id" type="var">False<\/span><\/span><\/h2>$/;"	a
lab256	plf/MoreStlc.html	/^<a name="lab256"><\/a><h3 class="section">Variants (Optional)<\/h3>$/;"	a
lab257	lf/ProofObjects.html	/^<a name="lab257"><\/a><h1 class="section">Equality<\/h1>$/;"	a
lab257	plf/MoreStlc.html	/^<a name="lab257"><\/a><h1 class="section">Exercise: Formalizing the Extensions<\/h1>$/;"	a
lab258	lf/ProofObjects.html	/^<a name="lab258"><\/a><h4 class="section">Exercise: 2 stars (leibniz_equality)<\/h4>$/;"	a
lab258	plf/MoreStlc.html	/^<a name="lab258"><\/a><h4 class="section">Exercise: 5 stars (STLC_extensions)<\/h4>$/;"	a
lab259	lf/ProofObjects.html	/^<a name="lab259"><\/a><h2 class="section">Inversion, Again<\/h2>$/;"	a
lab259	plf/MoreStlc.html	/^<a name="lab259"><\/a><h3 class="section">Syntax<\/h3>$/;"	a
lab26	lf/Basics.html	/^<a name="lab26"><\/a><h2 class="section">Modules<\/h2>$/;"	a
lab26	plf/Equiv.html	/^<a name="lab26"><\/a><h4 class="section">Exercise: 3 stars, advanced, optional (not_congr)<\/h4>$/;"	a
lab260	lf/IndPrinciples.html	/^<a name="lab260"><\/a><h1 class="section">Basics<\/h1>$/;"	a
lab260	plf/MoreStlc.html	/^<a name="lab260"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab261	lf/IndPrinciples.html	/^<a name="lab261"><\/a><h4 class="section">Exercise: 2 stars, optional (plus_one_r')<\/h4>$/;"	a
lab261	plf/MoreStlc.html	/^<a name="lab261"><\/a><h3 class="section">Reduction<\/h3>$/;"	a
lab262	lf/IndPrinciples.html	/^<a name="lab262"><\/a><h4 class="section">Exercise: 1 star, optional (rgb)<\/h4>$/;"	a
lab262	plf/MoreStlc.html	/^<a name="lab262"><\/a><h3 class="section">Typing<\/h3>$/;"	a
lab263	lf/IndPrinciples.html	/^<a name="lab263"><\/a><h4 class="section">Exercise: 1 star, optional (natlist1)<\/h4>$/;"	a
lab263	plf/MoreStlc.html	/^<a name="lab263"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab264	lf/IndPrinciples.html	/^<a name="lab264"><\/a><h4 class="section">Exercise: 1 star, optional (byntree_ind)<\/h4>$/;"	a
lab264	plf/MoreStlc.html	/^<a name="lab264"><\/a><h3 class="section">Preliminaries<\/h3>$/;"	a
lab265	lf/IndPrinciples.html	/^<a name="lab265"><\/a><h4 class="section">Exercise: 1 star, optional (ex_set)<\/h4>$/;"	a
lab265	plf/MoreStlc.html	/^<a name="lab265"><\/a><h3 class="section">Numbers<\/h3>$/;"	a
lab266	lf/IndPrinciples.html	/^<a name="lab266"><\/a><h1 class="section">Polymorphism<\/h1>$/;"	a
lab266	plf/MoreStlc.html	/^<a name="lab266"><\/a><h3 class="section">Products<\/h3>$/;"	a
lab267	lf/IndPrinciples.html	/^<a name="lab267"><\/a><h4 class="section">Exercise: 1 star, optional (tree)<\/h4>$/;"	a
lab267	plf/MoreStlc.html	/^<a name="lab267"><\/a><h3 class="section"><span class="inlinecode"><span class="id" type="keyword">let<\/span><\/span><\/h3>$/;"	a
lab268	lf/IndPrinciples.html	/^<a name="lab268"><\/a><h4 class="section">Exercise: 1 star, optional (mytype)<\/h4>$/;"	a
lab268	plf/MoreStlc.html	/^<a name="lab268"><\/a><h3 class="section">Sums<\/h3>$/;"	a
lab269	lf/IndPrinciples.html	/^<a name="lab269"><\/a><h4 class="section">Exercise: 1 star, optional (foo)<\/h4>$/;"	a
lab269	plf/MoreStlc.html	/^<a name="lab269"><\/a><h3 class="section">Lists<\/h3>$/;"	a
lab27	lf/Basics.html	/^<a name="lab27"><\/a><h2 class="section">Numbers<\/h2>$/;"	a
lab27	plf/Equiv.html	/^<a name="lab27"><\/a><h1 class="section">Program Transformations<\/h1>$/;"	a
lab270	lf/IndPrinciples.html	/^<a name="lab270"><\/a><h4 class="section">Exercise: 1 star, optional (foo')<\/h4>$/;"	a
lab270	plf/MoreStlc.html	/^<a name="lab270"><\/a><h3 class="section"><span class="inlinecode"><span class="id" type="var">fix<\/span><\/span><\/h3>$/;"	a
lab271	lf/IndPrinciples.html	/^<a name="lab271"><\/a><h1 class="section">Induction Hypotheses<\/h1>$/;"	a
lab271	plf/MoreStlc.html	/^<a name="lab271"><\/a><h2 class="section">Properties of Typing<\/h2>$/;"	a
lab272	lf/IndPrinciples.html	/^<a name="lab272"><\/a><h1 class="section">More on the <span class="inlinecode"><span class="id" type="tactic">induction<\/span><\/span> Tactic<\/h1>$/;"	a
lab272	plf/MoreStlc.html	/^<a name="lab272"><\/a><h3 class="section">Progress<\/h3>$/;"	a
lab273	lf/IndPrinciples.html	/^<a name="lab273"><\/a><h4 class="section">Exercise: 1 star, optional (plus_explicit_prop)<\/h4>$/;"	a
lab273	plf/MoreStlc.html	/^<a name="lab273"><\/a><h3 class="section">Context Invariance<\/h3>$/;"	a
lab274	lf/IndPrinciples.html	/^<a name="lab274"><\/a><h1 class="section">Induction Principles in <span class="inlinecode"><span class="id" type="keyword">Prop<\/span><\/span><\/h1>$/;"	a
lab274	plf/MoreStlc.html	/^<a name="lab274"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab275	lf/IndPrinciples.html	/^<a name="lab275"><\/a><h1 class="section">Formal vs. Informal Proofs by Induction<\/h1>$/;"	a
lab275	plf/MoreStlc.html	/^<a name="lab275"><\/a><h3 class="section">Preservation<\/h3>$/;"	a
lab276	lf/IndPrinciples.html	/^<a name="lab276"><\/a><h2 class="section">Induction Over an Inductively Defined Set<\/h2>$/;"	a
lab276	plf/Sub.html	/^<a name="lab276"><\/a><h1 class="section">Concepts<\/h1>$/;"	a
lab277	lf/IndPrinciples.html	/^<a name="lab277"><\/a><h2 class="section">Induction Over an Inductively Defined Proposition<\/h2>$/;"	a
lab277	plf/Sub.html	/^<a name="lab277"><\/a><h2 class="section">A Motivating Example<\/h2>$/;"	a
lab278	lf/Rel.html	/^<a name="lab278"><\/a><h1 class="section">Relations<\/h1>$/;"	a
lab278	plf/Sub.html	/^<a name="lab278"><\/a><h2 class="section">Subtyping and Object-Oriented Languages<\/h2>$/;"	a
lab279	lf/Rel.html	/^<a name="lab279"><\/a><h1 class="section">Basic Properties<\/h1>$/;"	a
lab279	plf/Sub.html	/^<a name="lab279"><\/a><h2 class="section">The Subsumption Rule<\/h2>$/;"	a
lab28	lf/Basics.html	/^<a name="lab28"><\/a><h4 class="section">Exercise: 1 star (factorial)<\/h4>$/;"	a
lab28	plf/Equiv.html	/^<a name="lab28"><\/a><h2 class="section">The Constant-Folding Transformation<\/h2>$/;"	a
lab280	lf/Rel.html	/^<a name="lab280"><\/a><h3 class="section">Partial Functions<\/h3>$/;"	a
lab280	plf/Sub.html	/^<a name="lab280"><\/a><h2 class="section">The Subtype Relation<\/h2>$/;"	a
lab281	lf/Rel.html	/^<a name="lab281"><\/a><h4 class="section">Exercise: 2 stars, optional (total_relation_not_partial)<\/h4>$/;"	a
lab281	plf/Sub.html	/^<a name="lab281"><\/a><h3 class="section">Structural Rules<\/h3>$/;"	a
lab282	lf/Rel.html	/^<a name="lab282"><\/a><h4 class="section">Exercise: 2 stars, optional (empty_relation_partial)<\/h4>$/;"	a
lab282	plf/Sub.html	/^<a name="lab282"><\/a><h3 class="section">Products<\/h3>$/;"	a
lab283	lf/Rel.html	/^<a name="lab283"><\/a><h3 class="section">Reflexive Relations<\/h3>$/;"	a
lab283	plf/Sub.html	/^<a name="lab283"><\/a><h3 class="section">Arrows<\/h3>$/;"	a
lab284	lf/Rel.html	/^<a name="lab284"><\/a><h3 class="section">Transitive Relations<\/h3>$/;"	a
lab284	plf/Sub.html	/^<a name="lab284"><\/a><h3 class="section">Records<\/h3>$/;"	a
lab285	lf/Rel.html	/^<a name="lab285"><\/a><h4 class="section">Exercise: 2 stars, optional (le_trans_hard_way)<\/h4>$/;"	a
lab285	plf/Sub.html	/^<a name="lab285"><\/a><h4 class="section">Exercise: 2 stars, recommended (arrow_sub_wrong)<\/h4>$/;"	a
lab286	lf/Rel.html	/^<a name="lab286"><\/a><h4 class="section">Exercise: 2 stars, optional<\/h4>$/;"	a
lab286	plf/Sub.html	/^<a name="lab286"><\/a><h3 class="section">Top<\/h3>$/;"	a
lab287	lf/Rel.html	/^<a name="lab287"><\/a><h4 class="section">Exercise: 1 star, optional<\/h4>$/;"	a
lab287	plf/Sub.html	/^<a name="lab287"><\/a><h3 class="section">Summary<\/h3>$/;"	a
lab288	lf/Rel.html	/^<a name="lab288"><\/a><h4 class="section">Exercise: 2 stars, optional (le_Sn_n_inf)<\/h4>$/;"	a
lab288	plf/Sub.html	/^<a name="lab288"><\/a><h2 class="section">Exercises<\/h2>$/;"	a
lab289	lf/Rel.html	/^<a name="lab289"><\/a><h4 class="section">Exercise: 1 star, optional<\/h4>$/;"	a
lab289	plf/Sub.html	/^<a name="lab289"><\/a><h4 class="section">Exercise: 1 star, optional (subtype_instances_tf_1)<\/h4>$/;"	a
lab29	lf/Basics.html	/^<a name="lab29"><\/a><h4 class="section">Exercise: 1 star (blt_nat)<\/h4>$/;"	a
lab29	plf/Equiv.html	/^<a name="lab29"><\/a><h2 class="section">Soundness of Constant Folding<\/h2>$/;"	a
lab290	lf/Rel.html	/^<a name="lab290"><\/a><h3 class="section">Symmetric and Antisymmetric Relations<\/h3>$/;"	a
lab290	plf/Sub.html	/^<a name="lab290"><\/a><h4 class="section">Exercise: 2 stars (subtype_order)<\/h4>$/;"	a
lab291	lf/Rel.html	/^<a name="lab291"><\/a><h4 class="section">Exercise: 2 stars, optional<\/h4>$/;"	a
lab291	plf/Sub.html	/^<a name="lab291"><\/a><h4 class="section">Exercise: 1 star (subtype_instances_tf_2)<\/h4>$/;"	a
lab292	lf/Rel.html	/^<a name="lab292"><\/a><h4 class="section">Exercise: 2 stars, optional<\/h4>$/;"	a
lab292	plf/Sub.html	/^<a name="lab292"><\/a><h4 class="section">Exercise: 1 star (subtype_concepts_tf)<\/h4>$/;"	a
lab293	lf/Rel.html	/^<a name="lab293"><\/a><h4 class="section">Exercise: 2 stars, optional<\/h4>$/;"	a
lab293	plf/Sub.html	/^<a name="lab293"><\/a><h4 class="section">Exercise: 2 stars (proper_subtypes)<\/h4>$/;"	a
lab294	lf/Rel.html	/^<a name="lab294"><\/a><h3 class="section">Equivalence Relations<\/h3>$/;"	a
lab294	plf/Sub.html	/^<a name="lab294"><\/a><h4 class="section">Exercise: 2 stars (small_large_1)<\/h4>$/;"	a
lab295	lf/Rel.html	/^<a name="lab295"><\/a><h3 class="section">Partial Orders and Preorders<\/h3>$/;"	a
lab295	plf/Sub.html	/^<a name="lab295"><\/a><h4 class="section">Exercise: 2 stars (small_large_2)<\/h4>$/;"	a
lab296	lf/Rel.html	/^<a name="lab296"><\/a><h1 class="section">Reflexive, Transitive Closure<\/h1>$/;"	a
lab296	plf/Sub.html	/^<a name="lab296"><\/a><h4 class="section">Exercise: 2 stars, optional (small_large_3)<\/h4>$/;"	a
lab297	lf/Rel.html	/^<a name="lab297"><\/a><h4 class="section">Exercise: 2 stars, optional (rsc_trans)<\/h4>$/;"	a
lab297	plf/Sub.html	/^<a name="lab297"><\/a><h4 class="section">Exercise: 2 stars (small_large_4)<\/h4>$/;"	a
lab298	lf/Rel.html	/^<a name="lab298"><\/a><h4 class="section">Exercise: 3 stars, optional (rtc_rsc_coincide)<\/h4>$/;"	a
lab298	plf/Sub.html	/^<a name="lab298"><\/a><h4 class="section">Exercise: 2 stars (smallest_1)<\/h4>$/;"	a
lab299	lf/Imp.html	/^<a name="lab299"><\/a><h1 class="section">Arithmetic and Boolean Expressions<\/h1>$/;"	a
lab299	plf/Sub.html	/^<a name="lab299"><\/a><h4 class="section">Exercise: 2 stars (smallest_2)<\/h4>$/;"	a
lab3	lf/Preface.html	/^<a name="lab3"><\/a><h2 class="section">Logic<\/h2>$/;"	a
lab3	plf/Preface.html	/^<a name="lab3"><\/a><h2 class="section">Program Verification<\/h2>$/;"	a
lab30	lf/Basics.html	/^<a name="lab30"><\/a><h1 class="section">Proof by Simplification<\/h1>$/;"	a
lab30	plf/Equiv.html	/^<a name="lab30"><\/a><h4 class="section">Exercise: 3 stars, optional (fold_bexp_Eq_informal)<\/h4>$/;"	a
lab300	lf/Imp.html	/^<a name="lab300"><\/a><h2 class="section">Syntax<\/h2>$/;"	a
lab300	plf/Sub.html	/^<a name="lab300"><\/a><h4 class="section">Exercise: 3 stars, optional (count_supertypes)<\/h4>$/;"	a
lab301	lf/Imp.html	/^<a name="lab301"><\/a><h2 class="section">Evaluation<\/h2>$/;"	a
lab301	plf/Sub.html	/^<a name="lab301"><\/a><h4 class="section">Exercise: 2 stars (pair_permutation)<\/h4>$/;"	a
lab302	lf/Imp.html	/^<a name="lab302"><\/a><h2 class="section">Optimization<\/h2>$/;"	a
lab302	plf/Sub.html	/^<a name="lab302"><\/a><h1 class="section">Formal Definitions<\/h1>$/;"	a
lab303	lf/Imp.html	/^<a name="lab303"><\/a><h1 class="section">Coq Automation<\/h1>$/;"	a
lab303	plf/Sub.html	/^<a name="lab303"><\/a><h2 class="section">Core Definitions<\/h2>$/;"	a
lab304	lf/Imp.html	/^<a name="lab304"><\/a><h2 class="section">Tacticals<\/h2>$/;"	a
lab304	plf/Sub.html	/^<a name="lab304"><\/a><h3 class="section">Syntax<\/h3>$/;"	a
lab305	lf/Imp.html	/^<a name="lab305"><\/a><h3 class="section">The <span class="inlinecode"><span class="id" type="tactic">try<\/span><\/span> Tactical<\/h3>$/;"	a
lab305	plf/Sub.html	/^<a name="lab305"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab306	lf/Imp.html	/^<a name="lab306"><\/a><h3 class="section">The <span class="inlinecode">;<\/span> Tactical (Simple Form)<\/h3>$/;"	a
lab306	plf/Sub.html	/^<a name="lab306"><\/a><h3 class="section">Reduction<\/h3>$/;"	a
lab307	lf/Imp.html	/^<a name="lab307"><\/a><h3 class="section">The <span class="inlinecode">;<\/span> Tactical (General Form)<\/h3>$/;"	a
lab307	plf/Sub.html	/^<a name="lab307"><\/a><h2 class="section">Subtyping<\/h2>$/;"	a
lab308	lf/Imp.html	/^<a name="lab308"><\/a><h3 class="section">The <span class="inlinecode"><span class="id" type="tactic">repeat<\/span><\/span> Tactical<\/h3>$/;"	a
lab308	plf/Sub.html	/^<a name="lab308"><\/a><h4 class="section">Exercise: 2 stars, optional (subtyping_judgements)<\/h4>$/;"	a
lab309	lf/Imp.html	/^<a name="lab309"><\/a><h4 class="section">Exercise: 3 stars (optimize_0plus_b)<\/h4>$/;"	a
lab309	plf/Sub.html	/^<a name="lab309"><\/a><h4 class="section">Exercise: 1 star, optional (subtyping_example_1)<\/h4>$/;"	a
lab31	lf/Basics.html	/^<a name="lab31"><\/a><h1 class="section">Proof by Rewriting<\/h1>$/;"	a
lab31	plf/Equiv.html	/^<a name="lab31"><\/a><h4 class="section">Exercise: 3 stars (fold_constants_com_sound)<\/h4>$/;"	a
lab310	lf/Imp.html	/^<a name="lab310"><\/a><h4 class="section">Exercise: 4 stars, optional (optimizer)<\/h4>$/;"	a
lab310	plf/Sub.html	/^<a name="lab310"><\/a><h4 class="section">Exercise: 1 star, optional (subtyping_example_2)<\/h4>$/;"	a
lab311	lf/Imp.html	/^<a name="lab311"><\/a><h2 class="section">Defining New Tactic Notations<\/h2>$/;"	a
lab311	plf/Sub.html	/^<a name="lab311"><\/a><h2 class="section">Typing<\/h2>$/;"	a
lab312	lf/Imp.html	/^<a name="lab312"><\/a><h2 class="section">The <span class="inlinecode"><span class="id" type="tactic">omega<\/span><\/span> Tactic<\/h2>$/;"	a
lab312	plf/Sub.html	/^<a name="lab312"><\/a><h4 class="section">Exercise: 1 star, optional (typing_example_0)<\/h4>$/;"	a
lab313	lf/Imp.html	/^<a name="lab313"><\/a><h2 class="section">A Few More Handy Tactics<\/h2>$/;"	a
lab313	plf/Sub.html	/^<a name="lab313"><\/a><h4 class="section">Exercise: 2 stars, optional (typing_example_1)<\/h4>$/;"	a
lab314	lf/Imp.html	/^<a name="lab314"><\/a><h1 class="section">Evaluation as a Relation<\/h1>$/;"	a
lab314	plf/Sub.html	/^<a name="lab314"><\/a><h4 class="section">Exercise: 2 stars, optional (typing_example_2)<\/h4>$/;"	a
lab315	lf/Imp.html	/^<a name="lab315"><\/a><h2 class="section">Inference Rule Notation<\/h2>$/;"	a
lab315	plf/Sub.html	/^<a name="lab315"><\/a><h1 class="section">Properties<\/h1>$/;"	a
lab316	lf/Imp.html	/^<a name="lab316"><\/a><h2 class="section">Equivalence of the Definitions<\/h2>$/;"	a
lab316	plf/Sub.html	/^<a name="lab316"><\/a><h2 class="section">Inversion Lemmas for Subtyping<\/h2>$/;"	a
lab317	lf/Imp.html	/^<a name="lab317"><\/a><h4 class="section">Exercise: 3 stars  (bevalR)<\/h4>$/;"	a
lab317	plf/Sub.html	/^<a name="lab317"><\/a><h4 class="section">Exercise: 2 stars, optional (sub_inversion_Bool)<\/h4>$/;"	a
lab318	lf/Imp.html	/^<a name="lab318"><\/a><h2 class="section">Computational vs. Relational Definitions<\/h2>$/;"	a
lab318	plf/Sub.html	/^<a name="lab318"><\/a><h4 class="section">Exercise: 3 stars, optional (sub_inversion_arrow)<\/h4>$/;"	a
lab319	lf/Imp.html	/^<a name="lab319"><\/a><h1 class="section">Expressions With Variables<\/h1>$/;"	a
lab319	plf/Sub.html	/^<a name="lab319"><\/a><h2 class="section">Canonical Forms<\/h2>$/;"	a
lab32	lf/Basics.html	/^<a name="lab32"><\/a><h4 class="section">Exercise: 1 star (plus_id_exercise)<\/h4>$/;"	a
lab32	plf/Equiv.html	/^<a name="lab32"><\/a><h3 class="section">Soundness of (0 + n) Elimination, Redux<\/h3>$/;"	a
lab320	lf/Imp.html	/^<a name="lab320"><\/a><h2 class="section">States<\/h2>$/;"	a
lab320	plf/Sub.html	/^<a name="lab320"><\/a><h4 class="section">Exercise: 3 stars, optional (canonical_forms_of_arrow_types)<\/h4>$/;"	a
lab321	lf/Imp.html	/^<a name="lab321"><\/a><h2 class="section">Syntax<\/h2>$/;"	a
lab321	plf/Sub.html	/^<a name="lab321"><\/a><h2 class="section">Progress<\/h2>$/;"	a
lab322	lf/Imp.html	/^<a name="lab322"><\/a><h2 class="section">Evaluation<\/h2>$/;"	a
lab322	plf/Sub.html	/^<a name="lab322"><\/a><h2 class="section">Inversion Lemmas for Typing<\/h2>$/;"	a
lab323	lf/Imp.html	/^<a name="lab323"><\/a><h1 class="section">Commands<\/h1>$/;"	a
lab323	plf/Sub.html	/^<a name="lab323"><\/a><h2 class="section">Context Invariance<\/h2>$/;"	a
lab324	lf/Imp.html	/^<a name="lab324"><\/a><h2 class="section">Syntax<\/h2>$/;"	a
lab324	plf/Sub.html	/^<a name="lab324"><\/a><h2 class="section">Substitution<\/h2>$/;"	a
lab325	lf/Imp.html	/^<a name="lab325"><\/a><h2 class="section">More Examples<\/h2>$/;"	a
lab325	plf/Sub.html	/^<a name="lab325"><\/a><h2 class="section">Preservation<\/h2>$/;"	a
lab326	lf/Imp.html	/^<a name="lab326"><\/a><h3 class="section">Loops<\/h3>$/;"	a
lab326	plf/Sub.html	/^<a name="lab326"><\/a><h2 class="section">Records, via Products and Top<\/h2>$/;"	a
lab327	lf/Imp.html	/^<a name="lab327"><\/a><h3 class="section">An infinite loop:<\/h3>$/;"	a
lab327	plf/Sub.html	/^<a name="lab327"><\/a><h2 class="section">Exercises<\/h2>$/;"	a
lab328	lf/Imp.html	/^<a name="lab328"><\/a><h1 class="section">Evaluating Commands<\/h1>$/;"	a
lab328	plf/Sub.html	/^<a name="lab328"><\/a><h4 class="section">Exercise: 2 stars (variations)<\/h4>$/;"	a
lab329	lf/Imp.html	/^<a name="lab329"><\/a><h2 class="section">Evaluation as a Function (Failed Attempt)<\/h2>$/;"	a
lab329	plf/Sub.html	/^<a name="lab329"><\/a><h1 class="section">Exercise: Adding Products<\/h1>$/;"	a
lab33	lf/Basics.html	/^<a name="lab33"><\/a><h4 class="section">Exercise: 2 stars (mult_S_1)<\/h4>$/;"	a
lab33	plf/Equiv.html	/^<a name="lab33"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (optimize_0plus)<\/h4>$/;"	a
lab330	lf/Imp.html	/^<a name="lab330"><\/a><h2 class="section">Evaluation as a Relation<\/h2>$/;"	a
lab330	plf/Sub.html	/^<a name="lab330"><\/a><h4 class="section">Exercise: 4 stars (products)<\/h4>$/;"	a
lab331	lf/Imp.html	/^<a name="lab331"><\/a><h3 class="section">Operational Semantics<\/h3>$/;"	a
lab331	plf/Typechecking.html	/^<a name="lab331"><\/a><h1 class="section">Comparing Types<\/h1>$/;"	a
lab332	lf/Imp.html	/^<a name="lab332"><\/a><h4 class="section">Exercise: 2 stars (ceval_example2)<\/h4>$/;"	a
lab332	plf/Typechecking.html	/^<a name="lab332"><\/a><h1 class="section">The Typechecker<\/h1>$/;"	a
lab333	lf/Imp.html	/^<a name="lab333"><\/a><h4 class="section">Exercise: 3 stars, advanced (pup_to_n)<\/h4>$/;"	a
lab333	plf/Typechecking.html	/^<a name="lab333"><\/a><h1 class="section">Properties<\/h1>$/;"	a
lab334	lf/Imp.html	/^<a name="lab334"><\/a><h2 class="section">Determinism of Evaluation<\/h2>$/;"	a
lab334	plf/Typechecking.html	/^<a name="lab334"><\/a><h1 class="section">Exercises<\/h1>$/;"	a
lab335	lf/Imp.html	/^<a name="lab335"><\/a><h1 class="section">Reasoning About Imp Programs<\/h1>$/;"	a
lab335	plf/Typechecking.html	/^<a name="lab335"><\/a><h4 class="section">Exercise: 5 stars (typechecker_extensions)<\/h4>$/;"	a
lab336	lf/Imp.html	/^<a name="lab336"><\/a><h4 class="section">Exercise: 3 stars, recommended (XtimesYinZ_spec)<\/h4>$/;"	a
lab336	plf/Typechecking.html	/^<a name="lab336"><\/a><h4 class="section">Exercise: 5 stars, optional (stlc_step_function)<\/h4>$/;"	a
lab337	lf/Imp.html	/^<a name="lab337"><\/a><h4 class="section">Exercise: 3 stars, recommended (loop_never_stops)<\/h4>$/;"	a
lab337	plf/Typechecking.html	/^<a name="lab337"><\/a><h4 class="section">Exercise: 5 stars, optional (stlc_impl)<\/h4>$/;"	a
lab338	lf/Imp.html	/^<a name="lab338"><\/a><h4 class="section">Exercise: 3 stars (no_whilesR)<\/h4>$/;"	a
lab338	plf/Records.html	/^<a name="lab338"><\/a><h1 class="section">Adding Records<\/h1>$/;"	a
lab339	lf/Imp.html	/^<a name="lab339"><\/a><h4 class="section">Exercise: 4 stars (no_whiles_terminating)<\/h4>$/;"	a
lab339	plf/Records.html	/^<a name="lab339"><\/a><h1 class="section">Formalizing Records<\/h1>$/;"	a
lab34	lf/Basics.html	/^<a name="lab34"><\/a><h1 class="section">Proof by Case Analysis<\/h1>$/;"	a
lab34	plf/Equiv.html	/^<a name="lab34"><\/a><h1 class="section">Proving That Programs Are <i>Not<\/i> Equivalent<\/h1>$/;"	a
lab340	lf/Imp.html	/^<a name="lab340"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab340	plf/Records.html	/^<a name="lab340"><\/a><h3 class="section">Syntax and Operational Semantics<\/h3>$/;"	a
lab341	lf/Imp.html	/^<a name="lab341"><\/a><h4 class="section">Exercise: 3 stars (stack_compiler)<\/h4>$/;"	a
lab341	plf/Records.html	/^<a name="lab341"><\/a><h3 class="section">Well-Formedness<\/h3>$/;"	a
lab342	lf/Imp.html	/^<a name="lab342"><\/a><h4 class="section">Exercise: 4 stars, advanced (stack_compiler_correct)<\/h4>$/;"	a
lab342	plf/Records.html	/^<a name="lab342"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab343	lf/Imp.html	/^<a name="lab343"><\/a><h4 class="section">Exercise: 3 stars, optional (short_circuit)<\/h4>$/;"	a
lab343	plf/Records.html	/^<a name="lab343"><\/a><h3 class="section">Reduction<\/h3>$/;"	a
lab344	lf/Imp.html	/^<a name="lab344"><\/a><h4 class="section">Exercise: 4 stars, advanced (break_imp)<\/h4>$/;"	a
lab344	plf/Records.html	/^<a name="lab344"><\/a><h3 class="section">Typing<\/h3>$/;"	a
lab345	lf/Imp.html	/^<a name="lab345"><\/a><h4 class="section">Exercise: 3 stars, advanced, optional (while_break_true)<\/h4>$/;"	a
lab345	plf/Records.html	/^<a name="lab345"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab346	lf/Imp.html	/^<a name="lab346"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (ceval_deterministic)<\/h4>$/;"	a
lab346	plf/Records.html	/^<a name="lab346"><\/a><h4 class="section">Exercise: 2 stars (examples)<\/h4>$/;"	a
lab347	lf/Imp.html	/^<a name="lab347"><\/a><h4 class="section">Exercise: 4 stars, optional (add_for_loop)<\/h4>$/;"	a
lab347	plf/Records.html	/^<a name="lab347"><\/a><h2 class="section">Properties of Typing<\/h2>$/;"	a
lab348	lf/ImpParser.html	/^<a name="lab348"><\/a><h1 class="section">Internals<\/h1>$/;"	a
lab348	plf/Records.html	/^<a name="lab348"><\/a><h3 class="section">Well-Formedness<\/h3>$/;"	a
lab349	lf/ImpParser.html	/^<a name="lab349"><\/a><h2 class="section">Lexical Analysis<\/h2>$/;"	a
lab349	plf/Records.html	/^<a name="lab349"><\/a><h3 class="section">Field Lookup<\/h3>$/;"	a
lab35	lf/Basics.html	/^<a name="lab35"><\/a><h4 class="section">Exercise: 2 stars (andb_true_elim2)<\/h4>$/;"	a
lab35	plf/Equiv.html	/^<a name="lab35"><\/a><h4 class="section">Exercise: 4 stars, optional (better_subst_equiv)<\/h4>$/;"	a
lab350	lf/ImpParser.html	/^<a name="lab350"><\/a><h2 class="section">Parsing<\/h2>$/;"	a
lab350	plf/Records.html	/^<a name="lab350"><\/a><h3 class="section">Progress<\/h3>$/;"	a
lab351	lf/ImpParser.html	/^<a name="lab351"><\/a><h3 class="section">Options With Errors<\/h3>$/;"	a
lab351	plf/Records.html	/^<a name="lab351"><\/a><h3 class="section">Context Invariance<\/h3>$/;"	a
lab352	lf/ImpParser.html	/^<a name="lab352"><\/a><h3 class="section">Generic Combinators for Building Parsers<\/h3>$/;"	a
lab352	plf/Records.html	/^<a name="lab352"><\/a><h3 class="section">Preservation<\/h3>$/;"	a
lab353	lf/ImpParser.html	/^<a name="lab353"><\/a><h3 class="section">A Recursive-Descent Parser for Imp<\/h3>$/;"	a
lab353	plf/References.html	/^<a name="lab353"><\/a><h1 class="section">Definitions<\/h1>$/;"	a
lab354	lf/ImpParser.html	/^<a name="lab354"><\/a><h1 class="section">Examples<\/h1>$/;"	a
lab354	plf/References.html	/^<a name="lab354"><\/a><h1 class="section">Syntax<\/h1>$/;"	a
lab355	lf/ImpCEvalFun.html	/^<a name="lab355"><\/a><h1 class="section">A Broken Evaluator<\/h1>$/;"	a
lab355	plf/References.html	/^<a name="lab355"><\/a><h3 class="section">Types<\/h3>$/;"	a
lab356	lf/ImpCEvalFun.html	/^<a name="lab356"><\/a><h1 class="section">A Step-Indexed Evaluator<\/h1>$/;"	a
lab356	plf/References.html	/^<a name="lab356"><\/a><h3 class="section">Terms<\/h3>$/;"	a
lab357	lf/ImpCEvalFun.html	/^<a name="lab357"><\/a><h4 class="section">Exercise: 2 stars, recommended (pup_to_n)<\/h4>$/;"	a
lab357	plf/References.html	/^<a name="lab357"><\/a><h3 class="section">Typing (Preview)<\/h3>$/;"	a
lab358	lf/ImpCEvalFun.html	/^<a name="lab358"><\/a><h4 class="section">Exercise: 2 stars, optional (peven)<\/h4>$/;"	a
lab358	plf/References.html	/^<a name="lab358"><\/a><h3 class="section">Values and Substitution<\/h3>$/;"	a
lab359	lf/ImpCEvalFun.html	/^<a name="lab359"><\/a><h1 class="section">Relational vs. Step-Indexed Evaluation<\/h1>$/;"	a
lab359	plf/References.html	/^<a name="lab359"><\/a><h1 class="section">Pragmatics<\/h1>$/;"	a
lab36	lf/Basics.html	/^<a name="lab36"><\/a><h4 class="section">Exercise: 1 star (zero_nbeq_plus_1)<\/h4>$/;"	a
lab36	plf/Equiv.html	/^<a name="lab36"><\/a><h4 class="section">Exercise: 3 stars (inequiv_exercise)<\/h4>$/;"	a
lab360	lf/ImpCEvalFun.html	/^<a name="lab360"><\/a><h4 class="section">Exercise: 4 stars (ceval_step__ceval_inf)<\/h4>$/;"	a
lab360	plf/References.html	/^<a name="lab360"><\/a><h2 class="section">Side Effects and Sequencing<\/h2>$/;"	a
lab361	lf/ImpCEvalFun.html	/^<a name="lab361"><\/a><h4 class="section">Exercise: 3 stars, recommended (ceval__ceval_step)<\/h4>$/;"	a
lab361	plf/References.html	/^<a name="lab361"><\/a><h2 class="section">References and Aliasing<\/h2>$/;"	a
lab362	lf/ImpCEvalFun.html	/^<a name="lab362"><\/a><h1 class="section">Determinism of Evaluation Again<\/h1>$/;"	a
lab362	plf/References.html	/^<a name="lab362"><\/a><h2 class="section">Shared State<\/h2>$/;"	a
lab363	lf/Extraction.html	/^<a name="lab363"><\/a><h1 class="section">Basic Extraction<\/h1>$/;"	a
lab363	plf/References.html	/^<a name="lab363"><\/a><h2 class="section">Objects<\/h2>$/;"	a
lab364	lf/Extraction.html	/^<a name="lab364"><\/a><h1 class="section">Controlling Extraction of Specific Types<\/h1>$/;"	a
lab364	plf/References.html	/^<a name="lab364"><\/a><h4 class="section">Exercise: 1 star (store_draw)<\/h4>$/;"	a
lab365	lf/Extraction.html	/^<a name="lab365"><\/a><h1 class="section">A Complete Example<\/h1>$/;"	a
lab365	plf/References.html	/^<a name="lab365"><\/a><h2 class="section">References to Compound Types<\/h2>$/;"	a
lab366	lf/Extraction.html	/^<a name="lab366"><\/a><h1 class="section">Discussion<\/h1>$/;"	a
lab366	plf/References.html	/^<a name="lab366"><\/a><h4 class="section">Exercise: 2 stars, recommended (compact_update)<\/h4>$/;"	a
lab367	lf/Extraction.html	/^<a name="lab367"><\/a><h1 class="section">Going Further<\/h1>$/;"	a
lab367	plf/References.html	/^<a name="lab367"><\/a><h2 class="section">Null References<\/h2>$/;"	a
lab368	lf/Auto.html	/^<a name="lab368"><\/a><h1 class="section">The <span class="inlinecode"><span class="id" type="tactic">auto<\/span><\/span> Tactic<\/h1>$/;"	a
lab368	plf/References.html	/^<a name="lab368"><\/a><h2 class="section">Garbage Collection<\/h2>$/;"	a
lab369	lf/Auto.html	/^<a name="lab369"><\/a><h1 class="section">Searching For Hypotheses<\/h1>$/;"	a
lab369	plf/References.html	/^<a name="lab369"><\/a><h4 class="section">Exercise: 1 star (type_safety_violation)<\/h4>$/;"	a
lab37	lf/Basics.html	/^<a name="lab37"><\/a><h2 class="section">More on Notation (Optional)<\/h2>$/;"	a
lab37	plf/Equiv.html	/^<a name="lab37"><\/a><h1 class="section">Extended Exercise: Nondeterministic Imp<\/h1>$/;"	a
lab370	lf/Auto.html	/^<a name="lab370"><\/a><h3 class="section"><span class="inlinecode"><span class="id" type="tactic">eapply<\/span><\/span> and <span class="inlinecode"><span class="id" type="tactic">eauto<\/span><\/span><\/h3>$/;"	a
lab370	plf/References.html	/^<a name="lab370"><\/a><h1 class="section">Operational Semantics<\/h1>$/;"	a
lab371	lf/Postscript.html	/^<a name="lab371"><\/a><h1 class="section">Looking Back<\/h1>$/;"	a
lab371	plf/References.html	/^<a name="lab371"><\/a><h2 class="section">Locations<\/h2>$/;"	a
lab372	lf/Postscript.html	/^<a name="lab372"><\/a><h1 class="section">Looking Forward<\/h1>$/;"	a
lab372	plf/References.html	/^<a name="lab372"><\/a><h2 class="section">Stores<\/h2>$/;"	a
lab373	lf/Postscript.html	/^<a name="lab373"><\/a><h1 class="section">Other sources<\/h1>$/;"	a
lab373	plf/References.html	/^<a name="lab373"><\/a><h2 class="section">Reduction<\/h2>$/;"	a
lab374	lf/Bib.html	/^<a name="lab374"><\/a><h1 class="section">Resources cited in this volume<\/h1>$/;"	a
lab374	plf/References.html	/^<a name="lab374"><\/a><h1 class="section">Typing<\/h1>$/;"	a
lab375	plf/References.html	/^<a name="lab375"><\/a><h2 class="section">Store typings<\/h2>$/;"	a
lab376	plf/References.html	/^<a name="lab376"><\/a><h4 class="section">Exercise: 2 stars (cyclic_store)<\/h4>$/;"	a
lab377	plf/References.html	/^<a name="lab377"><\/a><h2 class="section">The Typing Relation<\/h2>$/;"	a
lab378	plf/References.html	/^<a name="lab378"><\/a><h1 class="section">Properties<\/h1>$/;"	a
lab379	plf/References.html	/^<a name="lab379"><\/a><h2 class="section">Well-Typed Stores<\/h2>$/;"	a
lab38	lf/Basics.html	/^<a name="lab38"><\/a><h2 class="section">Fixpoints and Structural Recursion (Optional)<\/h2>$/;"	a
lab38	plf/Equiv.html	/^<a name="lab38"><\/a><h4 class="section">Exercise: 2 stars (himp_ceval)<\/h4>$/;"	a
lab380	plf/References.html	/^<a name="lab380"><\/a><h4 class="section">Exercise: 2 stars (store_not_unique)<\/h4>$/;"	a
lab381	plf/References.html	/^<a name="lab381"><\/a><h2 class="section">Extending Store Typings<\/h2>$/;"	a
lab382	plf/References.html	/^<a name="lab382"><\/a><h2 class="section">Preservation, Finally<\/h2>$/;"	a
lab383	plf/References.html	/^<a name="lab383"><\/a><h2 class="section">Substitution Lemma<\/h2>$/;"	a
lab384	plf/References.html	/^<a name="lab384"><\/a><h2 class="section">Assignment Preserves Store Typing<\/h2>$/;"	a
lab385	plf/References.html	/^<a name="lab385"><\/a><h2 class="section">Weakening for Stores<\/h2>$/;"	a
lab386	plf/References.html	/^<a name="lab386"><\/a><h2 class="section">Preservation!<\/h2>$/;"	a
lab387	plf/References.html	/^<a name="lab387"><\/a><h4 class="section">Exercise: 3 stars (preservation_informal)<\/h4>$/;"	a
lab388	plf/References.html	/^<a name="lab388"><\/a><h2 class="section">Progress<\/h2>$/;"	a
lab389	plf/References.html	/^<a name="lab389"><\/a><h1 class="section">References and Nontermination<\/h1>$/;"	a
lab39	lf/Basics.html	/^<a name="lab39"><\/a><h4 class="section">Exercise: 2 stars, optional (decreasing)<\/h4>$/;"	a
lab39	plf/Equiv.html	/^<a name="lab39"><\/a><h4 class="section">Exercise: 3 stars (havoc_swap)<\/h4>$/;"	a
lab390	plf/References.html	/^<a name="lab390"><\/a><h4 class="section">Exercise: 4 stars (factorial_ref)<\/h4>$/;"	a
lab391	plf/References.html	/^<a name="lab391"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab392	plf/References.html	/^<a name="lab392"><\/a><h4 class="section">Exercise: 5 stars, optional (garabage_collector)<\/h4>$/;"	a
lab393	plf/RecordSub.html	/^<a name="lab393"><\/a><h1 class="section">Core Definitions<\/h1>$/;"	a
lab394	plf/RecordSub.html	/^<a name="lab394"><\/a><h3 class="section">Syntax<\/h3>$/;"	a
lab395	plf/RecordSub.html	/^<a name="lab395"><\/a><h3 class="section">Well-Formedness<\/h3>$/;"	a
lab396	plf/RecordSub.html	/^<a name="lab396"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab397	plf/RecordSub.html	/^<a name="lab397"><\/a><h3 class="section">Reduction<\/h3>$/;"	a
lab398	plf/RecordSub.html	/^<a name="lab398"><\/a><h1 class="section">Subtyping<\/h1>$/;"	a
lab399	plf/RecordSub.html	/^<a name="lab399"><\/a><h2 class="section">Definition<\/h2>$/;"	a
lab4	lf/Preface.html	/^<a name="lab4"><\/a><h2 class="section">Proof Assistants<\/h2>$/;"	a
lab4	plf/Preface.html	/^<a name="lab4"><\/a><h2 class="section">Type Systems<\/h2>$/;"	a
lab40	lf/Basics.html	/^<a name="lab40"><\/a><h1 class="section">More Exercises<\/h1>$/;"	a
lab40	plf/Equiv.html	/^<a name="lab40"><\/a><h4 class="section">Exercise: 4 stars, optional (havoc_copy)<\/h4>$/;"	a
lab400	plf/RecordSub.html	/^<a name="lab400"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab401	plf/RecordSub.html	/^<a name="lab401"><\/a><h4 class="section">Exercise: 2 stars (subtyping_example_1)<\/h4>$/;"	a
lab402	plf/RecordSub.html	/^<a name="lab402"><\/a><h4 class="section">Exercise: 1 star (subtyping_example_2)<\/h4>$/;"	a
lab403	plf/RecordSub.html	/^<a name="lab403"><\/a><h4 class="section">Exercise: 1 star (subtyping_example_3)<\/h4>$/;"	a
lab404	plf/RecordSub.html	/^<a name="lab404"><\/a><h4 class="section">Exercise: 2 stars (subtyping_example_4)<\/h4>$/;"	a
lab405	plf/RecordSub.html	/^<a name="lab405"><\/a><h2 class="section">Properties of Subtyping<\/h2>$/;"	a
lab406	plf/RecordSub.html	/^<a name="lab406"><\/a><h3 class="section">Well-Formedness<\/h3>$/;"	a
lab407	plf/RecordSub.html	/^<a name="lab407"><\/a><h3 class="section">Field Lookup<\/h3>$/;"	a
lab408	plf/RecordSub.html	/^<a name="lab408"><\/a><h4 class="section">Exercise: 3 stars (rcd_types_match_informal)<\/h4>$/;"	a
lab409	plf/RecordSub.html	/^<a name="lab409"><\/a><h3 class="section">Inversion Lemmas<\/h3>$/;"	a
lab41	lf/Basics.html	/^<a name="lab41"><\/a><h4 class="section">Exercise: 2 stars (boolean_functions)<\/h4>$/;"	a
lab41	plf/Equiv.html	/^<a name="lab41"><\/a><h4 class="section">Exercise: 4 stars, advanced (p1_p2_term)<\/h4>$/;"	a
lab410	plf/RecordSub.html	/^<a name="lab410"><\/a><h4 class="section">Exercise: 3 stars, optional (sub_inversion_arrow)<\/h4>$/;"	a
lab411	plf/RecordSub.html	/^<a name="lab411"><\/a><h1 class="section">Typing<\/h1>$/;"	a
lab412	plf/RecordSub.html	/^<a name="lab412"><\/a><h2 class="section">Typing Examples<\/h2>$/;"	a
lab413	plf/RecordSub.html	/^<a name="lab413"><\/a><h4 class="section">Exercise: 1 star (typing_example_0)<\/h4>$/;"	a
lab414	plf/RecordSub.html	/^<a name="lab414"><\/a><h4 class="section">Exercise: 2 stars (typing_example_1)<\/h4>$/;"	a
lab415	plf/RecordSub.html	/^<a name="lab415"><\/a><h4 class="section">Exercise: 2 stars, optional (typing_example_2)<\/h4>$/;"	a
lab416	plf/RecordSub.html	/^<a name="lab416"><\/a><h2 class="section">Properties of Typing<\/h2>$/;"	a
lab417	plf/RecordSub.html	/^<a name="lab417"><\/a><h3 class="section">Well-Formedness<\/h3>$/;"	a
lab418	plf/RecordSub.html	/^<a name="lab418"><\/a><h3 class="section">Field Lookup<\/h3>$/;"	a
lab419	plf/RecordSub.html	/^<a name="lab419"><\/a><h3 class="section">Progress<\/h3>$/;"	a
lab42	lf/Basics.html	/^<a name="lab42"><\/a><h4 class="section">Exercise: 3 stars, optional (andb_eq_orb)<\/h4>$/;"	a
lab42	plf/Equiv.html	/^<a name="lab42"><\/a><h4 class="section">Exercise: 4 stars, advanced (p1_p2_equiv)<\/h4>$/;"	a
lab420	plf/RecordSub.html	/^<a name="lab420"><\/a><h4 class="section">Exercise: 3 stars (canonical_forms_of_arrow_types)<\/h4>$/;"	a
lab421	plf/RecordSub.html	/^<a name="lab421"><\/a><h3 class="section">Inversion Lemmas<\/h3>$/;"	a
lab422	plf/RecordSub.html	/^<a name="lab422"><\/a><h3 class="section">Context Invariance<\/h3>$/;"	a
lab423	plf/RecordSub.html	/^<a name="lab423"><\/a><h3 class="section">Preservation<\/h3>$/;"	a
lab424	plf/Norm.html	/^<a name="lab424"><\/a><h4 class="section">Exercise: 2 stars (norm_fail)<\/h4>$/;"	a
lab425	plf/Norm.html	/^<a name="lab425"><\/a><h4 class="section">Exercise: 5 stars, recommended (norm)<\/h4>$/;"	a
lab426	plf/Norm.html	/^<a name="lab426"><\/a><h1 class="section">Language<\/h1>$/;"	a
lab427	plf/Norm.html	/^<a name="lab427"><\/a><h3 class="section">Syntax and Operational Semantics<\/h3>$/;"	a
lab428	plf/Norm.html	/^<a name="lab428"><\/a><h3 class="section">Substitution<\/h3>$/;"	a
lab429	plf/Norm.html	/^<a name="lab429"><\/a><h3 class="section">Reduction<\/h3>$/;"	a
lab43	lf/Basics.html	/^<a name="lab43"><\/a><h4 class="section">Exercise: 3 stars (binary)<\/h4>$/;"	a
lab43	plf/Equiv.html	/^<a name="lab43"><\/a><h4 class="section">Exercise: 4 stars, advanced (p3_p4_inequiv)<\/h4>$/;"	a
lab430	plf/Norm.html	/^<a name="lab430"><\/a><h3 class="section">Typing<\/h3>$/;"	a
lab431	plf/Norm.html	/^<a name="lab431"><\/a><h3 class="section">Context Invariance<\/h3>$/;"	a
lab432	plf/Norm.html	/^<a name="lab432"><\/a><h3 class="section">Preservation<\/h3>$/;"	a
lab433	plf/Norm.html	/^<a name="lab433"><\/a><h3 class="section">Determinism<\/h3>$/;"	a
lab434	plf/Norm.html	/^<a name="lab434"><\/a><h1 class="section">Normalization<\/h1>$/;"	a
lab435	plf/Norm.html	/^<a name="lab435"><\/a><h2 class="section">Membership in <span class="inlinecode"><span class="id" type="var">R_T<\/span><\/span> Is Invariant Under Reduction<\/h2>$/;"	a
lab436	plf/Norm.html	/^<a name="lab436"><\/a><h2 class="section">Closed Instances of Terms of Type <span class="inlinecode"><span class="id" type="var">t<\/span><\/span> Belong to <span class="inlinecode"><span class="id" type="var">R_T<\/span><\/span><\/h2>$/;"	a
lab437	plf/Norm.html	/^<a name="lab437"><\/a><h3 class="section">Multisubstitutions, Multi-Extensions, and Instantiations<\/h3>$/;"	a
lab438	plf/Norm.html	/^<a name="lab438"><\/a><h3 class="section">More Substitution Facts<\/h3>$/;"	a
lab439	plf/Norm.html	/^<a name="lab439"><\/a><h3 class="section">Properties of Multi-Substitutions<\/h3>$/;"	a
lab44	lf/Induction.html	/^   be helpful in sorting out such issues. <a name="lab44"><\/a><h1 class="section">Proof by Induction<\/h1>$/;"	a
lab44	plf/Equiv.html	/^<a name="lab44"><\/a><h4 class="section">Exercise: 5 stars, advanced, optional (p5_p6_equiv)<\/h4>$/;"	a
lab440	plf/Norm.html	/^<a name="lab440"><\/a><h3 class="section">Properties of Multi-Extensions<\/h3>$/;"	a
lab441	plf/Norm.html	/^<a name="lab441"><\/a><h3 class="section">Properties of Instantiations<\/h3>$/;"	a
lab442	plf/Norm.html	/^<a name="lab442"><\/a><h3 class="section">Congruence Lemmas on Multistep<\/h3>$/;"	a
lab443	plf/Norm.html	/^<a name="lab443"><\/a><h3 class="section">The R Lemma.<\/h3>$/;"	a
lab444	plf/Norm.html	/^<a name="lab444"><\/a><h3 class="section">Normalization Theorem<\/h3>$/;"	a
lab445	plf/LibTactics.html	/^<a name="lab445"><\/a><h1 class="section">Tools for Programming with Ltac<\/h1>$/;"	a
lab446	plf/LibTactics.html	/^<a name="lab446"><\/a><h2 class="section">Identity Continuation<\/h2>$/;"	a
lab447	plf/LibTactics.html	/^<a name="lab447"><\/a><h2 class="section">Untyped Arguments for Tactics<\/h2>$/;"	a
lab448	plf/LibTactics.html	/^<a name="lab448"><\/a><h2 class="section">Optional Arguments for Tactics<\/h2>$/;"	a
lab449	plf/LibTactics.html	/^<a name="lab449"><\/a><h2 class="section">Wildcard Arguments for Tactics<\/h2>$/;"	a
lab45	lf/Induction.html	/^<a name="lab45"><\/a><h4 class="section">Exercise: 2 stars, recommended (basic_induction)<\/h4>$/;"	a
lab45	plf/Equiv.html	/^<a name="lab45"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab450	plf/LibTactics.html	/^<a name="lab450"><\/a><h2 class="section">Position Markers<\/h2>$/;"	a
lab451	plf/LibTactics.html	/^<a name="lab451"><\/a><h2 class="section">List of Arguments for Tactics<\/h2>$/;"	a
lab452	plf/LibTactics.html	/^<a name="lab452"><\/a><h2 class="section">Databases of Lemmas<\/h2>$/;"	a
lab453	plf/LibTactics.html	/^<a name="lab453"><\/a><h2 class="section">On-the-Fly Removal of Hypotheses<\/h2>$/;"	a
lab454	plf/LibTactics.html	/^<a name="lab454"><\/a><h2 class="section">Numbers as Arguments<\/h2>$/;"	a
lab455	plf/LibTactics.html	/^<a name="lab455"><\/a><h2 class="section">Testing Tactics<\/h2>$/;"	a
lab456	plf/LibTactics.html	/^<a name="lab456"><\/a><h2 class="section">Check No Evar in Goal<\/h2>$/;"	a
lab457	plf/LibTactics.html	/^<a name="lab457"><\/a><h2 class="section">Helper Function for Introducing Evars<\/h2>$/;"	a
lab458	plf/LibTactics.html	/^<a name="lab458"><\/a><h2 class="section">Tagging of Hypotheses<\/h2>$/;"	a
lab459	plf/LibTactics.html	/^<a name="lab459"><\/a><h2 class="section">More Tagging of Hypotheses<\/h2>$/;"	a
lab46	lf/Induction.html	/^<a name="lab46"><\/a><h4 class="section">Exercise: 2 stars (double_plus)<\/h4>$/;"	a
lab46	plf/Equiv.html	/^<a name="lab46"><\/a><h4 class="section">Exercise: 4 stars, optional (for_while_equiv)<\/h4>$/;"	a
lab460	plf/LibTactics.html	/^<a name="lab460"><\/a><h2 class="section">Deconstructing Terms<\/h2>$/;"	a
lab461	plf/LibTactics.html	/^<a name="lab461"><\/a><h2 class="section">Action at Occurence and Action Not at Occurence<\/h2>$/;"	a
lab462	plf/LibTactics.html	/^<a name="lab462"><\/a><h2 class="section">An Alias for <span class="inlinecode"><span class="id" type="var">eq<\/span><\/span><\/h2>$/;"	a
lab463	plf/LibTactics.html	/^<a name="lab463"><\/a><h1 class="section">Common Tactics for Simplifying Goals Like <span class="inlinecode"><span class="id" type="tactic">intuition<\/span><\/span><\/h1>$/;"	a
lab464	plf/LibTactics.html	/^<a name="lab464"><\/a><h1 class="section">Backward and Forward Chaining<\/h1>$/;"	a
lab465	plf/LibTactics.html	/^<a name="lab465"><\/a><h2 class="section">Application<\/h2>$/;"	a
lab466	plf/LibTactics.html	/^<a name="lab466"><\/a><h2 class="section">Assertions<\/h2>$/;"	a
lab467	plf/LibTactics.html	/^<a name="lab467"><\/a><h2 class="section">Instantiation and Forward-Chaining<\/h2>$/;"	a
lab468	plf/LibTactics.html	/^<a name="lab468"><\/a><h2 class="section">Experimental Tactics for Application<\/h2>$/;"	a
lab469	plf/LibTactics.html	/^<a name="lab469"><\/a><h2 class="section">Adding Assumptions<\/h2>$/;"	a
lab47	lf/Induction.html	/^<a name="lab47"><\/a><h4 class="section">Exercise: 2 stars, optional (evenb_S)<\/h4>$/;"	a
lab47	plf/Equiv.html	/^<a name="lab47"><\/a><h4 class="section">Exercise: 3 stars, optional (swap_noninterfering_assignments)<\/h4>$/;"	a
lab470	plf/LibTactics.html	/^<a name="lab470"><\/a><h2 class="section">Application of Tautologies<\/h2>$/;"	a
lab471	plf/LibTactics.html	/^<a name="lab471"><\/a><h2 class="section">Application Modulo Equalities<\/h2>$/;"	a
lab472	plf/LibTactics.html	/^<a name="lab472"><\/a><h2 class="section">Absurd Goals<\/h2>$/;"	a
lab473	plf/LibTactics.html	/^<a name="lab473"><\/a><h1 class="section">Introduction and Generalization<\/h1>$/;"	a
lab474	plf/LibTactics.html	/^<a name="lab474"><\/a><h2 class="section">Introduction<\/h2>$/;"	a
lab475	plf/LibTactics.html	/^<a name="lab475"><\/a><h2 class="section">Generalization<\/h2>$/;"	a
lab476	plf/LibTactics.html	/^<a name="lab476"><\/a><h2 class="section">Naming<\/h2>$/;"	a
lab477	plf/LibTactics.html	/^<a name="lab477"><\/a><h1 class="section">Rewriting<\/h1>$/;"	a
lab478	plf/LibTactics.html	/^<a name="lab478"><\/a><h2 class="section">Replace<\/h2>$/;"	a
lab479	plf/LibTactics.html	/^<a name="lab479"><\/a><h2 class="section">Change<\/h2>$/;"	a
lab48	lf/Induction.html	/^<a name="lab48"><\/a><h4 class="section">Exercise: 1 star (destruct_induction)<\/h4>$/;"	a
lab48	plf/Equiv.html	/^<a name="lab48"><\/a><h4 class="section">Exercise: 4 stars, advanced, optional (capprox)<\/h4>$/;"	a
lab480	plf/LibTactics.html	/^<a name="lab480"><\/a><h2 class="section">Renaming<\/h2>$/;"	a
lab481	plf/LibTactics.html	/^<a name="lab481"><\/a><h2 class="section">Unfolding<\/h2>$/;"	a
lab482	plf/LibTactics.html	/^<a name="lab482"><\/a><h2 class="section">Simplification<\/h2>$/;"	a
lab483	plf/LibTactics.html	/^<a name="lab483"><\/a><h2 class="section">Reduction<\/h2>$/;"	a
lab484	plf/LibTactics.html	/^<a name="lab484"><\/a><h2 class="section">Substitution<\/h2>$/;"	a
lab485	plf/LibTactics.html	/^<a name="lab485"><\/a><h2 class="section">Tactics to Work with Proof Irrelevance<\/h2>$/;"	a
lab486	plf/LibTactics.html	/^<a name="lab486"><\/a><h2 class="section">Proving Equalities<\/h2>$/;"	a
lab487	plf/LibTactics.html	/^<a name="lab487"><\/a><h1 class="section">Inversion<\/h1>$/;"	a
lab488	plf/LibTactics.html	/^<a name="lab488"><\/a><h2 class="section">Basic Inversion<\/h2>$/;"	a
lab489	plf/LibTactics.html	/^<a name="lab489"><\/a><h2 class="section">Inversion with Substitution<\/h2>$/;"	a
lab49	lf/Induction.html	/^<a name="lab49"><\/a><h1 class="section">Proofs Within Proofs<\/h1>$/;"	a
lab49	plf/Hoare.html	/^<a name="lab49"><\/a><h1 class="section">Assertions<\/h1>$/;"	a
lab490	plf/LibTactics.html	/^<a name="lab490"><\/a><h2 class="section">Injection with Substitution<\/h2>$/;"	a
lab491	plf/LibTactics.html	/^<a name="lab491"><\/a><h2 class="section">Inversion and Injection with Substitution &mdash;rough implementation<\/h2>$/;"	a
lab492	plf/LibTactics.html	/^<a name="lab492"><\/a><h2 class="section">Case Analysis<\/h2>$/;"	a
lab493	plf/LibTactics.html	/^<a name="lab493"><\/a><h1 class="section">Induction<\/h1>$/;"	a
lab494	plf/LibTactics.html	/^<a name="lab494"><\/a><h1 class="section">Coinduction<\/h1>$/;"	a
lab495	plf/LibTactics.html	/^<a name="lab495"><\/a><h1 class="section">Decidable Equality<\/h1>$/;"	a
lab496	plf/LibTactics.html	/^<a name="lab496"><\/a><h1 class="section">Equivalence<\/h1>$/;"	a
lab497	plf/LibTactics.html	/^<a name="lab497"><\/a><h1 class="section">N-ary Conjunctions and Disjunctions<\/h1>$/;"	a
lab498	plf/LibTactics.html	/^<a name="lab498"><\/a><h1 class="section">Tactics to Prove Typeclass Instances<\/h1>$/;"	a
lab499	plf/LibTactics.html	/^<a name="lab499"><\/a><h1 class="section">Tactics to Invoke Automation<\/h1>$/;"	a
lab5	lf/Preface.html	/^<a name="lab5"><\/a><h2 class="section">Functional Programming<\/h2>$/;"	a
lab5	plf/Preface.html	/^<a name="lab5"><\/a><h2 class="section">Further Reading<\/h2>$/;"	a
lab50	lf/Induction.html	/^<a name="lab50"><\/a><h1 class="section">Formal vs. Informal Proof<\/h1>$/;"	a
lab50	plf/Hoare.html	/^<a name="lab50"><\/a><h4 class="section">Exercise: 1 star, optional (assertions)<\/h4>$/;"	a
lab500	plf/LibTactics.html	/^<a name="lab500"><\/a><h2 class="section">Definitions for Parsing Compatibility<\/h2>$/;"	a
lab501	plf/LibTactics.html	/^<a name="lab501"><\/a><h2 class="section"><span class="inlinecode"><span class="id" type="var">hint<\/span><\/span> to Add Hints Local to a Lemma<\/h2>$/;"	a
lab502	plf/LibTactics.html	/^<a name="lab502"><\/a><h2 class="section"><span class="inlinecode"><span class="id" type="var">jauto<\/span><\/span>, a New Automation Tactic<\/h2>$/;"	a
lab503	plf/LibTactics.html	/^<a name="lab503"><\/a><h2 class="section">Definitions of Automation Tactics<\/h2>$/;"	a
lab504	plf/LibTactics.html	/^<a name="lab504"><\/a><h2 class="section">Parsing for Light Automation<\/h2>$/;"	a
lab505	plf/LibTactics.html	/^<a name="lab505"><\/a><h2 class="section">Parsing for Strong Automation<\/h2>$/;"	a
lab506	plf/LibTactics.html	/^<a name="lab506"><\/a><h1 class="section">Tactics to Sort Out the Proof Context<\/h1>$/;"	a
lab507	plf/LibTactics.html	/^<a name="lab507"><\/a><h2 class="section">Hiding Hypotheses<\/h2>$/;"	a
lab508	plf/LibTactics.html	/^<a name="lab508"><\/a><h2 class="section">Sorting Hypotheses<\/h2>$/;"	a
lab509	plf/LibTactics.html	/^<a name="lab509"><\/a><h2 class="section">Clearing Hypotheses<\/h2>$/;"	a
lab51	lf/Induction.html	/^<a name="lab51"><\/a><h4 class="section">Exercise: 2 stars, advanced, recommended (plus_comm_informal)<\/h4>$/;"	a
lab51	plf/Hoare.html	/^<a name="lab51"><\/a><h1 class="section">Hoare Triples<\/h1>$/;"	a
lab510	plf/LibTactics.html	/^<a name="lab510"><\/a><h1 class="section">Tactics for Development Purposes<\/h1>$/;"	a
lab511	plf/LibTactics.html	/^<a name="lab511"><\/a><h2 class="section">Skipping Subgoals<\/h2>$/;"	a
lab512	plf/LibTactics.html	/^<a name="lab512"><\/a><h1 class="section">Compatibility with Standard Library<\/h1>$/;"	a
lab513	plf/UseTactics.html	/^<a name="lab513"><\/a><h1 class="section">Tactics for Introduction and Case Analysis<\/h1>$/;"	a
lab514	plf/UseTactics.html	/^<a name="lab514"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">introv<\/span><\/span><\/h2>$/;"	a
lab515	plf/UseTactics.html	/^<a name="lab515"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">inverts<\/span><\/span><\/h2>$/;"	a
lab516	plf/UseTactics.html	/^<a name="lab516"><\/a><h1 class="section">Tactics for N-ary Connectives<\/h1>$/;"	a
lab517	plf/UseTactics.html	/^<a name="lab517"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">splits<\/span><\/span><\/h2>$/;"	a
lab518	plf/UseTactics.html	/^<a name="lab518"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">branch<\/span><\/span><\/h2>$/;"	a
lab519	plf/UseTactics.html	/^<a name="lab519"><\/a><h2 class="section">The Tactic <span class="inlinecode">∃<\/span><\/h2>$/;"	a
lab52	lf/Induction.html	/^<a name="lab52"><\/a><h4 class="section">Exercise: 2 stars, optional (beq_nat_refl_informal)<\/h4>$/;"	a
lab52	plf/Hoare.html	/^<a name="lab52"><\/a><h4 class="section">Exercise: 1 star, optional (triples)<\/h4>$/;"	a
lab520	plf/UseTactics.html	/^<a name="lab520"><\/a><h1 class="section">Tactics for Working with Equality<\/h1>$/;"	a
lab521	plf/UseTactics.html	/^<a name="lab521"><\/a><h2 class="section">The Tactics <span class="inlinecode"><span class="id" type="var">asserts_rewrite<\/span><\/span> and <span class="inlinecode"><span class="id" type="var">cuts_rewrite<\/span><\/span><\/h2>$/;"	a
lab522	plf/UseTactics.html	/^<a name="lab522"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">substs<\/span><\/span><\/h2>$/;"	a
lab523	plf/UseTactics.html	/^<a name="lab523"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">fequals<\/span><\/span><\/h2>$/;"	a
lab524	plf/UseTactics.html	/^<a name="lab524"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">applys_eq<\/span><\/span><\/h2>$/;"	a
lab525	plf/UseTactics.html	/^<a name="lab525"><\/a><h1 class="section">Some Convenient Shorthands<\/h1>$/;"	a
lab526	plf/UseTactics.html	/^<a name="lab526"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">unfolds<\/span><\/span><\/h2>$/;"	a
lab527	plf/UseTactics.html	/^<a name="lab527"><\/a><h2 class="section">The Tactics <span class="inlinecode"><span class="id" type="var">false<\/span><\/span> and <span class="inlinecode"><span class="id" type="var">tryfalse<\/span><\/span><\/h2>$/;"	a
lab528	plf/UseTactics.html	/^<a name="lab528"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">gen<\/span><\/span><\/h2>$/;"	a
lab529	plf/UseTactics.html	/^<a name="lab529"><\/a><h2 class="section">The Tactics <span class="inlinecode"><span class="id" type="var">skip<\/span><\/span>, <span class="inlinecode"><span class="id" type="var">skip_rewrite<\/span><\/span> and <span class="inlinecode"><span class="id" type="var">skip_goal<\/span><\/span><\/h2>$/;"	a
lab53	plf/Hoare.html	/^<a name="lab53"><\/a><h4 class="section">Exercise: 1 star, optional (valid_triples)<\/h4>$/;"	a
lab530	plf/UseTactics.html	/^<a name="lab530"><\/a><h2 class="section">The Tactic <span class="inlinecode"><span class="id" type="var">sort<\/span><\/span><\/h2>$/;"	a
lab531	plf/UseTactics.html	/^<a name="lab531"><\/a><h1 class="section">Tactics for Advanced Lemma Instantiation<\/h1>$/;"	a
lab532	plf/UseTactics.html	/^<a name="lab532"><\/a><h2 class="section">Working of <span class="inlinecode"><span class="id" type="var">lets<\/span><\/span><\/h2>$/;"	a
lab533	plf/UseTactics.html	/^<a name="lab533"><\/a><h2 class="section">Working of <span class="inlinecode"><span class="id" type="var">applys<\/span><\/span>, <span class="inlinecode"><span class="id" type="var">forwards<\/span><\/span> and <span class="inlinecode"><span class="id" type="var">specializes<\/span><\/span><\/h2>$/;"	a
lab534	plf/UseTactics.html	/^<a name="lab534"><\/a><h2 class="section">Example of Instantiations<\/h2>$/;"	a
lab535	plf/UseTactics.html	/^<a name="lab535"><\/a><h1 class="section">Summary<\/h1>$/;"	a
lab536	plf/UseAuto.html	/^<a name="lab536"><\/a><h1 class="section">Basic Features of Proof Search<\/h1>$/;"	a
lab537	plf/UseAuto.html	/^<a name="lab537"><\/a><h2 class="section">Strength of Proof Search<\/h2>$/;"	a
lab538	plf/UseAuto.html	/^<a name="lab538"><\/a><h2 class="section">Basics<\/h2>$/;"	a
lab539	plf/UseAuto.html	/^<a name="lab539"><\/a><h2 class="section">Conjunctions<\/h2>$/;"	a
lab54	plf/Hoare.html	/^<a name="lab54"><\/a><h1 class="section">Proof Rules<\/h1>$/;"	a
lab540	plf/UseAuto.html	/^<a name="lab540"><\/a><h2 class="section">Disjunctions<\/h2>$/;"	a
lab541	plf/UseAuto.html	/^<a name="lab541"><\/a><h2 class="section">Existentials<\/h2>$/;"	a
lab542	plf/UseAuto.html	/^<a name="lab542"><\/a><h2 class="section">Negation<\/h2>$/;"	a
lab543	plf/UseAuto.html	/^<a name="lab543"><\/a><h2 class="section">Equalities<\/h2>$/;"	a
lab544	plf/UseAuto.html	/^<a name="lab544"><\/a><h1 class="section">How Proof Search Works<\/h1>$/;"	a
lab545	plf/UseAuto.html	/^<a name="lab545"><\/a><h2 class="section">Search Depth<\/h2>$/;"	a
lab546	plf/UseAuto.html	/^<a name="lab546"><\/a><h2 class="section">Backtracking<\/h2>$/;"	a
lab547	plf/UseAuto.html	/^<a name="lab547"><\/a><h2 class="section">Adding Hints<\/h2>$/;"	a
lab548	plf/UseAuto.html	/^<a name="lab548"><\/a><h2 class="section">Integration of Automation in Tactics<\/h2>$/;"	a
lab549	plf/UseAuto.html	/^<a name="lab549"><\/a><h1 class="section">Examples of Use of Automation<\/h1>$/;"	a
lab55	plf/Hoare.html	/^<a name="lab55"><\/a><h2 class="section">Assignment<\/h2>$/;"	a
lab550	plf/UseAuto.html	/^<a name="lab550"><\/a><h2 class="section">Determinism<\/h2>$/;"	a
lab551	plf/UseAuto.html	/^<a name="lab551"><\/a><h2 class="section">Preservation for STLC<\/h2>$/;"	a
lab552	plf/UseAuto.html	/^<a name="lab552"><\/a><h2 class="section">Progress for STLC<\/h2>$/;"	a
lab553	plf/UseAuto.html	/^<a name="lab553"><\/a><h2 class="section">BigStep and SmallStep<\/h2>$/;"	a
lab554	plf/UseAuto.html	/^<a name="lab554"><\/a><h2 class="section">Preservation for STLCRef<\/h2>$/;"	a
lab555	plf/UseAuto.html	/^<a name="lab555"><\/a><h2 class="section">Progress for STLCRef<\/h2>$/;"	a
lab556	plf/UseAuto.html	/^<a name="lab556"><\/a><h2 class="section">Subtyping<\/h2>$/;"	a
lab557	plf/UseAuto.html	/^<a name="lab557"><\/a><h1 class="section">Advanced Topics in Proof Search<\/h1>$/;"	a
lab558	plf/UseAuto.html	/^<a name="lab558"><\/a><h2 class="section">Stating Lemmas in the Right Way<\/h2>$/;"	a
lab559	plf/UseAuto.html	/^<a name="lab559"><\/a><h2 class="section">Unfolding of Definitions During Proof-Search<\/h2>$/;"	a
lab56	plf/Hoare.html	/^<a name="lab56"><\/a><h4 class="section">Exercise: 2 stars (hoare_asgn_examples)<\/h4>$/;"	a
lab560	plf/UseAuto.html	/^<a name="lab560"><\/a><h2 class="section">Automation for Proving Absurd Goals<\/h2>$/;"	a
lab561	plf/UseAuto.html	/^<a name="lab561"><\/a><h2 class="section">Automation for Transitivity Lemmas<\/h2>$/;"	a
lab562	plf/UseAuto.html	/^<a name="lab562"><\/a><h1 class="section">Decision Procedures<\/h1>$/;"	a
lab563	plf/UseAuto.html	/^<a name="lab563"><\/a><h2 class="section">Omega<\/h2>$/;"	a
lab564	plf/UseAuto.html	/^<a name="lab564"><\/a><h2 class="section">Ring<\/h2>$/;"	a
lab565	plf/UseAuto.html	/^<a name="lab565"><\/a><h2 class="section">Congruence<\/h2>$/;"	a
lab566	plf/UseAuto.html	/^<a name="lab566"><\/a><h1 class="section">Summary<\/h1>$/;"	a
lab567	plf/PE.html	/^<a name="lab567"><\/a><h1 class="section">Generalizing Constant Folding<\/h1>$/;"	a
lab568	plf/PE.html	/^<a name="lab568"><\/a><h2 class="section">Partial States<\/h2>$/;"	a
lab569	plf/PE.html	/^<a name="lab569"><\/a><h2 class="section">Arithmetic Expressions<\/h2>$/;"	a
lab57	plf/Hoare.html	/^<a name="lab57"><\/a><h4 class="section">Exercise: 2 stars, recommended (hoare_asgn_wrong)<\/h4>$/;"	a
lab570	plf/PE.html	/^<a name="lab570"><\/a><h2 class="section">Boolean Expressions<\/h2>$/;"	a
lab571	plf/PE.html	/^<a name="lab571"><\/a><h1 class="section">Partial Evaluation of Commands, Without Loops<\/h1>$/;"	a
lab572	plf/PE.html	/^<a name="lab572"><\/a><h2 class="section">Assignment<\/h2>$/;"	a
lab573	plf/PE.html	/^<a name="lab573"><\/a><h2 class="section">Conditional<\/h2>$/;"	a
lab574	plf/PE.html	/^<a name="lab574"><\/a><h2 class="section">The Partial Evaluation Relation<\/h2>$/;"	a
lab575	plf/PE.html	/^<a name="lab575"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab576	plf/PE.html	/^<a name="lab576"><\/a><h2 class="section">Correctness of Partial Evaluation<\/h2>$/;"	a
lab577	plf/PE.html	/^<a name="lab577"><\/a><h1 class="section">Partial Evaluation of Loops<\/h1>$/;"	a
lab578	plf/PE.html	/^<a name="lab578"><\/a><h2 class="section">Examples<\/h2>$/;"	a
lab579	plf/PE.html	/^<a name="lab579"><\/a><h2 class="section">Correctness<\/h2>$/;"	a
lab58	plf/Hoare.html	/^<a name="lab58"><\/a><h4 class="section">Exercise: 3 stars, advanced (hoare_asgn_fwd)<\/h4>$/;"	a
lab580	plf/PE.html	/^<a name="lab580"><\/a><h1 class="section">Partial Evaluation of Flowchart Programs<\/h1>$/;"	a
lab581	plf/PE.html	/^<a name="lab581"><\/a><h2 class="section">Basic blocks<\/h2>$/;"	a
lab582	plf/PE.html	/^<a name="lab582"><\/a><h2 class="section">Flowchart programs<\/h2>$/;"	a
lab583	plf/PE.html	/^<a name="lab583"><\/a><h2 class="section">Partial Evaluation of Basic Blocks and Flowchart Programs<\/h2>$/;"	a
lab584	plf/Postscript.html	/^<a name="lab584"><\/a><h1 class="section">Looking Back<\/h1>$/;"	a
lab585	plf/Postscript.html	/^<a name="lab585"><\/a><h1 class="section">Looking Around<\/h1>$/;"	a
lab586	plf/Postscript.html	/^<a name="lab586"><\/a><h3 class="section">CompCert<\/h3>$/;"	a
lab587	plf/Postscript.html	/^<a name="lab587"><\/a><h3 class="section">seL4<\/h3>$/;"	a
lab588	plf/Postscript.html	/^<a name="lab588"><\/a><h3 class="section">CertiKOS<\/h3>$/;"	a
lab589	plf/Postscript.html	/^<a name="lab589"><\/a><h3 class="section">Ironclad<\/h3>$/;"	a
lab59	plf/Hoare.html	/^<a name="lab59"><\/a><h4 class="section">Exercise: 2 stars, advanced (hoare_asgn_fwd_exists)<\/h4>$/;"	a
lab590	plf/Postscript.html	/^<a name="lab590"><\/a><h3 class="section">Verdi<\/h3>$/;"	a
lab591	plf/Postscript.html	/^<a name="lab591"><\/a><h3 class="section">DeepSpec<\/h3>$/;"	a
lab592	plf/Postscript.html	/^<a name="lab592"><\/a><h3 class="section">REMS<\/h3>$/;"	a
lab593	plf/Postscript.html	/^<a name="lab593"><\/a><h3 class="section">Others<\/h3>$/;"	a
lab594	plf/Postscript.html	/^<a name="lab594"><\/a><h1 class="section">Looking Forward<\/h1>$/;"	a
lab595	plf/Bib.html	/^<a name="lab595"><\/a><h1 class="section">Resources cited in this volume<\/h1>$/;"	a
lab6	lf/Preface.html	/^<a name="lab6"><\/a><h2 class="section">Further Reading<\/h2>$/;"	a
lab6	plf/Preface.html	/^<a name="lab6"><\/a><h1 class="section">Note for Instructors<\/h1>$/;"	a
lab60	lf/Lists.html	/^<a name="lab60"><\/a><h1 class="section">Pairs of Numbers<\/h1>$/;"	a
lab60	plf/Hoare.html	/^<a name="lab60"><\/a><h2 class="section">Consequence<\/h2>$/;"	a
lab61	lf/Lists.html	/^<a name="lab61"><\/a><h4 class="section">Exercise: 1 star (snd_fst_is_swap)<\/h4>$/;"	a
lab61	plf/Hoare.html	/^<a name="lab61"><\/a><h2 class="section">Digression: The <span class="inlinecode"><span class="id" type="tactic">eapply<\/span><\/span> Tactic<\/h2>$/;"	a
lab62	lf/Lists.html	/^<a name="lab62"><\/a><h4 class="section">Exercise: 1 star, optional (fst_swap_is_snd)<\/h4>$/;"	a
lab62	plf/Hoare.html	/^<a name="lab62"><\/a><h4 class="section">Exercise: 2 stars (hoare_asgn_examples_2)<\/h4>$/;"	a
lab63	lf/Lists.html	/^<a name="lab63"><\/a><h1 class="section">Lists of Numbers<\/h1>$/;"	a
lab63	plf/Hoare.html	/^<a name="lab63"><\/a><h2 class="section">Skip<\/h2>$/;"	a
lab64	lf/Lists.html	/^<a name="lab64"><\/a><h3 class="section">Repeat<\/h3>$/;"	a
lab64	plf/Hoare.html	/^<a name="lab64"><\/a><h2 class="section">Sequencing<\/h2>$/;"	a
lab65	lf/Lists.html	/^<a name="lab65"><\/a><h3 class="section">Length<\/h3>$/;"	a
lab65	plf/Hoare.html	/^<a name="lab65"><\/a><h4 class="section">Exercise: 2 stars, recommended (hoare_asgn_example4)<\/h4>$/;"	a
lab66	lf/Lists.html	/^<a name="lab66"><\/a><h3 class="section">Append<\/h3>$/;"	a
lab66	plf/Hoare.html	/^<a name="lab66"><\/a><h4 class="section">Exercise: 3 stars (swap_exercise)<\/h4>$/;"	a
lab67	lf/Lists.html	/^<a name="lab67"><\/a><h3 class="section">Head (with default) and Tail<\/h3>$/;"	a
lab67	plf/Hoare.html	/^<a name="lab67"><\/a><h4 class="section">Exercise: 3 stars (hoarestate1)<\/h4>$/;"	a
lab68	lf/Lists.html	/^<a name="lab68"><\/a><h3 class="section">Exercises<\/h3>$/;"	a
lab68	plf/Hoare.html	/^<a name="lab68"><\/a><h2 class="section">Conditionals<\/h2>$/;"	a
lab69	lf/Lists.html	/^<a name="lab69"><\/a><h4 class="section">Exercise: 2 stars, recommended (list_funs)<\/h4>$/;"	a
lab69	plf/Hoare.html	/^<a name="lab69"><\/a><h3 class="section">Example<\/h3>$/;"	a
lab7	lf/Preface.html	/^<a name="lab7"><\/a><h1 class="section">Practicalities<\/h1>$/;"	a
lab7	plf/Preface.html	/^<a name="lab7"><\/a><h1 class="section">Thanks<\/h1>$/;"	a
lab70	lf/Lists.html	/^<a name="lab70"><\/a><h4 class="section">Exercise: 3 stars, advanced (alternate)<\/h4>$/;"	a
lab70	plf/Hoare.html	/^<a name="lab70"><\/a><h4 class="section">Exercise: 2 stars (if_minus_plus)<\/h4>$/;"	a
lab71	lf/Lists.html	/^<a name="lab71"><\/a><h3 class="section">Bags via Lists<\/h3>$/;"	a
lab71	plf/Hoare.html	/^<a name="lab71"><\/a><h3 class="section">Exercise: One-sided conditionals<\/h3>$/;"	a
lab72	lf/Lists.html	/^<a name="lab72"><\/a><h4 class="section">Exercise: 3 stars, recommended (bag_functions)<\/h4>$/;"	a
lab72	plf/Hoare.html	/^<a name="lab72"><\/a><h4 class="section">Exercise: 4 stars (if1_hoare)<\/h4>$/;"	a
lab73	lf/Lists.html	/^<a name="lab73"><\/a><h4 class="section">Exercise: 3 stars, optional (bag_more_functions)<\/h4>$/;"	a
lab73	plf/Hoare.html	/^<a name="lab73"><\/a><h2 class="section">Loops<\/h2>$/;"	a
lab74	lf/Lists.html	/^<a name="lab74"><\/a><h4 class="section">Exercise: 3 stars, recommended (bag_theorem)<\/h4>$/;"	a
lab74	plf/Hoare.html	/^<a name="lab74"><\/a><h3 class="section">Exercise: <span class="inlinecode"><span class="id" type="var">REPEAT<\/span><\/span><\/h3>$/;"	a
lab75	lf/Lists.html	/^<a name="lab75"><\/a><h1 class="section">Reasoning About Lists<\/h1>$/;"	a
lab75	plf/Hoare.html	/^<a name="lab75"><\/a><h4 class="section">Exercise: 4 stars, advanced (hoare_repeat)<\/h4>$/;"	a
lab76	lf/Lists.html	/^<a name="lab76"><\/a><h3 class="section">Micro-Sermon<\/h3>$/;"	a
lab76	plf/Hoare.html	/^<a name="lab76"><\/a><h1 class="section">Summary<\/h1>$/;"	a
lab77	lf/Lists.html	/^<a name="lab77"><\/a><h2 class="section">Induction on Lists<\/h2>$/;"	a
lab77	plf/Hoare.html	/^<a name="lab77"><\/a><h1 class="section">Additional Exercises<\/h1>$/;"	a
lab78	lf/Lists.html	/^<a name="lab78"><\/a><h3 class="section">Reversing a List<\/h3>$/;"	a
lab78	plf/Hoare.html	/^<a name="lab78"><\/a><h4 class="section">Exercise: 3 stars (himp_hoare)<\/h4>$/;"	a
lab79	lf/Lists.html	/^<a name="lab79"><\/a><h3 class="section">Properties of <span class="inlinecode"><span class="id" type="var">rev<\/span><\/span><\/h3>$/;"	a
lab79	plf/Hoare2.html	/^<a name="lab79"><\/a><h1 class="section">Decorated Programs<\/h1>$/;"	a
lab8	lf/Preface.html	/^<a name="lab8"><\/a><h2 class="section">Chapter Dependencies<\/h2>$/;"	a
lab8	plf/Equiv.html	/^<a name="lab8"><\/a><h3 class="section">Some Advice for Working on Exercises:<\/h3>$/;"	a
lab80	lf/Lists.html	/^<a name="lab80"><\/a><h2 class="section"><span class="inlinecode"><span class="id" type="var">Search<\/span><\/span><\/h2>$/;"	a
lab80	plf/Hoare2.html	/^<a name="lab80"><\/a><h2 class="section">Example: Swapping Using Addition and Subtraction<\/h2>$/;"	a
lab81	lf/Lists.html	/^<a name="lab81"><\/a><h2 class="section">List Exercises, Part 1<\/h2>$/;"	a
lab81	plf/Hoare2.html	/^<a name="lab81"><\/a><h2 class="section">Example: Simple Conditionals<\/h2>$/;"	a
lab82	lf/Lists.html	/^<a name="lab82"><\/a><h4 class="section">Exercise: 3 stars (list_exercises)<\/h4>$/;"	a
lab82	plf/Hoare2.html	/^<a name="lab82"><\/a><h4 class="section">Exercise: 2 stars (if_minus_plus_reloaded)<\/h4>$/;"	a
lab83	lf/Lists.html	/^<a name="lab83"><\/a><h4 class="section">Exercise: 2 stars (beq_natlist)<\/h4>$/;"	a
lab83	plf/Hoare2.html	/^<a name="lab83"><\/a><h2 class="section">Example: Reduce to Zero<\/h2>$/;"	a
lab84	lf/Lists.html	/^<a name="lab84"><\/a><h2 class="section">List Exercises, Part 2<\/h2>$/;"	a
lab84	plf/Hoare2.html	/^<a name="lab84"><\/a><h2 class="section">Example: Division<\/h2>$/;"	a
lab85	lf/Lists.html	/^<a name="lab85"><\/a><h4 class="section">Exercise: 3 stars, advanced (bag_proofs)<\/h4>$/;"	a
lab85	plf/Hoare2.html	/^<a name="lab85"><\/a><h1 class="section">Finding Loop Invariants<\/h1>$/;"	a
lab86	lf/Lists.html	/^<a name="lab86"><\/a><h4 class="section">Exercise: 3 stars, optional (bag_count_sum)<\/h4>$/;"	a
lab86	plf/Hoare2.html	/^<a name="lab86"><\/a><h2 class="section">Example: Slow Subtraction<\/h2>$/;"	a
lab87	lf/Lists.html	/^<a name="lab87"><\/a><h4 class="section">Exercise: 4 stars, advanced (rev_injective)<\/h4>$/;"	a
lab87	plf/Hoare2.html	/^<a name="lab87"><\/a><h2 class="section">Exercise: Slow Assignment<\/h2>$/;"	a
lab88	lf/Lists.html	/^<a name="lab88"><\/a><h1 class="section">Options<\/h1>$/;"	a
lab88	plf/Hoare2.html	/^<a name="lab88"><\/a><h4 class="section">Exercise: 2 stars (slow_assignment)<\/h4>$/;"	a
lab89	lf/Lists.html	/^<a name="lab89"><\/a><h4 class="section">Exercise: 2 stars (hd_error)<\/h4>$/;"	a
lab89	plf/Hoare2.html	/^<a name="lab89"><\/a><h2 class="section">Exercise: Slow Addition<\/h2>$/;"	a
lab9	lf/Preface.html	/^<a name="lab9"><\/a><h2 class="section">System Requirements<\/h2>$/;"	a
lab9	plf/Equiv.html	/^<a name="lab9"><\/a><h1 class="section">Behavioral Equivalence<\/h1>$/;"	a
lab90	lf/Lists.html	/^<a name="lab90"><\/a><h4 class="section">Exercise: 1 star, optional (option_elim_hd)<\/h4>$/;"	a
lab90	plf/Hoare2.html	/^<a name="lab90"><\/a><h4 class="section">Exercise: 3 stars, optional (add_slowly_decoration)<\/h4>$/;"	a
lab91	lf/Lists.html	/^<a name="lab91"><\/a><h1 class="section">Partial Maps<\/h1>$/;"	a
lab91	plf/Hoare2.html	/^<a name="lab91"><\/a><h2 class="section">Example: Parity<\/h2>$/;"	a
lab92	lf/Lists.html	/^<a name="lab92"><\/a><h4 class="section">Exercise: 1 star (beq_id_refl)<\/h4>$/;"	a
lab92	plf/Hoare2.html	/^<a name="lab92"><\/a><h4 class="section">Exercise: 3 stars, optional (parity_formal)<\/h4>$/;"	a
lab93	lf/Lists.html	/^<a name="lab93"><\/a><h4 class="section">Exercise: 1 star (update_eq)<\/h4>$/;"	a
lab93	plf/Hoare2.html	/^<a name="lab93"><\/a><h2 class="section">Example: Finding Square Roots<\/h2>$/;"	a
lab94	lf/Lists.html	/^<a name="lab94"><\/a><h4 class="section">Exercise: 1 star (update_neq)<\/h4>$/;"	a
lab94	plf/Hoare2.html	/^<a name="lab94"><\/a><h2 class="section">Example: Squaring<\/h2>$/;"	a
lab95	lf/Lists.html	/^<a name="lab95"><\/a><h4 class="section">Exercise: 2 stars (baz_num_elts)<\/h4>$/;"	a
lab95	plf/Hoare2.html	/^<a name="lab95"><\/a><h2 class="section">Exercise: Factorial<\/h2>$/;"	a
lab96	lf/Poly.html	/^<a name="lab96"><\/a><h2 class="section">Polymorphic Lists<\/h2>$/;"	a
lab96	plf/Hoare2.html	/^<a name="lab96"><\/a><h4 class="section">Exercise: 3 stars (factorial)<\/h4>$/;"	a
lab97	lf/Poly.html	/^<a name="lab97"><\/a><h4 class="section">Exercise: 2 stars (mumble_grumble)<\/h4>$/;"	a
lab97	plf/Hoare2.html	/^<a name="lab97"><\/a><h2 class="section">Exercise: Min<\/h2>$/;"	a
lab98	lf/Poly.html	/^<a name="lab98"><\/a><h3 class="section">Type Annotation Inference<\/h3>$/;"	a
lab98	plf/Hoare2.html	/^<a name="lab98"><\/a><h4 class="section">Exercise: 3 stars (Min_Hoare)<\/h4>$/;"	a
lab99	lf/Poly.html	/^<a name="lab99"><\/a><h3 class="section">Type Argument Synthesis<\/h3>$/;"	a
lab99	plf/Hoare2.html	/^<a name="lab99"><\/a><h4 class="section">Exercise: 3 stars (two_loops)<\/h4>$/;"	a
le	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="le"><span class="id" type="inductive">le<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
le_S	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="le_S"><span class="id" type="constructor">le_S<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>, (<a class="idref" href="IndPrinciples.html#le"><span class="id" type="inductive">le<\/span><\/a> <span class="id" type="var">n<\/span> <a class="idref" href="IndPrinciples.html#m"><span class="id" type="variable">m<\/span><\/a>) → (<a class="idref" href="IndPrinciples.html#le"><span class="id" type="inductive">le<\/span><\/a> <span class="id" type="var">n<\/span> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndPrinciples.html#m"><span class="id" type="variable">m<\/span><\/a>)).<br\/><hr class='doublespaceincode'\/>$/;"	a
le_S_n	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_S_n"><span class="id" type="lemma">le_S_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
le_Sn_le	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_Sn_le"><span class="id" type="lemma">le_Sn_le<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="Rel.html#n"><span class="id" type="variable">n<\/span><\/a> ≤ <a class="idref" href="Rel.html#m"><span class="id" type="variable">m<\/span><\/a> → <a class="idref" href="Rel.html#n"><span class="id" type="variable">n<\/span><\/a> ≤ <a class="idref" href="Rel.html#m"><span class="id" type="variable">m<\/span><\/a>.<br\/>$/;"	a
le_Sn_n	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_Sn_n"><span class="id" type="lemma">le_Sn_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
le_antisym	lf/Auto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="le_antisym"><span class="id" type="lemma">le_antisym<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>: <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, (<a class="idref" href="Auto.html#n"><span class="id" type="variable">n<\/span><\/a> ≤ <a class="idref" href="Auto.html#m"><span class="id" type="variable">m<\/span><\/a> ∧ <a class="idref" href="Auto.html#m"><span class="id" type="variable">m<\/span><\/a> ≤ <a class="idref" href="Auto.html#n"><span class="id" type="variable">n<\/span><\/a>) → <a class="idref" href="Auto.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="Auto.html#m"><span class="id" type="variable">m<\/span><\/a>.<br\/>$/;"	a
le_antisymmetric	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_antisymmetric"><span class="id" type="lemma">le_antisymmetric<\/span><\/a> :<br\/>$/;"	a
le_gt_false	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="le_gt_false"><span class="id" type="axiom">le_gt_false<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
le_n	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="le_n"><span class="id" type="constructor">le_n<\/span><\/a> : <a class="idref" href="IndPrinciples.html#le"><span class="id" type="inductive">le<\/span><\/a> <span class="id" type="var">n<\/span> <span class="id" type="var">n<\/span><br\/>$/;"	a
le_not_a_partial_function	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_not_a_partial_function"><span class="id" type="lemma">le_not_a_partial_function<\/span><\/a> :<br\/>$/;"	a
le_not_gt	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="le_not_gt"><span class="id" type="axiom">le_not_gt<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
le_not_symmetric	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_not_symmetric"><span class="id" type="lemma">le_not_symmetric<\/span><\/a> :<br\/>$/;"	a
le_order	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_order"><span class="id" type="lemma">le_order<\/span><\/a> :<br\/>$/;"	a
le_plus_l	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_plus_l"><span class="id" type="lemma">le_plus_l<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span>,<br\/>$/;"	a
le_reflexive	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_reflexive"><span class="id" type="lemma">le_reflexive<\/span><\/a> :<br\/>$/;"	a
le_step	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_step"><span class="id" type="lemma">le_step<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
le_trans	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="le_trans"><span class="id" type="lemma">le_trans<\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">o<\/span>, <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> ≤ <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> → <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> ≤ <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a> → <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a> ≤ <a class="idref" href="IndProp.html#o"><span class="id" type="variable">o<\/span><\/a>.<br\/>$/;"	a
le_trans	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="le_trans"><span class="id" type="lemma">le_trans<\/span><\/a> :<br\/>$/;"	a
leaf	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="leaf"><span class="id" type="constructor">leaf<\/span><\/a> : <span class="id" type="var">X<\/span> → <a class="idref" href="IndPrinciples.html#tree"><span class="id" type="inductive">tree<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
leb	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="leb"><span class="id" type="definition">leb<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
leb_complete	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="leb_complete"><span class="id" type="lemma">leb_complete<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
leb_correct	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="leb_correct"><span class="id" type="lemma">leb_correct<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
leb_iff	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="leb_iff"><span class="id" type="lemma">leb_iff<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
leb_true_trans	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="leb_true_trans"><span class="id" type="lemma">leb_true_trans<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span>,<br\/>$/;"	a
lemma_A	lf/coqindex.html	/^<a name="lemma_A"><\/a><h2>A <\/h2>$/;"	a
lemma_A	plf/coqindex.html	/^<a name="lemma_A"><\/a><h2>A <\/h2>$/;"	a
lemma_B	lf/coqindex.html	/^<br\/><br\/><a name="lemma_B"><\/a><h2>B <\/h2>$/;"	a
lemma_B	plf/coqindex.html	/^<br\/><br\/><a name="lemma_B"><\/a><h2>B <\/h2>$/;"	a
lemma_C	lf/coqindex.html	/^<br\/><br\/><a name="lemma_C"><\/a><h2>C <\/h2>$/;"	a
lemma_C	plf/coqindex.html	/^<br\/><br\/><a name="lemma_C"><\/a><h2>C <\/h2>$/;"	a
lemma_D	lf/coqindex.html	/^<br\/><br\/><a name="lemma_D"><\/a><h2>D <\/h2>$/;"	a
lemma_D	plf/coqindex.html	/^<br\/><br\/><a name="lemma_D"><\/a><h2>D <\/h2>$/;"	a
lemma_E	lf/coqindex.html	/^<br\/><br\/><a name="lemma_E"><\/a><h2>E <\/h2>$/;"	a
lemma_E	plf/coqindex.html	/^<br\/><br\/><a name="lemma_E"><\/a><h2>E <\/h2>$/;"	a
lemma_F	lf/coqindex.html	/^<br\/><br\/><a name="lemma_F"><\/a><h2>F <\/h2>$/;"	a
lemma_F	plf/coqindex.html	/^<br\/><br\/><a name="lemma_F"><\/a><h2>F <\/h2>$/;"	a
lemma_G	plf/coqindex.html	/^<br\/><br\/><a name="lemma_G"><\/a><h2>G <\/h2>$/;"	a
lemma_H	plf/coqindex.html	/^<br\/><br\/><a name="lemma_H"><\/a><h2>H <\/h2>$/;"	a
lemma_I	lf/coqindex.html	/^<br\/><br\/><a name="lemma_I"><\/a><h2>I <\/h2>$/;"	a
lemma_I	plf/coqindex.html	/^<br\/><br\/><a name="lemma_I"><\/a><h2>I <\/h2>$/;"	a
lemma_L	lf/coqindex.html	/^<br\/><br\/><a name="lemma_L"><\/a><h2>L <\/h2>$/;"	a
lemma_L	plf/coqindex.html	/^<br\/><br\/><a name="lemma_L"><\/a><h2>L <\/h2>$/;"	a
lemma_M	lf/coqindex.html	/^<br\/><br\/><a name="lemma_M"><\/a><h2>M <\/h2>$/;"	a
lemma_M	plf/coqindex.html	/^<br\/><br\/><a name="lemma_M"><\/a><h2>M <\/h2>$/;"	a
lemma_N	lf/coqindex.html	/^<br\/><br\/><a name="lemma_N"><\/a><h2>N <\/h2>$/;"	a
lemma_N	plf/coqindex.html	/^<br\/><br\/><a name="lemma_N"><\/a><h2>N <\/h2>$/;"	a
lemma_O	lf/coqindex.html	/^<br\/><br\/><a name="lemma_O"><\/a><h2>O <\/h2>$/;"	a
lemma_O	plf/coqindex.html	/^<br\/><br\/><a name="lemma_O"><\/a><h2>O <\/h2>$/;"	a
lemma_P	lf/coqindex.html	/^<br\/><br\/><a name="lemma_P"><\/a><h2>P <\/h2>$/;"	a
lemma_P	plf/coqindex.html	/^<br\/><br\/><a name="lemma_P"><\/a><h2>P <\/h2>$/;"	a
lemma_R	lf/coqindex.html	/^<br\/><br\/><a name="lemma_R"><\/a><h2>R <\/h2>$/;"	a
lemma_R	plf/coqindex.html	/^<br\/><br\/><a name="lemma_R"><\/a><h2>R <\/h2>$/;"	a
lemma_S	lf/coqindex.html	/^<br\/><br\/><a name="lemma_S"><\/a><h2>S <\/h2>$/;"	a
lemma_S	plf/coqindex.html	/^<br\/><br\/><a name="lemma_S"><\/a><h2>S <\/h2>$/;"	a
lemma_T	lf/coqindex.html	/^<br\/><br\/><a name="lemma_T"><\/a><h2>T <\/h2>$/;"	a
lemma_T	plf/coqindex.html	/^<br\/><br\/><a name="lemma_T"><\/a><h2>T <\/h2>$/;"	a
lemma_U	lf/coqindex.html	/^<br\/><br\/><a name="lemma_U"><\/a><h2>U <\/h2>$/;"	a
lemma_U	plf/coqindex.html	/^<br\/><br\/><a name="lemma_U"><\/a><h2>U <\/h2>$/;"	a
lemma_V	plf/coqindex.html	/^<br\/><br\/><a name="lemma_V"><\/a><h2>V <\/h2>$/;"	a
lemma_W	plf/coqindex.html	/^<br\/><br\/><a name="lemma_W"><\/a><h2>W <\/h2>$/;"	a
lemma_Z	lf/coqindex.html	/^<br\/><br\/><a name="lemma_Z"><\/a><h2>Z <\/h2>$/;"	a
lemma_Z	plf/coqindex.html	/^<br\/><br\/><a name="lemma_Z"><\/a><h2>Z <\/h2>$/;"	a
lemma_application_ex	lf/Logic.html	/^<span class="id" type="keyword">Example<\/span> <a name="lemma_application_ex"><span class="id" type="definition">lemma_application_ex<\/span><\/a> :<br\/>$/;"	a
length	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="length"><span class="id" type="definition">length<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
length_is_1	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="length_is_1"><span class="id" type="definition">length_is_1<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
letterSpacing	lf/common/jquery-ui/external/jquery/jquery.js	/^	cssNormalTransform = {$/;"	p
letterSpacing	plf/common/jquery-ui/external/jquery/jquery.js	/^	cssNormalTransform = {$/;"	p
library_A	lf/coqindex.html	/^<a name="library_A"><\/a><h2>A <\/h2>$/;"	a
library_B	lf/coqindex.html	/^<br\/><br\/><a name="library_B"><\/a><h2>B <\/h2>$/;"	a
library_B	plf/coqindex.html	/^<a name="library_B"><\/a><h2>B <\/h2>$/;"	a
library_E	lf/coqindex.html	/^<br\/><br\/><a name="library_E"><\/a><h2>E <\/h2>$/;"	a
library_E	plf/coqindex.html	/^<br\/><br\/><a name="library_E"><\/a><h2>E <\/h2>$/;"	a
library_H	plf/coqindex.html	/^<br\/><br\/><a name="library_H"><\/a><h2>H <\/h2>$/;"	a
library_I	lf/coqindex.html	/^<br\/><br\/><a name="library_I"><\/a><h2>I <\/h2>$/;"	a
library_L	lf/coqindex.html	/^<br\/><br\/><a name="library_L"><\/a><h2>L <\/h2>$/;"	a
library_L	plf/coqindex.html	/^<br\/><br\/><a name="library_L"><\/a><h2>L <\/h2>$/;"	a
library_M	lf/coqindex.html	/^<br\/><br\/><a name="library_M"><\/a><h2>M <\/h2>$/;"	a
library_M	plf/coqindex.html	/^<br\/><br\/><a name="library_M"><\/a><h2>M <\/h2>$/;"	a
library_N	plf/coqindex.html	/^<br\/><br\/><a name="library_N"><\/a><h2>N <\/h2>$/;"	a
library_P	lf/coqindex.html	/^<br\/><br\/><a name="library_P"><\/a><h2>P <\/h2>$/;"	a
library_P	plf/coqindex.html	/^<br\/><br\/><a name="library_P"><\/a><h2>P <\/h2>$/;"	a
library_R	lf/coqindex.html	/^<br\/><br\/><a name="library_R"><\/a><h2>R <\/h2>$/;"	a
library_R	plf/coqindex.html	/^<br\/><br\/><a name="library_R"><\/a><h2>R <\/h2>$/;"	a
library_S	plf/coqindex.html	/^<br\/><br\/><a name="library_S"><\/a><h2>S <\/h2>$/;"	a
library_T	lf/coqindex.html	/^<br\/><br\/><a name="library_T"><\/a><h2>T <\/h2>$/;"	a
library_T	plf/coqindex.html	/^<br\/><br\/><a name="library_T"><\/a><h2>T <\/h2>$/;"	a
library_U	plf/coqindex.html	/^<br\/><br\/><a name="library_U"><\/a><h2>U <\/h2>$/;"	a
linear	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.easing = {$/;"	m	class:jQuery.easing
linear	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.easing = {$/;"	m	class:jQuery.easing
list	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
list'	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="list'"><span class="id" type="inductive">list'<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
list123	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="list123"><span class="id" type="definition">list123<\/span><\/a> :=<br\/>$/;"	a
list123'	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="list123'"><span class="id" type="definition">list123'<\/span><\/a> :=<br\/>$/;"	a
list123''	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="list123''"><span class="id" type="definition">list123''<\/span><\/a> := <a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 1 (<a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 2 (<a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 3 <a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a>)).<br\/>$/;"	a
list123'''	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="list123'''"><span class="id" type="definition">list123'''<\/span><\/a> := [1; 2; 3].<br\/>$/;"	a
list_of_string	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="list_of_string"><span class="id" type="definition">list_of_string<\/span><\/a> (<span class="id" type="var">s<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a> :=<br\/>$/;"	a
list_of_string	lf/imp.mli	/^val list_of_string : char list -> char list$/;"	v
location	lf/common/jquery-ui/external/jquery/jquery.js	/^var location = window.location;$/;"	v
location	plf/common/jquery-ui/external/jquery/jquery.js	/^var location = window.location;$/;"	v
lookup	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="lookup"><span class="id" type="definition">lookup<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Set<\/span>} (<span class="id" type="var">k<\/span> : <span class="id" type="inductive">id<\/span>) (<span class="id" type="var">l<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="Norm.html#X"><span class="id" type="variable">X<\/span><\/a>)) {<span class="id" type="keyword">struct<\/span> <span class="id" type="var">l<\/span>}<br\/>$/;"	a
lookup_field_in_value	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="lookup_field_in_value"><span class="id" type="lemma">lookup_field_in_value<\/span><\/a> : ∀ <span class="id" type="var">v<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
loop	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="loop"><span class="id" type="definition">loop<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
loop	plf/PE.html	/^&nbsp;&nbsp;| <a name="loop"><span class="id" type="constructor">loop<\/span><\/a>  : <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a><br\/>$/;"	a
loop_never_stops	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="loop_never_stops"><span class="id" type="lemma">loop_never_stops<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
loop_unrolling	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="loop_unrolling"><span class="id" type="lemma">loop_unrolling<\/span><\/a>: ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
lt	lf/IndProp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="lt"><span class="id" type="definition">lt<\/span><\/a> (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#le"><span class="id" type="inductive">le<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>) <a class="idref" href="IndProp.html#m"><span class="id" type="variable">m<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
lt_S	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="lt_S"><span class="id" type="lemma">lt_S<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
lt_trans	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="lt_trans"><span class="id" type="lemma">lt_trans<\/span><\/a>:<br\/>$/;"	a
lt_trans'	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="lt_trans'"><span class="id" type="lemma">lt_trans'<\/span><\/a> :<br\/>$/;"	a
lt_trans''	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="lt_trans''"><span class="id" type="lemma">lt_trans''<\/span><\/a> :<br\/>$/;"	a
ltac_Mark	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ltac_Mark"><span class="id" type="inductive">ltac_Mark<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
ltac_No_arg	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ltac_No_arg"><span class="id" type="inductive">ltac_No_arg<\/span><\/a> : <span class="id" type="keyword">Set<\/span> :=<br\/>$/;"	a
ltac_Wild	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ltac_Wild"><span class="id" type="inductive">ltac_Wild<\/span><\/a> : <span class="id" type="keyword">Set<\/span> :=<br\/>$/;"	a
ltac_Wilds	plf/LibTactics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ltac_Wilds"><span class="id" type="inductive">ltac_Wilds<\/span><\/a> : <span class="id" type="keyword">Set<\/span> :=<br\/>$/;"	a
ltac_database	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ltac_database"><span class="id" type="definition">ltac_database<\/span><\/a> (<span class="id" type="var">D<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>) (<span class="id" type="var">T<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>) (<span class="id" type="var">A<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>) := <a class="idref" href="LibTactics.html#Ltac_database_token"><span class="id" type="inductive">Ltac_database_token<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ltac_database_provide	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ltac_database_provide"><span class="id" type="lemma">ltac_database_provide<\/span><\/a> : ∀ (<span class="id" type="var">A<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>) (<span class="id" type="var">D<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>) (<span class="id" type="var">T<\/span>:<a class="idref" href="LibTactics.html#Boxer"><span class="id" type="inductive">Boxer<\/span><\/a>),<br\/>$/;"	a
ltac_mark	plf/LibTactics.html	/^&nbsp;&nbsp;| <a name="ltac_mark"><span class="id" type="constructor">ltac_mark<\/span><\/a> : <a class="idref" href="LibTactics.html#ltac_Mark"><span class="id" type="inductive">ltac_Mark<\/span><\/a>.<br\/>$/;"	a
ltac_nat_from_int	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ltac_nat_from_int"><span class="id" type="definition">ltac_nat_from_int<\/span><\/a> (<span class="id" type="var">x<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.ZArith.BinInt.html#Z"><span class="id" type="abbreviation">BinInt.Z<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
ltac_no_arg	plf/LibTactics.html	/^&nbsp;&nbsp;| <a name="ltac_no_arg"><span class="id" type="constructor">ltac_no_arg<\/span><\/a> : <a class="idref" href="LibTactics.html#ltac_No_arg"><span class="id" type="inductive">ltac_No_arg<\/span><\/a>.<br\/>$/;"	a
ltac_something	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ltac_something"><span class="id" type="definition">ltac_something<\/span><\/a> (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">e<\/span>:<a class="idref" href="LibTactics.html#P"><span class="id" type="variable">P<\/span><\/a>) := <a class="idref" href="LibTactics.html#e"><span class="id" type="variable">e<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ltac_something_eq	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ltac_something_eq"><span class="id" type="lemma">ltac_something_eq<\/span><\/a> : ∀ (<span class="id" type="var">e<\/span>:<span class="id" type="keyword">Type<\/span>),<br\/>$/;"	a
ltac_something_hide	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ltac_something_hide"><span class="id" type="lemma">ltac_something_hide<\/span><\/a> : ∀ (<span class="id" type="var">e<\/span>:<span class="id" type="keyword">Type<\/span>),<br\/>$/;"	a
ltac_something_show	plf/LibTactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="ltac_something_show"><span class="id" type="lemma">ltac_something_show<\/span><\/a> : ∀ (<span class="id" type="var">e<\/span>:<span class="id" type="keyword">Type<\/span>),<br\/>$/;"	a
ltac_tag_subst	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ltac_tag_subst"><span class="id" type="definition">ltac_tag_subst<\/span><\/a> (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span>:<a class="idref" href="LibTactics.html#A"><span class="id" type="variable">A<\/span><\/a>) := <a class="idref" href="LibTactics.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/>$/;"	a
ltac_to_generalize	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="ltac_to_generalize"><span class="id" type="definition">ltac_to_generalize<\/span><\/a> (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span>:<a class="idref" href="LibTactics.html#A"><span class="id" type="variable">A<\/span><\/a>) := <a class="idref" href="LibTactics.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ltac_wild	plf/LibTactics.html	/^&nbsp;&nbsp;| <a name="ltac_wild"><span class="id" type="constructor">ltac_wild<\/span><\/a> : <a class="idref" href="LibTactics.html#ltac_Wild"><span class="id" type="inductive">ltac_Wild<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ltac_wilds	plf/LibTactics.html	/^&nbsp;&nbsp;| <a name="ltac_wilds"><span class="id" type="constructor">ltac_wilds<\/span><\/a> : <a class="idref" href="LibTactics.html#ltac_Wilds"><span class="id" type="inductive">ltac_Wilds<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
manipulationTarget	lf/common/jquery-ui/external/jquery/jquery.js	/^function manipulationTarget( elem, content ) {$/;"	f
manipulationTarget	plf/common/jquery-ui/external/jquery/jquery.js	/^function manipulationTarget( elem, content ) {$/;"	f
many	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="many"><span class="id" type="definition">many<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="ImpParser.html#parser"><span class="id" type="definition">parser<\/span><\/a> <a class="idref" href="ImpParser.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">steps<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="ImpParser.html#parser"><span class="id" type="definition">parser<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="ImpParser.html#T"><span class="id" type="variable">T<\/span><\/a>) :=<br\/>$/;"	a
many	lf/imp.mli	/^val many : 'a1 parser0 -> int -> 'a1 list parser0$/;"	v
many_helper	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="many_helper"><span class="id" type="definition">many_helper<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="ImpParser.html#parser"><span class="id" type="definition">parser<\/span><\/a> <a class="idref" href="ImpParser.html#T"><span class="id" type="variable">T<\/span><\/a>) <span class="id" type="var">acc<\/span> <span class="id" type="var">steps<\/span> <span class="id" type="var">xs<\/span> :=<br\/>$/;"	a
many_helper	lf/imp.ml	/^let rec many_helper p acc steps xs =$/;"	v
many_helper	lf/imp.mli	/^val many_helper :$/;"	v
map	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="map"><span class="id" type="definition">map<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span>:<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>→<a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : (<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) :=<br\/>$/;"	a
map	lf/imp.mli	/^val map : ('a1 -> 'a2) -> 'a1 list -> 'a2 list$/;"	v
map_rev	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="map_rev"><span class="id" type="lemma">map_rev<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">f<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
minus_diag	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="minus_diag"><span class="id" type="lemma">minus_diag<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
minustwo	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="minustwo"><span class="id" type="definition">minustwo<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
module_A	lf/coqindex.html	/^<a name="module_A"><\/a><h2>A <\/h2>$/;"	a
module_B	lf/coqindex.html	/^<br\/><br\/><a name="module_B"><\/a><h2>B <\/h2>$/;"	a
module_C	plf/coqindex.html	/^<a name="module_C"><\/a><h2>C <\/h2>$/;"	a
module_D	plf/coqindex.html	/^<br\/><br\/><a name="module_D"><\/a><h2>D <\/h2>$/;"	a
module_E	lf/coqindex.html	/^<br\/><br\/><a name="module_E"><\/a><h2>E <\/h2>$/;"	a
module_E	plf/coqindex.html	/^<br\/><br\/><a name="module_E"><\/a><h2>E <\/h2>$/;"	a
module_F	lf/coqindex.html	/^<br\/><br\/><a name="module_F"><\/a><h2>F <\/h2>$/;"	a
module_G	plf/coqindex.html	/^<br\/><br\/><a name="module_G"><\/a><h2>G <\/h2>$/;"	a
module_H	plf/coqindex.html	/^<br\/><br\/><a name="module_H"><\/a><h2>H <\/h2>$/;"	a
module_I	plf/coqindex.html	/^<br\/><br\/><a name="module_I"><\/a><h2>I <\/h2>$/;"	a
module_L	plf/coqindex.html	/^<br\/><br\/><a name="module_L"><\/a><h2>L <\/h2>$/;"	a
module_M	lf/coqindex.html	/^<br\/><br\/><a name="module_M"><\/a><h2>M <\/h2>$/;"	a
module_N	lf/coqindex.html	/^<br\/><br\/><a name="module_N"><\/a><h2>N <\/h2>$/;"	a
module_N	plf/coqindex.html	/^<br\/><br\/><a name="module_N"><\/a><h2>N <\/h2>$/;"	a
module_P	lf/coqindex.html	/^<br\/><br\/><a name="module_P"><\/a><h2>P <\/h2>$/;"	a
module_P	plf/coqindex.html	/^<br\/><br\/><a name="module_P"><\/a><h2>P <\/h2>$/;"	a
module_R	lf/coqindex.html	/^<br\/><br\/><a name="module_R"><\/a><h2>R <\/h2>$/;"	a
module_R	plf/coqindex.html	/^<br\/><br\/><a name="module_R"><\/a><h2>R <\/h2>$/;"	a
module_S	plf/coqindex.html	/^<br\/><br\/><a name="module_S"><\/a><h2>S <\/h2>$/;"	a
module_T	plf/coqindex.html	/^<br\/><br\/><a name="module_T"><\/a><h2>T <\/h2>$/;"	a
module_U	plf/coqindex.html	/^<br\/><br\/><a name="module_U"><\/a><h2>U <\/h2>$/;"	a
monday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="monday"><span class="id" type="constructor">monday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
monochrome	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="monochrome"><span class="id" type="definition">monochrome<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="Basics.html#color"><span class="id" type="inductive">color<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
msubst	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="msubst"><span class="id" type="definition">msubst<\/span><\/a> (<span class="id" type="var">ss<\/span>:<a class="idref" href="Norm.html#env"><span class="id" type="definition">env<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) {<span class="id" type="keyword">struct<\/span> <span class="id" type="var">ss<\/span>} : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
msubst_R	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_R"><span class="id" type="lemma">msubst_R<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">env<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
msubst_abs	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_abs"><span class="id" type="lemma">msubst_abs<\/span><\/a>: ∀ <span class="id" type="var">ss<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
msubst_app	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_app"><span class="id" type="lemma">msubst_app<\/span><\/a> : ∀ <span class="id" type="var">ss<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>, <a class="idref" href="Norm.html#msubst"><span class="id" type="definition">msubst<\/span><\/a> <a class="idref" href="Norm.html#ss"><span class="id" type="variable">ss<\/span><\/a> (<a class="idref" href="Norm.html#tapp"><span class="id" type="constructor">tapp<\/span><\/a> <a class="idref" href="Norm.html#t<sub>1<\/sub>"><span class="id" type="variable">t<sub>1<\/sub><\/span><\/a> <a class="idref" href="Norm.html#t<sub>2<\/sub>"><span class="id" type="variable">t<sub>2<\/sub><\/span><\/a>) = <a class="idref" href="Norm.html#tapp"><span class="id" type="constructor">tapp<\/span><\/a> (<a class="idref" href="Norm.html#msubst"><span class="id" type="definition">msubst<\/span><\/a> <a class="idref" href="Norm.html#ss"><span class="id" type="variable">ss<\/span><\/a> <a class="idref" href="Norm.html#t<sub>1<\/sub>"><span class="id" type="variable">t<sub>1<\/sub><\/span><\/a>) (<a class="idref" href="Norm.html#msubst"><span class="id" type="definition">msubst<\/span><\/a> <a class="idref" href="Norm.html#ss"><span class="id" type="variable">ss<\/span><\/a> <a class="idref" href="Norm.html#t<sub>2<\/sub>"><span class="id" type="variable">t<sub>2<\/sub><\/span><\/a>).<br\/>$/;"	a
msubst_closed	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_closed"><span class="id" type="lemma">msubst_closed<\/span><\/a>: ∀ <span class="id" type="var">t<\/span>, <a class="idref" href="Norm.html#closed"><span class="id" type="definition">closed<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> → ∀ <span class="id" type="var">ss<\/span>, <a class="idref" href="Norm.html#msubst"><span class="id" type="definition">msubst<\/span><\/a> <a class="idref" href="Norm.html#ss"><span class="id" type="variable">ss<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> = <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a>.<br\/>$/;"	a
msubst_preserves_typing	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_preserves_typing"><span class="id" type="lemma">msubst_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">e<\/span>,<br\/>$/;"	a
msubst_var	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="msubst_var"><span class="id" type="lemma">msubst_var<\/span><\/a>:  ∀ <span class="id" type="var">ss<\/span> <span class="id" type="var">x<\/span>, <a class="idref" href="Norm.html#closed_env"><span class="id" type="definition">closed_env<\/span><\/a> <a class="idref" href="Norm.html#ss"><span class="id" type="variable">ss<\/span><\/a> →<br\/>$/;"	a
mul	lf/imp.ml	/^let rec mul = ( * )$/;"	v
mul	lf/imp.mli	/^val mul : int -> int -> int$/;"	v
mul	lf/imp1.mli	/^val mul : nat -> nat -> nat$/;"	v
mul	lf/imp2.ml	/^let rec mul = ( * )$/;"	v
mul	lf/imp2.mli	/^val mul : int -> int -> int$/;"	v
mult_0	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="mult_0"><span class="id" type="lemma">mult_0<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="Logic.html#n"><span class="id" type="variable">n<\/span><\/a> * <a class="idref" href="Logic.html#m"><span class="id" type="variable">m<\/span><\/a> = 0 ↔ <a class="idref" href="Logic.html#n"><span class="id" type="variable">n<\/span><\/a> = 0 ∨ <a class="idref" href="Logic.html#m"><span class="id" type="variable">m<\/span><\/a> = 0.<br\/>$/;"	a
mult_0_3	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="mult_0_3"><span class="id" type="lemma">mult_0_3<\/span><\/a> :<br\/>$/;"	a
mult_0_l	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_l"><span class="id" type="lemma">mult_0_l<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, 0 * <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a> = 0.<br\/>$/;"	a
mult_0_plus	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_plus"><span class="id" type="lemma">mult_0_plus<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_0_plus'	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_plus'"><span class="id" type="lemma">mult_0_plus'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_0_r	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_r"><span class="id" type="lemma">mult_0_r<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_0_r'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_r'"><span class="id" type="lemma">mult_0_r'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_0_r''	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_0_r''"><span class="id" type="lemma">mult_0_r''<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_S_1	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="mult_S_1"><span class="id" type="lemma">mult_S_1<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
mult_eq_0	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="mult_eq_0"><span class="id" type="lemma">mult_eq_0<\/span><\/a> :<br\/>$/;"	a
multi	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="multi"><span class="id" type="inductive">multi<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <span class="id" type="var">X<\/span> :=<br\/>$/;"	a
multi_R	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="multi_R"><span class="id" type="lemma">multi_R<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">R<\/span>:<a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
multi_refl	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="multi_refl"><span class="id" type="constructor">multi_refl<\/span><\/a>  : ∀ (<span class="id" type="var">x<\/span> : <span class="id" type="var">X<\/span>), <a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <span class="id" type="var">R<\/span> <a class="idref" href="Smallstep.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Smallstep.html#x"><span class="id" type="variable">x<\/span><\/a><br\/>$/;"	a
multi_step	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="multi_step"><span class="id" type="constructor">multi_step<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <span class="id" type="var">X<\/span>),<br\/>$/;"	a
multi_trans	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="multi_trans"><span class="id" type="lemma">multi_trans<\/span><\/a> :<br\/>$/;"	a
multistep	plf/Norm.html	/^<span class="id" type="keyword">Notation<\/span> <a name="multistep"><span class="id" type="abbreviation">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="Norm.html#step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
multistep	plf/Types.html	/^<span class="id" type="keyword">Definition<\/span> <a name="multistep"><span class="id" type="definition">multistep<\/span><\/a> := (<a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> <a class="idref" href="Types.html#step"><span class="id" type="inductive">step<\/span><\/a>).<br\/>$/;"	a
multistep_App2	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="multistep_App2"><span class="id" type="lemma">multistep_App2<\/span><\/a> : ∀ <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
multistep__eval	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="multistep__eval"><span class="id" type="lemma">multistep__eval<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
multistep_congr_1	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="multistep_congr_1"><span class="id" type="lemma">multistep_congr_1<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>1<\/sub>'<\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
multistep_congr_2	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="multistep_congr_2"><span class="id" type="lemma">multistep_congr_2<\/span><\/a> : ∀ <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub>'<\/span>,<br\/>$/;"	a
multistep_preserves_R	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="multistep_preserves_R"><span class="id" type="lemma">multistep_preserves_R<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
multistep_preserves_R'	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="multistep_preserves_R'"><span class="id" type="lemma">multistep_preserves_R'<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
mupdate	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="mupdate"><span class="id" type="definition">mupdate<\/span><\/a> (<span class="id" type="var">Gamma<\/span> : <a class="idref" href="Norm.html#context"><span class="id" type="definition">context<\/span><\/a>) (<span class="id" type="var">xts<\/span> : <a class="idref" href="Norm.html#tass"><span class="id" type="definition">tass<\/span><\/a>) :=<br\/>$/;"	a
mupdate_drop	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="mupdate_drop"><span class="id" type="lemma">mupdate_drop<\/span><\/a> : ∀ (<span class="id" type="var">c<\/span>: <a class="idref" href="Norm.html#tass"><span class="id" type="definition">tass<\/span><\/a>) <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">x'<\/span>,<br\/>$/;"	a
mupdate_lookup	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="mupdate_lookup"><span class="id" type="lemma">mupdate_lookup<\/span><\/a> : ∀ (<span class="id" type="var">c<\/span> : <a class="idref" href="Norm.html#tass"><span class="id" type="definition">tass<\/span><\/a>) (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
myFact	plf/UseAuto.html	/^<span class="id" type="keyword">Definition<\/span> <a name="myFact"><span class="id" type="definition">myFact<\/span><\/a> := ∀ <span class="id" type="var">x<\/span>, <a class="idref" href="UseAuto.html#x"><span class="id" type="variable">x<\/span><\/a> ≤ 3 → <a class="idref" href="UseAuto.html#P"><span class="id" type="axiom">P<\/span><\/a> <a class="idref" href="UseAuto.html#x"><span class="id" type="variable">x<\/span><\/a>.<br\/>$/;"	a
mynil	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="mynil"><span class="id" type="definition">mynil<\/span><\/a> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> := <a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a>.<br\/>$/;"	a
mynil	lf/Poly.html	/^<span class="id" type="var">Fail<\/span> <span class="id" type="keyword">Definition<\/span> <a name="mynil"><span class="id" type="definition">mynil<\/span><\/a> := <a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a>.<br\/>$/;"	a
mynil'	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="mynil'"><span class="id" type="definition">mynil'<\/span><\/a> := @<a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>.<br\/>$/;"	a
n	lf/imp.ml	/^  let n = Char.code c in$/;"	v
n	lf/imp.mli	/^type n =$/;"	t
n_le_m__Sn_le_Sm	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="n_le_m__Sn_le_Sm"><span class="id" type="lemma">n_le_m__Sn_le_Sm<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
n_of_ascii	lf/imp.mli	/^val n_of_ascii : char -> n$/;"	v
n_of_digits	lf/imp.mli	/^val n_of_digits : bool list -> n$/;"	v
nandb	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="nandb"><span class="id" type="definition">nandb<\/span><\/a> (<span class="id" type="var">b<sub>1<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">b<sub>2<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
nat	lf/imp1.ml	/^type nat =$/;"	t
nat	lf/imp1.mli	/^type nat =$/;"	t
nat_canonical	plf/Types.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="nat_canonical"><span class="id" type="lemma">nat_canonical<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
nat_of_ascii	lf/imp.mli	/^val nat_of_ascii : char -> int$/;"	v
natlist	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="natlist"><span class="id" type="inductive">natlist<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
natlist1	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="natlist1"><span class="id" type="inductive">natlist1<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
nbranch	lf/IndPrinciples.html	/^&nbsp;| <a name="nbranch"><span class="id" type="constructor">nbranch<\/span><\/a> : <a class="idref" href="IndPrinciples.html#yesno"><span class="id" type="inductive">yesno<\/span><\/a> → <a class="idref" href="IndPrinciples.html#byntree"><span class="id" type="inductive">byntree<\/span><\/a> → <a class="idref" href="IndPrinciples.html#byntree"><span class="id" type="inductive">byntree<\/span><\/a> → <a class="idref" href="IndPrinciples.html#byntree"><span class="id" type="inductive">byntree<\/span><\/a>.<br\/>$/;"	a
ncons	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="ncons"><span class="id" type="constructor">ncons<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="IndPrinciples.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a> → <a class="idref" href="IndPrinciples.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
ne_1	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="ne_1"><span class="id" type="constructor">ne_1<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>) → <a class="idref" href="IndProp.html#next_even"><span class="id" type="inductive">next_even<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>)<br\/>$/;"	a
ne_2	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="ne_2"><span class="id" type="constructor">ne_2<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>)) → <a class="idref" href="IndProp.html#next_even"><span class="id" type="inductive">next_even<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>)).<br\/>$/;"	a
negation_study_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="negation_study_1"><span class="id" type="lemma">negation_study_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
negation_study_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="negation_study_2"><span class="id" type="lemma">negation_study_2<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
negb	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="negb"><span class="id" type="definition">negb<\/span><\/a> (<span class="id" type="var">b<\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
negb	lf/imp.ml	/^let negb = function$/;"	v
negb	lf/imp.mli	/^val negb : bool -> bool$/;"	v
negb	lf/imp1.ml	/^let negb = function$/;"	v
negb	lf/imp1.mli	/^val negb : bool -> bool$/;"	v
negb	lf/imp2.ml	/^let negb = function$/;"	v
negb	lf/imp2.mli	/^val negb : bool -> bool$/;"	v
negb_involutive	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="negb_involutive"><span class="id" type="lemma">negb_involutive<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
next_even	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="next_even"><span class="id" type="inductive">next_even<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
next_nat	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="next_nat"><span class="id" type="inductive">next_nat<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
next_nat_closure_is_le	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="next_nat_closure_is_le"><span class="id" type="lemma">next_nat_closure_is_le<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
next_nat_partial_function	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="next_nat_partial_function"><span class="id" type="lemma">next_nat_partial_function<\/span><\/a> :<br\/>$/;"	a
next_weekday	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="next_weekday"><span class="id" type="definition">next_weekday<\/span><\/a> (<span class="id" type="var">d<\/span>:<a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a>) : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a> :=<br\/>$/;"	a
nf_is_value	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="nf_is_value"><span class="id" type="lemma">nf_is_value<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
nf_same_as_value	plf/Smallstep.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="nf_same_as_value"><span class="id" type="lemma">nf_same_as_value<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
nil	lf/Poly.html	/^&nbsp;&nbsp;| <a name="nil"><span class="id" type="constructor">nil<\/span><\/a> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span><br\/>$/;"	a
nil'	lf/Poly.html	/^&nbsp;&nbsp;| <a name="nil'"><span class="id" type="constructor">nil'<\/span><\/a> : <a class="idref" href="Poly.html#list'"><span class="id" type="inductive">list'<\/span><\/a><br\/>$/;"	a
nn	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="nn"><span class="id" type="constructor">nn<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, <a class="idref" href="IndProp.html#next_nat"><span class="id" type="inductive">next_nat<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
nnil	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="nnil"><span class="id" type="constructor">nnil<\/span><\/a> : <a class="idref" href="IndPrinciples.html#natlist"><span class="id" type="inductive">natlist<\/span><\/a><br\/>$/;"	a
nnil1	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="nnil1"><span class="id" type="constructor">nnil1<\/span><\/a> : <a class="idref" href="IndPrinciples.html#natlist1"><span class="id" type="inductive">natlist1<\/span><\/a><br\/>$/;"	a
no	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="no"><span class="id" type="constructor">no<\/span><\/a> : <a class="idref" href="IndPrinciples.html#yesno"><span class="id" type="inductive">yesno<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
no_whiles	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="no_whiles"><span class="id" type="definition">no_whiles<\/span><\/a> (<span class="id" type="var">c<\/span> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
no_whilesR	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="no_whilesR"><span class="id" type="inductive">no_whilesR<\/span><\/a>: <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
no_whiles_eqv	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="no_whiles_eqv"><span class="id" type="lemma">no_whiles_eqv<\/span><\/a>:<br\/>$/;"	a
node	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="node"><span class="id" type="constructor">node<\/span><\/a> : <a class="idref" href="IndPrinciples.html#tree"><span class="id" type="inductive">tree<\/span><\/a> <span class="id" type="var">X<\/span> → <a class="idref" href="IndPrinciples.html#tree"><span class="id" type="inductive">tree<\/span><\/a> <span class="id" type="var">X<\/span> → <a class="idref" href="IndPrinciples.html#tree"><span class="id" type="inductive">tree<\/span><\/a> <span class="id" type="var">X<\/span>.<br\/>$/;"	a
nodeHook	lf/common/jquery-ui/external/jquery/jquery.js	/^var nodeHook, boolHook,$/;"	v
nodeHook	plf/common/jquery-ui/external/jquery/jquery.js	/^var nodeHook, boolHook,$/;"	v
nodeNames	lf/common/jquery-ui/external/jquery/jquery.js	/^var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +$/;"	v
nodeNames	plf/common/jquery-ui/external/jquery/jquery.js	/^var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +$/;"	v
nonce	lf/common/jquery-ui/external/jquery/jquery.js	/^var nonce = jQuery.now();$/;"	v
nonce	plf/common/jquery-ui/external/jquery/jquery.js	/^var nonce = jQuery.now();$/;"	v
normal_form	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="normal_form"><span class="id" type="definition">normal_form<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>:<a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
normal_form_of	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="normal_form_of"><span class="id" type="definition">normal_form_of<\/span><\/a> (<span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) :=<br\/>$/;"	a
normal_forms_unique	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="normal_forms_unique"><span class="id" type="lemma">normal_forms_unique<\/span><\/a>:<br\/>$/;"	a
normalization	plf/Norm.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="normalization"><span class="id" type="lemma">normalization<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>, <a class="idref" href="Norm.html#has_type"><span class="id" type="inductive">has_type<\/span><\/a> <span class="id" type="definition">empty<\/span> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a> → <a class="idref" href="Norm.html#halts"><span class="id" type="definition">halts<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a>.<br\/>$/;"	a
normalizing	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="normalizing"><span class="id" type="definition">normalizing<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>:<a class="idref" href="Smallstep.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
nostutter	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="nostutter"><span class="id" type="inductive">nostutter<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
not_False	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="not_False"><span class="id" type="lemma">not_False<\/span><\/a> :<br\/>$/;"	a
not_both_true_and_false	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="not_both_true_and_false"><span class="id" type="lemma">not_both_true_and_false<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
not_exists_dist	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="not_exists_dist"><span class="id" type="lemma">not_exists_dist<\/span><\/a> :<br\/>$/;"	a
not_implies_our_not	lf/Logic.html	/^<span class="id" type="keyword">Fact<\/span> <a name="not_implies_our_not"><span class="id" type="lemma">not_implies_our_not<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span>:<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
not_true_iff_false	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="not_true_iff_false"><span class="id" type="lemma">not_true_iff_false<\/span><\/a> : ∀ <span class="id" type="var">b<\/span>,<br\/>$/;"	a
not_true_is_false	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="not_true_is_false"><span class="id" type="lemma">not_true_is_false<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
not_true_is_false'	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="not_true_is_false'"><span class="id" type="lemma">not_true_is_false'<\/span><\/a> : ∀ <span class="id" type="var">b<\/span> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>,<br\/>$/;"	a
notation_:	lf/coqindex.html	/^<br\/><br\/><a name="notation_:"><\/a><h2>: <\/h2>$/;"	a
notation_:	plf/coqindex.html	/^<br\/><br\/><a name="notation_:"><\/a><h2>: <\/h2>$/;"	a
notation_A	lf/coqindex.html	/^<a name="notation_A"><\/a><h2>A <\/h2>$/;"	a
notation_B	lf/coqindex.html	/^<br\/><br\/><a name="notation_B"><\/a><h2>B <\/h2>$/;"	a
notation_C	plf/coqindex.html	/^<a name="notation_C"><\/a><h2>C <\/h2>$/;"	a
notation_H	plf/coqindex.html	/^<br\/><br\/><a name="notation_H"><\/a><h2>H <\/h2>$/;"	a
notation_I	plf/coqindex.html	/^<br\/><br\/><a name="notation_I"><\/a><h2>I <\/h2>$/;"	a
notation_L	plf/coqindex.html	/^<br\/><br\/><a name="notation_L"><\/a><h2>L <\/h2>$/;"	a
notation_M	lf/coqindex.html	/^<br\/><br\/><a name="notation_M"><\/a><h2>M <\/h2>$/;"	a
notation_N	lf/coqindex.html	/^<br\/><br\/><a name="notation_N"><\/a><h2>N <\/h2>$/;"	a
notation_P	lf/coqindex.html	/^<br\/><br\/><a name="notation_P"><\/a><h2>P <\/h2>$/;"	a
notation_R	lf/coqindex.html	/^<br\/><br\/><a name="notation_R"><\/a><h2>R <\/h2>$/;"	a
notation_R	plf/coqindex.html	/^<br\/><br\/><a name="notation_R"><\/a><h2>R <\/h2>$/;"	a
notation_S	plf/coqindex.html	/^<br\/><br\/><a name="notation_S"><\/a><h2>S <\/h2>$/;"	a
notation_T	plf/coqindex.html	/^<br\/><br\/><a name="notation_T"><\/a><h2>T <\/h2>$/;"	a
nsnoc1	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="nsnoc1"><span class="id" type="constructor">nsnoc1<\/span><\/a> : <a class="idref" href="IndPrinciples.html#natlist1"><span class="id" type="inductive">natlist1<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="IndPrinciples.html#natlist1"><span class="id" type="inductive">natlist1<\/span><\/a>.<br\/>$/;"	a
nth_error	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="nth_error"><span class="id" type="definition">nth_error<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
nth_error_after_last	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="nth_error_after_last"><span class="id" type="lemma">nth_error_after_last<\/span><\/a>: ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
nv_succ	plf/Types.html	/^&nbsp;&nbsp;| <a name="nv_succ"><span class="id" type="constructor">nv_succ<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>, <a class="idref" href="Types.html#nvalue"><span class="id" type="inductive">nvalue<\/span><\/a> <a class="idref" href="Types.html#t"><span class="id" type="variable">t<\/span><\/a> → <a class="idref" href="Types.html#nvalue"><span class="id" type="inductive">nvalue<\/span><\/a> (<a class="idref" href="Types.html#tsucc"><span class="id" type="constructor">tsucc<\/span><\/a> <a class="idref" href="Types.html#t"><span class="id" type="variable">t<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
nv_zero	plf/Types.html	/^&nbsp;&nbsp;| <a name="nv_zero"><span class="id" type="constructor">nv_zero<\/span><\/a> : <a class="idref" href="Types.html#nvalue"><span class="id" type="inductive">nvalue<\/span><\/a> <a class="idref" href="Types.html#tzero"><span class="id" type="constructor">tzero<\/span><\/a><br\/>$/;"	a
nvalue	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="nvalue"><span class="id" type="inductive">nvalue<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
oddb	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="oddb"><span class="id" type="definition">oddb<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>   :=   <a class="idref" href="Basics.html#negb"><span class="id" type="definition">negb<\/span><\/a> (<a class="idref" href="Basics.html#evenb"><span class="id" type="definition">evenb<\/span><\/a> <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
of	lf/IndPrinciples.v	/^    parameter of the the proposition [P]. *)$/;"	c
of	lf/Rel.v	/^    module of the Coq standard library: *)$/;"	m
of	plf/MoreStlc.v	/^    function [F] of type [(Nat->Nat)->(Nat->Nat)] is a function [f] of$/;"	f
oldCallbacks	lf/common/jquery-ui/external/jquery/jquery.js	/^var oldCallbacks = [],$/;"	v
oldCallbacks	plf/common/jquery-ui/external/jquery/jquery.js	/^var oldCallbacks = [],$/;"	v
omega_demo_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="omega_demo_1"><span class="id" type="lemma">omega_demo_1<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
omega_demo_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="omega_demo_2"><span class="id" type="lemma">omega_demo_2<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
omega_demo_3	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="omega_demo_3"><span class="id" type="lemma">omega_demo_3<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
omega_demo_4	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="omega_demo_4"><span class="id" type="lemma">omega_demo_4<\/span><\/a> : ∀ (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
on	lf/Basics.v	/^    function on some particular inputs.  The proofs of these claims$/;"	f
on	lf/common/jquery-ui/external/jquery/jquery.js	/^function on( elem, types, selector, data, fn, one ) {$/;"	f
on	plf/common/jquery-ui/external/jquery/jquery.js	/^function on( elem, types, selector, data, fn, one ) {$/;"	f
one	lf/ProofObjects.v	/^    function type, one interesting point becomes apparent: The second$/;"	f
one_not_even	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="one_not_even"><span class="id" type="lemma">one_not_even<\/span><\/a> : ¬ <a class="idref" href="IndProp.html#ev"><span class="id" type="inductive">ev<\/span><\/a> 1.<br\/>$/;"	a
opt.complete	lf/common/jquery-ui/external/jquery/jquery.js	/^	opt.old = opt.complete;$/;"	f
opt.complete	plf/common/jquery-ui/external/jquery/jquery.js	/^	opt.old = opt.complete;$/;"	f
option	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="option"><span class="id" type="inductive">option<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
option	lf/common/jquery-ui/external/jquery/jquery.js	/^var wrapMap = {$/;"	p	class:wrapMap
option	lf/imp1.ml	/^type 'a option =$/;"	t
option	lf/imp1.mli	/^type 'a option =$/;"	t
option	lf/imp2.ml	/^type 'a option =$/;"	t
option	lf/imp2.mli	/^type 'a option =$/;"	t
option	plf/common/jquery-ui/external/jquery/jquery.js	/^var wrapMap = {$/;"	p	class:wrapMap
optionE	lf/ImpParser.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="optionE"><span class="id" type="inductive">optionE<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
optionE	lf/imp.ml	/^type 'x optionE =$/;"	t
optionE	lf/imp.mli	/^type 'x optionE =$/;"	t
option_map	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="option_map"><span class="id" type="definition">option_map<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">f<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) (<span class="id" type="var">xo<\/span> : <a class="idref" href="Poly.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>)<br\/>$/;"	a
options	lf/common/jquery-ui/jquery-ui.js	/^	defaultElement: "<div>",$/;"	p	class:$.Widget
options	plf/common/jquery-ui/jquery-ui.js	/^	defaultElement: "<div>",$/;"	p	class:$.Widget
or_assoc	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="or_assoc"><span class="id" type="lemma">or_assoc<\/span><\/a> :<br\/>$/;"	a
or_commut	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="or_commut"><span class="id" type="lemma">or_commut<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
or_distributes_over_and	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="or_distributes_over_and"><span class="id" type="lemma">or_distributes_over_and<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
or_example	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="or_example"><span class="id" type="lemma">or_example<\/span><\/a> :<br\/>$/;"	a
or_intro	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="or_intro"><span class="id" type="lemma">or_intro<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">B<\/span> : <span class="id" type="keyword">Prop<\/span>, <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> → <a class="idref" href="Logic.html#A"><span class="id" type="variable">A<\/span><\/a> ∨ <a class="idref" href="Logic.html#B"><span class="id" type="variable">B<\/span><\/a>.<br\/>$/;"	a
orb	lf/Basics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="orb"><span class="id" type="definition">orb<\/span><\/a> (<span class="id" type="var">b<sub>1<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) (<span class="id" type="var">b<sub>2<\/sub><\/span>:<a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
orb_true_iff	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="orb_true_iff"><span class="id" type="lemma">orb_true_iff<\/span><\/a> : ∀ <span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub><\/span>,<br\/>$/;"	a
order	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="order"><span class="id" type="definition">order<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
order_matters_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="order_matters_1"><span class="id" type="lemma">order_matters_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
order_matters_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="order_matters_2"><span class="id" type="lemma">order_matters_2<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
pair	lf/Poly.html	/^| <a name="pair"><span class="id" type="constructor">pair<\/span><\/a> : <span class="id" type="var">X<\/span> → <span class="id" type="var">Y<\/span> → <a class="idref" href="Poly.html#prod"><span class="id" type="inductive">prod<\/span><\/a> <span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
parity	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="parity"><span class="id" type="definition">parity<\/span><\/a> <span class="id" type="var">x<\/span> :=<br\/>$/;"	a
parity	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parity"><span class="id" type="definition">parity<\/span><\/a> : <a class="idref" href="PE.html#program"><span class="id" type="definition">program<\/span><\/a> <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a> := <span class="id" type="keyword">fun<\/span> <span class="id" type="var">l<\/span> ⇒<br\/>$/;"	a
parity_body	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parity_body"><span class="id" type="definition">parity_body<\/span><\/a> : <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <a class="idref" href="PE.html#parity_label"><span class="id" type="inductive">parity_label<\/span><\/a> :=<br\/>$/;"	a
parity_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="parity_correct"><span class="id" type="lemma">parity_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
parity_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parity_dec"><span class="id" type="definition">parity_dec<\/span><\/a> <span class="id" type="var">m<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> :=<br\/>$/;"	a
parity_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="parity_dec_correct"><span class="id" type="lemma">parity_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
parity_eval	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="parity_eval"><span class="id" type="definition">parity_eval<\/span><\/a>: <a class="idref" href="PE.html#peval"><span class="id" type="inductive">peval<\/span><\/a> <a class="idref" href="PE.html#parity"><span class="id" type="definition">parity<\/span><\/a> <span class="id" type="definition">empty_state<\/span> <a class="idref" href="PE.html#entry"><span class="id" type="constructor">entry<\/span><\/a> <span class="id" type="definition">empty_state<\/span> <a class="idref" href="PE.html#done"><span class="id" type="constructor">done<\/span><\/a>.<br\/>$/;"	a
parity_ge_2	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="parity_ge_2"><span class="id" type="lemma">parity_ge_2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
parity_label	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="parity_label"><span class="id" type="inductive">parity_label<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
parity_lt_2	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="parity_lt_2"><span class="id" type="lemma">parity_lt_2<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>,<br\/>$/;"	a
parse	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parse"><span class="id" type="definition">parse<\/span><\/a> (<span class="id" type="var">str<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a>) : <a class="idref" href="ImpParser.html#optionE"><span class="id" type="inductive">optionE<\/span><\/a> (<a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> * <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>) :=<br\/>$/;"	a
parse	lf/imp.mli	/^val parse : char list -> (com * token list) optionE$/;"	v
parseAExp	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parseAExp"><span class="id" type="definition">parseAExp<\/span><\/a> := <a class="idref" href="ImpParser.html#parseSumExp"><span class="id" type="definition">parseSumExp<\/span><\/a>.<br\/>$/;"	a
parseAExp	lf/imp.mli	/^val parseAExp : int -> token list -> (aexp * token list) optionE$/;"	v
parseAtomicExp	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="parseAtomicExp"><span class="id" type="definition">parseAtomicExp<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
parseAtomicExp	lf/imp.mli	/^val parseAtomicExp : int -> token list -> (bexp * token list) optionE$/;"	v
parseBExp	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parseBExp"><span class="id" type="definition">parseBExp<\/span><\/a> := <a class="idref" href="ImpParser.html#parseConjunctionExp"><span class="id" type="definition">parseConjunctionExp<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
parseBExp	lf/imp.mli	/^val parseBExp : int -> token list -> (bexp * token list) optionE$/;"	v
parseConjunctionExp	lf/ImpParser.html	/^<span class="id" type="keyword">with<\/span> <a name="parseConjunctionExp"><span class="id" type="definition">parseConjunctionExp<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
parseConjunctionExp	lf/imp.mli	/^val parseConjunctionExp : int -> token list -> (bexp * token list) optionE$/;"	v
parseCss	lf/common/jquery-ui/jquery-ui.js	/^function parseCss( element, property ) {$/;"	f
parseCss	plf/common/jquery-ui/jquery-ui.js	/^function parseCss( element, property ) {$/;"	f
parseIdentifier	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parseIdentifier"><span class="id" type="definition">parseIdentifier<\/span><\/a> (<span class="id" type="var">xs<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>)<br\/>$/;"	a
parseIdentifier	lf/imp.mli	/^val parseIdentifier : token list -> (id * token list) optionE$/;"	v
parseNumber	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parseNumber"><span class="id" type="definition">parseNumber<\/span><\/a> (<span class="id" type="var">xs<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>)<br\/>$/;"	a
parseNumber	lf/imp.ml	/^let parseNumber = function$/;"	v
parseNumber	lf/imp.mli	/^val parseNumber : token list -> (int * token list) optionE$/;"	v
parsePrimaryExp	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="parsePrimaryExp"><span class="id" type="definition">parsePrimaryExp<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) <br\/>$/;"	a
parsePrimaryExp	lf/imp.mli	/^val parsePrimaryExp : int -> token list -> (aexp * token list) optionE$/;"	v
parseProductExp	lf/ImpParser.html	/^<span class="id" type="keyword">with<\/span> <a name="parseProductExp"><span class="id" type="definition">parseProductExp<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
parseProductExp	lf/imp.mli	/^val parseProductExp : int -> token list -> (aexp * token list) optionE$/;"	v
parseSequencedCommand	lf/ImpParser.html	/^<span class="id" type="keyword">with<\/span> <a name="parseSequencedCommand"><span class="id" type="definition">parseSequencedCommand<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
parseSequencedCommand	lf/imp.mli	/^val parseSequencedCommand : int -> token list -> (com * token list) optionE$/;"	v
parseSimpleCommand	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="parseSimpleCommand"><span class="id" type="definition">parseSimpleCommand<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) <br\/>$/;"	a
parseSimpleCommand	lf/imp.mli	/^val parseSimpleCommand : int -> token list -> (com * token list) optionE$/;"	v
parseSumExp	lf/ImpParser.html	/^<span class="id" type="keyword">with<\/span> <a name="parseSumExp"><span class="id" type="definition">parseSumExp<\/span><\/a> (<span class="id" type="var">steps<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">xs<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="ImpParser.html#token"><span class="id" type="definition">token<\/span><\/a>)  :=<br\/>$/;"	a
parseSumExp	lf/imp.mli	/^val parseSumExp : int -> token list -> (aexp * token list) optionE$/;"	v
parser	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="parser"><span class="id" type="definition">parser<\/span><\/a> (<span class="id" type="var">T<\/span> : <span class="id" type="keyword">Type<\/span>) :=<br\/>$/;"	a
parser0	lf/imp.ml	/^type 't parser0 = token list -> ('t * token list) optionE$/;"	t
parser0	lf/imp.mli	/^type 't parser0 = token list -> ('t * token list) optionE$/;"	t
partial_function	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="partial_function"><span class="id" type="definition">partial_function<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
partial_map	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="partial_map"><span class="id" type="definition">partial_map<\/span><\/a> (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>) := <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
partition	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="partition"><span class="id" type="definition">partition<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
parts	lf/common/jquery-ui/jquery-ui.js	/^		var parts;$/;"	v
parts	plf/common/jquery-ui/jquery-ui.js	/^		var parts;$/;"	v
pe_add	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_add"><span class="id" type="definition">pe_add<\/span><\/a> (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">V<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> :=<br\/>$/;"	a
pe_add_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_add_correct"><span class="id" type="lemma">pe_add_correct<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">V<sub>0<\/sub><\/span>,<br\/>$/;"	a
pe_aexp	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_aexp"><span class="id" type="definition">pe_aexp<\/span><\/a> (<span class="id" type="var">pe_st<\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">a<\/span> : <span class="id" type="inductive">aexp<\/span>) : <span class="id" type="inductive">aexp<\/span> :=<br\/>$/;"	a
pe_aexp_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_aexp_correct"><span class="id" type="lemma">pe_aexp_correct<\/span><\/a>: ∀ (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">a<\/span>:<span class="id" type="inductive">aexp<\/span>) (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>),<br\/>$/;"	a
pe_aexp_correct_weak	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_aexp_correct_weak"><span class="id" type="lemma">pe_aexp_correct_weak<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span>, <a class="idref" href="PE.html#pe_consistent"><span class="id" type="definition">pe_consistent<\/span><\/a> <a class="idref" href="PE.html#st"><span class="id" type="variable">st<\/span><\/a> <a class="idref" href="PE.html#pe_st"><span class="id" type="variable">pe_st<\/span><\/a> →<br\/>$/;"	a
pe_bexp	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_bexp"><span class="id" type="definition">pe_bexp<\/span><\/a> (<span class="id" type="var">pe_st<\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">b<\/span> : <span class="id" type="inductive">bexp<\/span>) : <span class="id" type="inductive">bexp<\/span> :=<br\/>$/;"	a
pe_bexp_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_bexp_correct"><span class="id" type="lemma">pe_bexp_correct<\/span><\/a>: ∀ (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">b<\/span>:<span class="id" type="inductive">bexp<\/span>) (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>),<br\/>$/;"	a
pe_block	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_block"><span class="id" type="definition">pe_block<\/span><\/a> {<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">k<\/span> : <a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>)<br\/>$/;"	a
pe_block_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_block_correct"><span class="id" type="lemma">pe_block_correct<\/span><\/a>: ∀ (<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>) <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span> <span class="id" type="var">k<\/span> <span class="id" type="var">st'<\/span> <span class="id" type="var">pe_st'<\/span> (<span class="id" type="var">l'<\/span>:<a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>),<br\/>$/;"	a
pe_block_example	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="pe_block_example"><span class="id" type="definition">pe_block_example<\/span><\/a>:<br\/>$/;"	a
pe_ceval	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="pe_ceval"><span class="id" type="inductive">pe_ceval<\/span><\/a><br\/>$/;"	a
pe_ceval_intro	plf/PE.html	/^&nbsp;&nbsp;| <a name="pe_ceval_intro"><span class="id" type="constructor">pe_ceval_intro<\/span><\/a> : ∀ <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
pe_com	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="pe_com"><span class="id" type="inductive">pe_com<\/span><\/a> : <span class="id" type="inductive">com<\/span> → <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> → <span class="id" type="inductive">com<\/span> → <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
pe_com_complete	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_com_complete"><span class="id" type="lemma">pe_com_complete<\/span><\/a>:<br\/>$/;"	a
pe_com_correct	plf/PE.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="pe_com_correct"><span class="id" type="lemma">pe_com_correct<\/span><\/a>:<br\/>$/;"	a
pe_com_sound	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_com_sound"><span class="id" type="lemma">pe_com_sound<\/span><\/a>:<br\/>$/;"	a
pe_compare	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_compare"><span class="id" type="definition">pe_compare<\/span><\/a> (<span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span> :=<br\/>$/;"	a
pe_compare_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_compare_correct"><span class="id" type="lemma">pe_compare_correct<\/span><\/a>: ∀ <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> <span class="id" type="var">V<\/span>,<br\/>$/;"	a
pe_compare_removes	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_compare_removes"><span class="id" type="lemma">pe_compare_removes<\/span><\/a>: ∀ <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> <span class="id" type="var">V<\/span>,<br\/>$/;"	a
pe_compare_update	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_compare_update"><span class="id" type="lemma">pe_compare_update<\/span><\/a>: ∀ <span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> <span class="id" type="var">st<\/span>,<br\/>$/;"	a
pe_consistent	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_consistent"><span class="id" type="definition">pe_consistent<\/span><\/a> (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>) (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) :=<br\/>$/;"	a
pe_consistent_update	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_consistent_update"><span class="id" type="lemma">pe_consistent_update<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span>,<br\/>$/;"	a
pe_disagree_at	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_disagree_at"><span class="id" type="definition">pe_disagree_at<\/span><\/a> (<span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">V<\/span>:<span class="id" type="inductive">id<\/span>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
pe_disagree_domain	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_disagree_domain"><span class="id" type="lemma">pe_disagree_domain<\/span><\/a>: ∀ (<span class="id" type="var">pe_st<sub>1<\/sub><\/span> <span class="id" type="var">pe_st<sub>2<\/sub><\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">V<\/span>:<span class="id" type="inductive">id<\/span>),<br\/>$/;"	a
pe_domain	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_domain"><span class="id" type="lemma">pe_domain<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
pe_example1	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="pe_example1"><span class="id" type="definition">pe_example1<\/span><\/a>:<br\/>$/;"	a
pe_example2	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="pe_example2"><span class="id" type="definition">pe_example2<\/span><\/a>:<br\/>$/;"	a
pe_example3	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="pe_example3"><span class="id" type="definition">pe_example3<\/span><\/a>:<br\/>$/;"	a
pe_lookup	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_lookup"><span class="id" type="definition">pe_lookup<\/span><\/a> (<span class="id" type="var">pe_st<\/span> : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">V<\/span>:<span class="id" type="inductive">id<\/span>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
pe_peval	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="pe_peval"><span class="id" type="inductive">pe_peval<\/span><\/a> {<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="PE.html#program"><span class="id" type="definition">program<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>)<br\/>$/;"	a
pe_peval_intro	plf/PE.html	/^&nbsp;&nbsp;| <a name="pe_peval_intro"><span class="id" type="constructor">pe_peval_intro<\/span><\/a> : ∀ <span class="id" type="var">st'<\/span> <span class="id" type="var">pe_st'<\/span>,<br\/>$/;"	a
pe_program	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_program"><span class="id" type="definition">pe_program<\/span><\/a> {<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="PE.html#program"><span class="id" type="definition">program<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>)<br\/>$/;"	a
pe_program_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_program_correct"><span class="id" type="lemma">pe_program_correct<\/span><\/a>:<br\/>$/;"	a
pe_remove	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_remove"><span class="id" type="definition">pe_remove<\/span><\/a> (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">V<\/span>:<span class="id" type="inductive">id<\/span>) : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> :=<br\/>$/;"	a
pe_remove_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_remove_correct"><span class="id" type="lemma">pe_remove_correct<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">V<sub>0<\/sub><\/span>,<br\/>$/;"	a
pe_removes	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_removes"><span class="id" type="definition">pe_removes<\/span><\/a> (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) (<span class="id" type="var">ids<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span>) : <a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a> :=<br\/>$/;"	a
pe_removes_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_removes_correct"><span class="id" type="lemma">pe_removes_correct<\/span><\/a>: ∀ <span class="id" type="var">pe_st<\/span> <span class="id" type="var">ids<\/span> <span class="id" type="var">V<\/span>,<br\/>$/;"	a
pe_state	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pe_state"><span class="id" type="definition">pe_state<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>).<br\/>$/;"	a
pe_unique	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_unique"><span class="id" type="definition">pe_unique<\/span><\/a> (<span class="id" type="var">l<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">id<\/span> :=<br\/>$/;"	a
pe_unique_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_unique_correct"><span class="id" type="lemma">pe_unique_correct<\/span><\/a>: ∀ <span class="id" type="var">l<\/span> <span class="id" type="var">x<\/span>,<br\/>$/;"	a
pe_update	plf/PE.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pe_update"><span class="id" type="definition">pe_update<\/span><\/a> (<span class="id" type="var">st<\/span>:<span class="id" type="definition">state<\/span>) (<span class="id" type="var">pe_st<\/span>:<a class="idref" href="PE.html#pe_state"><span class="id" type="definition">pe_state<\/span><\/a>) : <span class="id" type="definition">state<\/span> :=<br\/>$/;"	a
pe_update_consistent	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_update_consistent"><span class="id" type="lemma">pe_update_consistent<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span>,<br\/>$/;"	a
pe_update_correct	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_update_correct"><span class="id" type="lemma">pe_update_correct<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<sub>0<\/sub><\/span>,<br\/>$/;"	a
pe_update_update_add	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_update_update_add"><span class="id" type="lemma">pe_update_update_add<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
pe_update_update_remove	plf/PE.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pe_update_update_remove"><span class="id" type="lemma">pe_update_update_remove<\/span><\/a>: ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">pe_st<\/span> <span class="id" type="var">V<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
peirce	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="peirce"><span class="id" type="definition">peirce<\/span><\/a> := ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span>: <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
peval	plf/PE.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="peval"><span class="id" type="inductive">peval<\/span><\/a> {<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="PE.html#program"><span class="id" type="definition">program<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>)<br\/>$/;"	a
pigeonhole_principle	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pigeonhole_principle"><span class="id" type="lemma">pigeonhole_principle<\/span><\/a>: ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">l<sub>1<\/sub><\/span>  <span class="id" type="var">l<sub>2<\/sub><\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
plus'	lf/Basics.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="plus'"><span class="id" type="definition">plus'<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
plus2	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="plus2"><span class="id" type="definition">plus2<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
plus2_spec	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus2_spec"><span class="id" type="lemma">plus2_spec<\/span><\/a> : ∀ <span class="id" type="var">st<\/span> <span class="id" type="var">n<\/span> <span class="id" type="var">st'<\/span>,<br\/>$/;"	a
plus3	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="plus3"><span class="id" type="definition">plus3<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> 3.<br\/>$/;"	a
plus_1_l	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_1_l"><span class="id" type="lemma">plus_1_l<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, 1 + <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a> <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
plus_1_neq_0	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_1_neq_0"><span class="id" type="lemma">plus_1_neq_0<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_1_neq_0'	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_1_neq_0'"><span class="id" type="lemma">plus_1_neq_0'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_1_neq_0_firsttry	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_1_neq_0_firsttry"><span class="id" type="lemma">plus_1_neq_0_firsttry<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_2_2_is_4	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_2_2_is_4"><span class="id" type="lemma">plus_2_2_is_4<\/span><\/a> :<br\/>$/;"	a
plus_O_n	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_O_n"><span class="id" type="lemma">plus_O_n<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, 0 + <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
plus_O_n'	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_O_n'"><span class="id" type="lemma">plus_O_n'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, 0 + <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="Basics.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
plus_assoc	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_assoc"><span class="id" type="lemma">plus_assoc<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_assoc'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_assoc'"><span class="id" type="lemma">plus_assoc'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_assoc'	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_assoc'"><span class="id" type="lemma">plus_assoc'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_assoc''	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_assoc''"><span class="id" type="lemma">plus_assoc''<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_comm	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_comm"><span class="id" type="lemma">plus_comm<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_comm'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_comm'"><span class="id" type="lemma">plus_comm'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_comm''	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_comm''"><span class="id" type="lemma">plus_comm''<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_comm3	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="plus_comm3"><span class="id" type="lemma">plus_comm3<\/span><\/a> :<br\/>$/;"	a
plus_comm3_take2	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="plus_comm3_take2"><span class="id" type="lemma">plus_comm3_take2<\/span><\/a> :<br\/>$/;"	a
plus_comm3_take3	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="plus_comm3_take3"><span class="id" type="lemma">plus_comm3_take3<\/span><\/a> :<br\/>$/;"	a
plus_fact	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="plus_fact"><span class="id" type="definition">plus_fact<\/span><\/a> : <span class="id" type="keyword">Prop<\/span> := 2 + 2 = 4.<br\/>$/;"	a
plus_fact_is_true	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_fact_is_true"><span class="id" type="lemma">plus_fact_is_true<\/span><\/a> :<br\/>$/;"	a
plus_id_example	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_id_example"><span class="id" type="lemma">plus_id_example<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_id_exercise	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_id_exercise"><span class="id" type="lemma">plus_id_exercise<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_lt	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_lt"><span class="id" type="lemma">plus_lt<\/span><\/a> : ∀ <span class="id" type="var">n<sub>1<\/sub><\/span> <span class="id" type="var">n<sub>2<\/sub><\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
plus_n_O	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_n_O"><span class="id" type="lemma">plus_n_O<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, <a class="idref" href="Induction.html#n"><span class="id" type="variable">n<\/span><\/a> = <a class="idref" href="Induction.html#n"><span class="id" type="variable">n<\/span><\/a> + 0.<br\/>$/;"	a
plus_n_O_firsttry	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_n_O_firsttry"><span class="id" type="lemma">plus_n_O_firsttry<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_n_O_secondtry	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_n_O_secondtry"><span class="id" type="lemma">plus_n_O_secondtry<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_n_Sm	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_n_Sm"><span class="id" type="lemma">plus_n_Sm<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_n_n_injective	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_n_n_injective"><span class="id" type="lemma">plus_n_n_injective<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>,<br\/>$/;"	a
plus_one_r'	lf/IndPrinciples.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_one_r'"><span class="id" type="lemma">plus_one_r'<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_rearrange	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_rearrange"><span class="id" type="lemma">plus_rearrange<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> <span class="id" type="var">q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
plus_rearrange_firsttry	lf/Induction.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="plus_rearrange_firsttry"><span class="id" type="lemma">plus_rearrange_firsttry<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span> <span class="id" type="var">q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
position	lf/common/jquery-ui/jquery-ui.js	/^var position = $.ui.position;$/;"	v
position	plf/common/jquery-ui/jquery-ui.js	/^var position = $.ui.position;$/;"	v
positive	lf/imp.mli	/^type positive =$/;"	t
post	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="post"><span class="id" type="definition">post<\/span><\/a> (<span class="id" type="var">d<\/span>:<a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a>) : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
postDispatch	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.submit
postDispatch	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.submit
post_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="post_dec"><span class="id" type="definition">post_dec<\/span><\/a> (<span class="id" type="var">dec<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>) : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
pow2	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="pow2"><span class="id" type="definition">pow2<\/span><\/a> <span class="id" type="var">n<\/span> :=<br\/>$/;"	a
pow2_le_1	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="pow2_le_1"><span class="id" type="lemma">pow2_le_1<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Hoare2.html#pow2"><span class="id" type="definition">pow2<\/span><\/a> <a class="idref" href="Hoare2.html#n"><span class="id" type="variable">n<\/span><\/a> ≥ 1.<br\/>$/;"	a
pow2_plus_1	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="pow2_plus_1"><span class="id" type="lemma">pow2_plus_1<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
pre_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pre_dec"><span class="id" type="definition">pre_dec<\/span><\/a> (<span class="id" type="var">dec<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>) : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
preorder	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="preorder"><span class="id" type="definition">preorder<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
preservation	plf/Norm.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
preservation	plf/RecordSub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
preservation	plf/Sub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
preservation	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="preservation"><span class="id" type="lemma">preservation<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
preservation'	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="preservation'"><span class="id" type="lemma">preservation'<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
primary	lf/Basics.html	/^&nbsp;&nbsp;| <a name="primary"><span class="id" type="constructor">primary<\/span><\/a> : <a class="idref" href="Basics.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a> → <a class="idref" href="Basics.html#color"><span class="id" type="inductive">color<\/span><\/a>.<br\/>$/;"	a
processClassString	lf/common/jquery-ui/jquery-ui.js	/^		function processClassString( classes, checkOption ) {$/;"	f
processClassString	plf/common/jquery-ui/jquery-ui.js	/^		function processClassString( classes, checkOption ) {$/;"	f
prod	lf/Poly.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="prod"><span class="id" type="inductive">prod<\/span><\/a> (<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
prog	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog"><span class="id" type="definition">prog<\/span><\/a>  := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="inductive">sinstr<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
prog_a	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_a"><span class="id" type="definition">prog_a<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_b	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_b"><span class="id" type="definition">prog_b<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_c	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_c"><span class="id" type="definition">prog_c<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_d	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_d"><span class="id" type="definition">prog_d<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_e	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_e"><span class="id" type="definition">prog_e<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_f	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_f"><span class="id" type="definition">prog_f<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_g	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_g"><span class="id" type="definition">prog_g<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_h	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_h"><span class="id" type="definition">prog_h<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
prog_i	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="prog_i"><span class="id" type="definition">prog_i<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
program	plf/PE.html	/^<span class="id" type="keyword">Definition<\/span> <a name="program"><span class="id" type="definition">program<\/span><\/a> (<span class="id" type="var">L<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> := <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> (<a class="idref" href="PE.html#block"><span class="id" type="inductive">block<\/span><\/a> <a class="idref" href="PE.html#L"><span class="id" type="variable">L<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
programming	plf/Equiv.v	/^    real programming languages. For example, in many imperative$/;"	r
progress	plf/RecordSub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
progress	plf/Sub.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
progress	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="progress"><span class="id" type="lemma">progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
proj1	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="proj1"><span class="id" type="lemma">proj1<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
proj2	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="proj2"><span class="id" type="lemma">proj2<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <span class="id" type="keyword">Prop<\/span>,<br\/>$/;"	a
propFilter	lf/common/jquery-ui/external/jquery/jquery.js	/^function propFilter( props, specialEasing ) {$/;"	f
propFilter	plf/common/jquery-ui/external/jquery/jquery.js	/^function propFilter( props, specialEasing ) {$/;"	f
pup_to_2_ceval	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="pup_to_2_ceval"><span class="id" type="lemma">pup_to_2_ceval<\/span><\/a> :<br\/>$/;"	a
pup_to_n	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pup_to_n"><span class="id" type="definition">pup_to_n<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
pup_to_n	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Definition<\/span> <a name="pup_to_n"><span class="id" type="definition">pup_to_n<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a><br\/>$/;"	a
r20	lf/common/jquery-ui/external/jquery/jquery.js	/^var r20 = \/%20\/g,$/;"	v
r20	plf/common/jquery-ui/external/jquery/jquery.js	/^var r20 = \/%20\/g,$/;"	v
rbrace	lf/common/jquery-ui/external/jquery/jquery.js	/^var rbrace = \/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,$/;"	v
rbrace	plf/common/jquery-ui/external/jquery/jquery.js	/^var rbrace = \/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,$/;"	v
rcd_types_match	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="rcd_types_match"><span class="id" type="lemma">rcd_types_match<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
rclass	lf/common/jquery-ui/external/jquery/jquery.js	/^var rclass = \/[\\t\\r\\n\\f]\/g;$/;"	v
rclass	plf/common/jquery-ui/external/jquery/jquery.js	/^var rclass = \/[\\t\\r\\n\\f]\/g;$/;"	v
re_chars	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="re_chars"><span class="id" type="definition">re_chars<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">re<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a> :=<br\/>$/;"	a
re_not_empty	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="re_not_empty"><span class="id" type="definition">re_not_empty<\/span><\/a> {<span class="id" type="var">T<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">re<\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
re_not_empty_correct	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="re_not_empty_correct"><span class="id" type="lemma">re_not_empty_correct<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">re<\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
readyList	lf/common/jquery-ui/external/jquery/jquery.js	/^var readyList;$/;"	v
readyList	plf/common/jquery-ui/external/jquery/jquery.js	/^var readyList;$/;"	v
real_fact	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="real_fact"><span class="id" type="definition">real_fact<\/span><\/a> (<span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> :=<br\/>$/;"	a
record_tm	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="record_tm"><span class="id" type="inductive">record_tm<\/span><\/a> : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
record_ty	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="record_ty"><span class="id" type="inductive">record_ty<\/span><\/a> : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
red	lf/Basics.html	/^&nbsp;&nbsp;| <a name="red"><span class="id" type="constructor">red<\/span><\/a> : <a class="idref" href="Basics.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a><br\/>$/;"	a
red	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="red"><span class="id" type="constructor">red<\/span><\/a> : <a class="idref" href="IndPrinciples.html#rgb"><span class="id" type="inductive">rgb<\/span><\/a><br\/>$/;"	a
reduce_to_zero'	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="reduce_to_zero'"><span class="id" type="definition">reduce_to_zero'<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
reduce_to_zero_correct'	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="reduce_to_zero_correct'"><span class="id" type="lemma">reduce_to_zero_correct'<\/span><\/a> :<br\/>$/;"	a
refl_aequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="refl_aequiv"><span class="id" type="lemma">refl_aequiv<\/span><\/a> : ∀ (<span class="id" type="var">a<\/span> : <span class="id" type="inductive">aexp<\/span>), <a class="idref" href="Equiv.html#aequiv"><span class="id" type="definition">aequiv<\/span><\/a> <a class="idref" href="Equiv.html#a"><span class="id" type="variable">a<\/span><\/a> <a class="idref" href="Equiv.html#a"><span class="id" type="variable">a<\/span><\/a>.<br\/>$/;"	a
refl_bequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="refl_bequiv"><span class="id" type="lemma">refl_bequiv<\/span><\/a> : ∀ (<span class="id" type="var">b<\/span> : <span class="id" type="inductive">bexp<\/span>), <a class="idref" href="Equiv.html#bequiv"><span class="id" type="definition">bequiv<\/span><\/a> <a class="idref" href="Equiv.html#b"><span class="id" type="variable">b<\/span><\/a> <a class="idref" href="Equiv.html#b"><span class="id" type="variable">b<\/span><\/a>.<br\/>$/;"	a
refl_cequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="refl_cequiv"><span class="id" type="lemma">refl_cequiv<\/span><\/a> : ∀ (<span class="id" type="var">c<\/span> : <span class="id" type="inductive">com<\/span>), <a class="idref" href="Equiv.html#cequiv"><span class="id" type="definition">cequiv<\/span><\/a> <a class="idref" href="Equiv.html#c"><span class="id" type="variable">c<\/span><\/a> <a class="idref" href="Equiv.html#c"><span class="id" type="variable">c<\/span><\/a>.<br\/>$/;"	a
reflect	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="reflect"><span class="id" type="inductive">reflect<\/span><\/a> (<span class="id" type="var">P<\/span> : <span class="id" type="keyword">Prop<\/span>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
reflect_iff	lf/IndProp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="reflect_iff"><span class="id" type="lemma">reflect_iff<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">b<\/span>, <a class="idref" href="IndProp.html#reflect"><span class="id" type="inductive">reflect<\/span><\/a> <a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> <a class="idref" href="IndProp.html#b"><span class="id" type="variable">b<\/span><\/a> → (<a class="idref" href="IndProp.html#P"><span class="id" type="variable">P<\/span><\/a> ↔ <a class="idref" href="IndProp.html#b"><span class="id" type="variable">b<\/span><\/a> = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>).<br\/>$/;"	a
reflexive	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="reflexive"><span class="id" type="definition">reflexive<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
refreshHash	lf/common/slides.js	/^function refreshHash() {$/;"	f
refreshHash	plf/common/slides.js	/^function refreshHash() {$/;"	f
reg_exp	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> {<span class="id" type="var">T<\/span> : <span class="id" type="keyword">Type<\/span>} : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
reg_exp_ex<sub	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="reg_exp_ex<sub>1<\/sub>"><span class="id" type="definition">reg_exp_ex<sub>1<\/sub><\/span><\/a> : [1] =~ <a class="idref" href="IndProp.html#Char"><span class="id" type="constructor">Char<\/span><\/a> 1.<br\/>$/;"	a
reg_exp_ex<sub	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="reg_exp_ex<sub>2<\/sub>"><span class="id" type="definition">reg_exp_ex<sub>2<\/sub><\/span><\/a> : [1; 2] =~ <a class="idref" href="IndProp.html#App"><span class="id" type="constructor">App<\/span><\/a> (<a class="idref" href="IndProp.html#Char"><span class="id" type="constructor">Char<\/span><\/a> 1) (<a class="idref" href="IndProp.html#Char"><span class="id" type="constructor">Char<\/span><\/a> 2).<br\/>$/;"	a
reg_exp_ex<sub	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="reg_exp_ex<sub>3<\/sub>"><span class="id" type="definition">reg_exp_ex<sub>3<\/sub><\/span><\/a> : ¬ ([1; 2] =~ <a class="idref" href="IndProp.html#Char"><span class="id" type="constructor">Char<\/span><\/a> 1).<br\/>$/;"	a
reg_exp_ex<sub	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="reg_exp_ex<sub>4<\/sub>"><span class="id" type="definition">reg_exp_ex<sub>4<\/sub><\/span><\/a> : [1; 2; 3] =~ <a class="idref" href="IndProp.html#reg_exp_of_list"><span class="id" type="definition">reg_exp_of_list<\/span><\/a> [1; 2; 3].<br\/>$/;"	a
reg_exp_of_list	lf/IndProp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="reg_exp_of_list"><span class="id" type="definition">reg_exp_of_list<\/span><\/a> {<span class="id" type="var">T<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) :=<br\/>$/;"	a
reg_exp_of_list_spec	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="reg_exp_of_list_spec"><span class="id" type="lemma">reg_exp_of_list_spec<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
relation	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="relation"><span class="id" type="definition">relation<\/span><\/a> (<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>) := <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a> → <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>.<br\/>$/;"	a
relation	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="relation"><span class="id" type="definition">relation<\/span><\/a> (<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>) := <a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>→<a class="idref" href="Smallstep.html#X"><span class="id" type="variable">X<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>.<br\/>$/;"	a
remove	lf/common/jquery-ui/external/jquery/jquery.js	/^function remove( elem, selector, keepData ) {$/;"	f
remove	plf/common/jquery-ui/external/jquery/jquery.js	/^function remove( elem, selector, keepData ) {$/;"	f
repeat	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="repeat"><span class="id" type="definition">repeat<\/span><\/a> (<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">x<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">count<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
repeat'	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="repeat'"><span class="id" type="definition">repeat'<\/span><\/a> <span class="id" type="var">X<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">count<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
repeat''	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="repeat''"><span class="id" type="definition">repeat''<\/span><\/a> <span class="id" type="var">X<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">count<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
repeat'''	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="repeat'''"><span class="id" type="definition">repeat'''<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">x<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">count<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
repeats	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="repeats"><span class="id" type="inductive">repeats<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <span class="id" type="var">X<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
representing	lf/ImpCEvalFun.v	/^    function representing evaluation for Imp runs into difficulties.$/;"	f
restoreScript	lf/common/jquery-ui/external/jquery/jquery.js	/^function restoreScript( elem ) {$/;"	f
restoreScript	plf/common/jquery-ui/external/jquery/jquery.js	/^function restoreScript( elem ) {$/;"	f
restricted_excluded_middle	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="restricted_excluded_middle"><span class="id" type="lemma">restricted_excluded_middle<\/span><\/a> : ∀ <span class="id" type="var">P<\/span> <span class="id" type="var">b<\/span>,<br\/>$/;"	a
restricted_excluded_middle_eq	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="restricted_excluded_middle_eq"><span class="id" type="lemma">restricted_excluded_middle_eq<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
return	lf/common/jquery-ui/external/jquery/jquery.js	/^function Tween( elem, options, prop, end, easing ) {$/;"	c
return	plf/common/jquery-ui/external/jquery/jquery.js	/^function Tween( elem, options, prop, end, easing ) {$/;"	c
returnFalse	lf/common/jquery-ui/external/jquery/jquery.js	/^function returnFalse() {$/;"	f
returnFalse	plf/common/jquery-ui/external/jquery/jquery.js	/^function returnFalse() {$/;"	f
returnTrue	lf/common/jquery-ui/external/jquery/jquery.js	/^function returnTrue() {$/;"	f
returnTrue	plf/common/jquery-ui/external/jquery/jquery.js	/^function returnTrue() {$/;"	f
rev	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="rev"><span class="id" type="definition">rev<\/span><\/a> {<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span>:<a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
rev	lf/imp.ml	/^let rec rev = function$/;"	v
rev	lf/imp.mli	/^val rev : 'a1 list -> 'a1 list$/;"	v
rev_app_distr	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="rev_app_distr"><span class="id" type="lemma">rev_app_distr<\/span><\/a>: ∀ <span class="id" type="var">X<\/span> (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
rev_append	lf/Logic.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="rev_append"><span class="id" type="definition">rev_append<\/span><\/a> {<span class="id" type="var">X<\/span>} (<span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
rev_exercise1	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="rev_exercise1"><span class="id" type="lemma">rev_exercise1<\/span><\/a> : ∀ (<span class="id" type="var">l<\/span> <span class="id" type="var">l'<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
rev_involutive	lf/Poly.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="rev_involutive"><span class="id" type="lemma">rev_involutive<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>, ∀ <span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>,<br\/>$/;"	a
rfocusable	lf/common/jquery-ui/external/jquery/jquery.js	/^var rfocusable = \/^(?:input|select|textarea|button|object)$\/i,$/;"	v
rfocusable	plf/common/jquery-ui/external/jquery/jquery.js	/^var rfocusable = \/^(?:input|select|textarea|button|object)$\/i,$/;"	v
rformElems	lf/common/jquery-ui/external/jquery/jquery.js	/^var rformElems = \/^(?:input|select|textarea)$\/i,$/;"	v
rformElems	plf/common/jquery-ui/external/jquery/jquery.js	/^var rformElems = \/^(?:input|select|textarea)$\/i,$/;"	v
rgb	lf/Basics.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="rgb"><span class="id" type="inductive">rgb<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
rgb	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="rgb"><span class="id" type="inductive">rgb<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
rhtml	lf/common/jquery-ui/external/jquery/jquery.js	/^var rhtml = \/<|&#?\\w+;\/,$/;"	v
rhtml	plf/common/jquery-ui/external/jquery/jquery.js	/^var rhtml = \/<|&#?\\w+;\/,$/;"	v
rinlinejQuery	lf/common/jquery-ui/external/jquery/jquery.js	/^var rinlinejQuery = \/ jQuery\\d+="(?:null|\\d+)"\/g,$/;"	v
rinlinejQuery	plf/common/jquery-ui/external/jquery/jquery.js	/^var rinlinejQuery = \/ jQuery\\d+="(?:null|\\d+)"\/g,$/;"	v
risSimple	lf/common/jquery-ui/external/jquery/jquery.js	/^var risSimple = \/^.[^:#\\[\\.,]*$\/;$/;"	v
risSimple	plf/common/jquery-ui/external/jquery/jquery.js	/^var risSimple = \/^.[^:#\\[\\.,]*$\/;$/;"	v
rm	plf/LibTactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="rm"><span class="id" type="definition">rm<\/span><\/a> (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">X<\/span>:<a class="idref" href="LibTactics.html#A"><span class="id" type="variable">A<\/span><\/a>) := <a class="idref" href="LibTactics.html#X"><span class="id" type="variable">X<\/span><\/a>.<br\/>$/;"	a
rneedsContext	lf/common/jquery-ui/external/jquery/jquery.js	/^var rneedsContext = jQuery.expr.match.needsContext;$/;"	v
rneedsContext	plf/common/jquery-ui/external/jquery/jquery.js	/^var rneedsContext = jQuery.expr.match.needsContext;$/;"	v
rreturn	lf/common/jquery-ui/external/jquery/jquery.js	/^var rreturn = \/\\r\/g,$/;"	v
rreturn	plf/common/jquery-ui/external/jquery/jquery.js	/^var rreturn = \/\\r\/g,$/;"	v
rsc_R	lf/Rel.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="rsc_R"><span class="id" type="lemma">rsc_R<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">R<\/span>:<a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) (<span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> : <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
rsc_trans	lf/Rel.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="rsc_trans"><span class="id" type="lemma">rsc_trans<\/span><\/a> :<br\/>$/;"	a
rt1n_refl	lf/Rel.html	/^&nbsp;&nbsp;| <a name="rt1n_refl"><span class="id" type="constructor">rt1n_refl<\/span><\/a> : <a class="idref" href="Rel.html#clos_refl_trans_1n"><span class="id" type="inductive">clos_refl_trans_1n<\/span><\/a> <span class="id" type="var">R<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">x<\/span><br\/>$/;"	a
rt1n_trans	lf/Rel.html	/^&nbsp;&nbsp;| <a name="rt1n_trans"><span class="id" type="constructor">rt1n_trans<\/span><\/a> (<span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span> : <span class="id" type="var">A<\/span>) :<br\/>$/;"	a
rt_refl	lf/Rel.html	/^&nbsp;&nbsp;&nbsp;&nbsp;| <a name="rt_refl"><span class="id" type="constructor">rt_refl<\/span><\/a> : ∀ <span class="id" type="var">x<\/span>, <a class="idref" href="Rel.html#clos_refl_trans"><span class="id" type="inductive">clos_refl_trans<\/span><\/a> <span class="id" type="var">R<\/span> <a class="idref" href="Rel.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Rel.html#x"><span class="id" type="variable">x<\/span><\/a><br\/>$/;"	a
rt_step	lf/Rel.html	/^&nbsp;&nbsp;&nbsp;&nbsp;| <a name="rt_step"><span class="id" type="constructor">rt_step<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span>, <span class="id" type="var">R<\/span> <a class="idref" href="Rel.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Rel.html#y"><span class="id" type="variable">y<\/span><\/a> → <a class="idref" href="Rel.html#clos_refl_trans"><span class="id" type="inductive">clos_refl_trans<\/span><\/a> <span class="id" type="var">R<\/span> <a class="idref" href="Rel.html#x"><span class="id" type="variable">x<\/span><\/a> <a class="idref" href="Rel.html#y"><span class="id" type="variable">y<\/span><\/a><br\/>$/;"	a
rt_trans	lf/Rel.html	/^&nbsp;&nbsp;&nbsp;&nbsp;| <a name="rt_trans"><span class="id" type="constructor">rt_trans<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">y<\/span> <span class="id" type="var">z<\/span>,<br\/>$/;"	a
rtc_rsc_coincide	lf/Rel.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="rtc_rsc_coincide"><span class="id" type="lemma">rtc_rsc_coincide<\/span><\/a> :<br\/>$/;"	a
rtcons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="rtcons"><span class="id" type="constructor">rtcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span>,<br\/>$/;"	a
rtnil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="rtnil"><span class="id" type="constructor">rtnil<\/span><\/a> :<br\/>$/;"	a
run	lf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:Tween
run	plf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:Tween
rvalidtokens	lf/common/jquery-ui/external/jquery/jquery.js	/^var rvalidtokens = \/(,)|(\\[|{)|(}|])|"(?:[^"\\\\\\r\\n]|\\\\["\\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)\/g;$/;"	v
rvalidtokens	plf/common/jquery-ui/external/jquery/jquery.js	/^var rvalidtokens = \/(,)|(\\[|{)|(}|])|"(?:[^"\\\\\\r\\n]|\\\\["\\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)\/g;$/;"	v
s_compile	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="s_compile"><span class="id" type="definition">s_compile<\/span><\/a> (<span class="id" type="var">e<\/span> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Imp.html#sinstr"><span class="id" type="inductive">sinstr<\/span><\/a><br\/>$/;"	a
s_compile1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="s_compile1"><span class="id" type="definition">s_compile1<\/span><\/a> :<br\/>$/;"	a
s_compile_correct	lf/Imp.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="s_compile_correct"><span class="id" type="lemma">s_compile_correct<\/span><\/a> : ∀ (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">e<\/span> : <a class="idref" href="Imp.html#aexp"><span class="id" type="inductive">aexp<\/span><\/a>),<br\/>$/;"	a
s_execute	lf/Imp.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="s_execute"><span class="id" type="definition">s_execute<\/span><\/a> (<span class="id" type="var">st<\/span> : <a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">stack<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>)<br\/>$/;"	a
s_execute1	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="s_execute1"><span class="id" type="definition">s_execute1<\/span><\/a> :<br\/>$/;"	a
s_execute2	lf/Imp.html	/^<span class="id" type="keyword">Example<\/span> <a name="s_execute2"><span class="id" type="definition">s_execute2<\/span><\/a> :<br\/>$/;"	a
safeActiveElement	lf/common/jquery-ui/external/jquery/jquery.js	/^function safeActiveElement() {$/;"	f
safeActiveElement	plf/common/jquery-ui/external/jquery/jquery.js	/^function safeActiveElement() {$/;"	f
sample_proof	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Example<\/span> <a name="sample_proof"><span class="id" type="definition">sample_proof<\/span><\/a> :<br\/>$/;"	a
saturday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="saturday"><span class="id" type="constructor">saturday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
scrollbarWidth	lf/common/jquery-ui/jquery-ui.js	/^$.position = {$/;"	m	class:$.position
scrollbarWidth	plf/common/jquery-ui/jquery-ui.js	/^$.position = {$/;"	m	class:$.position
search_depth_0	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="search_depth_0"><span class="id" type="lemma">search_depth_0<\/span><\/a> :<br\/>$/;"	a
search_depth_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="search_depth_1"><span class="id" type="lemma">search_depth_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
search_depth_3	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="search_depth_3"><span class="id" type="lemma">search_depth_3<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
search_depth_4	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="search_depth_4"><span class="id" type="lemma">search_depth_4<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
search_depth_5	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="search_depth_5"><span class="id" type="lemma">search_depth_5<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
section_D	plf/coqindex.html	/^<a name="section_D"><\/a><h2>D <\/h2>$/;"	a
section_E	plf/coqindex.html	/^<br\/><br\/><a name="section_E"><\/a><h2>E <\/h2>$/;"	a
section_H	plf/coqindex.html	/^<br\/><br\/><a name="section_H"><\/a><h2>H <\/h2>$/;"	a
seq_assoc	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="seq_assoc"><span class="id" type="lemma">seq_assoc<\/span><\/a> : ∀ <span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>3<\/sub><\/span>,<br\/>$/;"	a
set	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.attrHooks.style
set	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.cssHooks.opacity
set	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.propHooks.selected
set	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	p	class:jQuery.valHooks.button
set	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.contenteditable = {$/;"	m	class:jQuery.attrHooks.contenteditable
set	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.value = {$/;"	m	class:jQuery.attrHooks.value
set	lf/common/jquery-ui/external/jquery/jquery.js	/^	nodeHook = {$/;"	m	class:nodeHook
set	lf/common/jquery-ui/external/jquery/jquery.js	/^boolHook = {$/;"	m	class:boolHook
set	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.attrHooks.style
set	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.cssHooks.opacity
set	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.propHooks.selected
set	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	p	class:jQuery.valHooks.button
set	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.contenteditable = {$/;"	m	class:jQuery.attrHooks.contenteditable
set	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.attrHooks.value = {$/;"	m	class:jQuery.attrHooks.value
set	plf/common/jquery-ui/external/jquery/jquery.js	/^	nodeHook = {$/;"	m	class:nodeHook
set	plf/common/jquery-ui/external/jquery/jquery.js	/^boolHook = {$/;"	m	class:boolHook
setGlobalEval	lf/common/jquery-ui/external/jquery/jquery.js	/^function setGlobalEval( elems, refElements ) {$/;"	f
setGlobalEval	plf/common/jquery-ui/external/jquery/jquery.js	/^function setGlobalEval( elems, refElements ) {$/;"	f
setOffset	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.offset = {$/;"	m	class:jQuery.offset
setOffset	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.offset = {$/;"	m	class:jQuery.offset
setPositiveNumber	lf/common/jquery-ui/external/jquery/jquery.js	/^function setPositiveNumber( elem, value, subtract ) {$/;"	f
setPositiveNumber	plf/common/jquery-ui/external/jquery/jquery.js	/^function setPositiveNumber( elem, value, subtract ) {$/;"	f
setup	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.event.special.change = {$/;"	m	class:jQuery.event.special.change
setup	lf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.event.special.submit = {$/;"	m	class:jQuery.event.special.submit
setup	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.event.special.change = {$/;"	m	class:jQuery.event.special.change
setup	plf/common/jquery-ui/external/jquery/jquery.js	/^	jQuery.event.special.submit = {$/;"	m	class:jQuery.event.special.submit
showHide	lf/common/jquery-ui/external/jquery/jquery.js	/^function showHide( elements, show ) {$/;"	f
showHide	plf/common/jquery-ui/external/jquery/jquery.js	/^function showHide( elements, show ) {$/;"	f
sibling	lf/common/jquery-ui/external/jquery/jquery.js	/^function sibling( cur, dir ) {$/;"	f
sibling	plf/common/jquery-ui/external/jquery/jquery.js	/^function sibling( cur, dir ) {$/;"	f
siblings	lf/common/jquery-ui/external/jquery/jquery.js	/^var siblings = function( n, elem ) {$/;"	f
siblings	plf/common/jquery-ui/external/jquery/jquery.js	/^var siblings = function( n, elem ) {$/;"	f
silly1	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly1"><span class="id" type="lemma">silly1<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
silly1	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="silly1"><span class="id" type="lemma">silly1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
silly2	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly2"><span class="id" type="lemma">silly2<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
silly2	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="silly2"><span class="id" type="lemma">silly2<\/span><\/a> :<br\/>$/;"	a
silly2_eassumption	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="silly2_eassumption"><span class="id" type="lemma">silly2_eassumption<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
silly2_fixed	plf/Hoare.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="silly2_fixed"><span class="id" type="lemma">silly2_fixed<\/span><\/a> :<br\/>$/;"	a
silly2a	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly2a"><span class="id" type="lemma">silly2a<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
silly3'	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly3'"><span class="id" type="lemma">silly3'<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
silly3_firsttry	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly3_firsttry"><span class="id" type="lemma">silly3_firsttry<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
silly_ex	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="silly_ex"><span class="id" type="lemma">silly_ex<\/span><\/a> :<br\/>$/;"	a
silly_fact_1	lf/Tactics.html	/^<span class="id" type="keyword">Fact<\/span> <a name="silly_fact_1"><span class="id" type="lemma">silly_fact_1<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>, <a class="idref" href="Tactics.html#foo"><span class="id" type="definition">foo<\/span><\/a> <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1 = <a class="idref" href="Tactics.html#foo"><span class="id" type="definition">foo<\/span><\/a> (<a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1) + 1.<br\/>$/;"	a
silly_fact_2	lf/Tactics.html	/^<span class="id" type="keyword">Fact<\/span> <a name="silly_fact_2"><span class="id" type="lemma">silly_fact_2<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>, <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1 = <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> (<a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1) + 1.<br\/>$/;"	a
silly_fact_2'	lf/Tactics.html	/^<span class="id" type="keyword">Fact<\/span> <a name="silly_fact_2'"><span class="id" type="lemma">silly_fact_2'<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>, <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1 = <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> (<a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1) + 1.<br\/>$/;"	a
silly_fact_2_FAILED	lf/Tactics.html	/^<span class="id" type="keyword">Fact<\/span> <a name="silly_fact_2_FAILED"><span class="id" type="lemma">silly_fact_2_FAILED<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>, <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1 = <a class="idref" href="Tactics.html#bar"><span class="id" type="definition">bar<\/span><\/a> (<a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a> + 1) + 1.<br\/>$/;"	a
sillyfun	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="sillyfun"><span class="id" type="definition">sillyfun<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
sillyfun1	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="sillyfun1"><span class="id" type="definition">sillyfun1<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a> :=<br\/>$/;"	a
sillyfun1_odd	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="sillyfun1_odd"><span class="id" type="lemma">sillyfun1_odd<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
sillyfun1_odd_FAILED	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="sillyfun1_odd_FAILED"><span class="id" type="lemma">sillyfun1_odd_FAILED<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
sillyfun_false	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="sillyfun_false"><span class="id" type="lemma">sillyfun_false<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
sinstr	lf/Imp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="sinstr"><span class="id" type="inductive">sinstr<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
skip_axiom	plf/LibTactics.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="skip_axiom"><span class="id" type="axiom">skip_axiom<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#False"><span class="id" type="inductive">False<\/span><\/a>.<br\/>$/;"	a
skip_left	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="skip_left"><span class="id" type="lemma">skip_left<\/span><\/a>: ∀ <span class="id" type="var">c<\/span>,<br\/>$/;"	a
skip_right	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="skip_right"><span class="id" type="lemma">skip_right<\/span><\/a>: ∀ <span class="id" type="var">c<\/span>,<br\/>$/;"	a
slideActivate	lf/common/slides.js	/^function slideActivate() {$/;"	f
slideActivate	plf/common/slides.js	/^function slideActivate() {$/;"	f
slideDeactivate	lf/common/slides.js	/^function slideDeactivate() {$/;"	f
slideDeactivate	plf/common/slides.js	/^function slideDeactivate() {$/;"	f
slideMode	lf/common/slides.js	/^var slideMode = false;$/;"	v
slideMode	plf/common/slides.js	/^var slideMode = false;$/;"	v
slideNavigate	lf/common/slides.js	/^function slideNavigate(direction) {$/;"	f
slideNavigate	plf/common/slides.js	/^function slideNavigate(direction) {$/;"	f
slideNumber	lf/common/slides.js	/^    function slideNumber(s) {$/;"	f	function:slideNavigate
slideNumber	plf/common/slides.js	/^    function slideNumber(s) {$/;"	f	function:slideNavigate
slideSelector	lf/common/slides.js	/^var slideSelector = 'h1.libtitle, h1.section, h2.section, h3.section, .quiz';$/;"	v
slideSelector	plf/common/slides.js	/^var slideSelector = 'h1.libtitle, h1.section, h2.section, h3.section, .quiz';$/;"	v
slow	lf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.fx.speeds = {$/;"	p	class:jQuery.fx.speeds
slow	plf/common/jquery-ui/external/jquery/jquery.js	/^jQuery.fx.speeds = {$/;"	p	class:jQuery.fx.speeds
slow_assignment_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Example<\/span> <a name="slow_assignment_dec"><span class="id" type="definition">slow_assignment_dec<\/span><\/a> (<span class="id" type="var">m<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a><br\/>$/;"	a
slow_assignment_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="slow_assignment_dec_correct"><span class="id" type="lemma">slow_assignment_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
snd	lf/Poly.html	/^<span class="id" type="keyword">Definition<\/span> <a name="snd"><span class="id" type="definition">snd<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">p<\/span> : <a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a> * <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>) : <a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a> :=<br\/>$/;"	a
so	lf/Basics.v	/^    module so that it does not interfere with the one from the$/;"	m
solved_by_jauto	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solved_by_jauto"><span class="id" type="lemma">solved_by_jauto<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">F<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_by_apply	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_by_apply"><span class="id" type="lemma">solving_by_apply<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_by_eapply	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_by_eapply"><span class="id" type="lemma">solving_by_eapply<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_by_reflexivity	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_by_reflexivity"><span class="id" type="lemma">solving_by_reflexivity<\/span><\/a> :<br\/>$/;"	a
solving_conj_goal	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_conj_goal"><span class="id" type="lemma">solving_conj_goal<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">F<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_conj_hyp	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_conj_hyp"><span class="id" type="lemma">solving_conj_hyp<\/span><\/a> : ∀ (<span class="id" type="var">F<\/span> <span class="id" type="var">F'<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_conj_hyp'	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_conj_hyp'"><span class="id" type="lemma">solving_conj_hyp'<\/span><\/a> : ∀ (<span class="id" type="var">F<\/span> <span class="id" type="var">F'<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_conj_hyp_forall	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_conj_hyp_forall"><span class="id" type="lemma">solving_conj_hyp_forall<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_conj_more	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_conj_more"><span class="id" type="lemma">solving_conj_more<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">R<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>) (<span class="id" type="var">F<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_disj_goal	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_disj_goal"><span class="id" type="lemma">solving_disj_goal<\/span><\/a> : ∀ (<span class="id" type="var">F<\/span> <span class="id" type="var">F'<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_disj_hyp	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_disj_hyp"><span class="id" type="lemma">solving_disj_hyp<\/span><\/a> : ∀ (<span class="id" type="var">F<\/span> <span class="id" type="var">F'<\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_exists_goal	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_exists_goal"><span class="id" type="lemma">solving_exists_goal<\/span><\/a> : ∀ (<span class="id" type="var">f<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_exists_hyp	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_exists_hyp"><span class="id" type="lemma">solving_exists_hyp<\/span><\/a> : ∀ (<span class="id" type="var">f<\/span> <span class="id" type="var">g<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
solving_tauto	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="solving_tauto"><span class="id" type="lemma">solving_tauto<\/span><\/a> : ∀ (<span class="id" type="var">F<sub>1<\/sub><\/span> <span class="id" type="var">F<sub>2<\/sub><\/span> <span class="id" type="var">F<sub>3<\/sub><\/span> : <span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
some_term_is_stuck	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="some_term_is_stuck"><span class="id" type="definition">some_term_is_stuck<\/span><\/a> :<br\/>$/;"	a
soundness	plf/Types.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="soundness"><span class="id" type="lemma">soundness<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
split	lf/Poly.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="split"><span class="id" type="definition">split<\/span><\/a> {<span class="id" type="var">X<\/span> <span class="id" type="var">Y<\/span> : <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> (<a class="idref" href="Poly.html#X"><span class="id" type="variable">X<\/span><\/a>*<a class="idref" href="Poly.html#Y"><span class="id" type="variable">Y<\/span><\/a>))<br\/>$/;"	a
split_combine	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="split_combine"><span class="id" type="lemma">split_combine<\/span><\/a> : <a class="idref" href="Tactics.html#split_combine_statement"><span class="id" type="axiom">split_combine_statement<\/span><\/a>.<br\/>$/;"	a
split_combine_statement	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="split_combine_statement"><span class="id" type="definition">split_combine_statement<\/span><\/a> : <span class="id" type="keyword">Prop<\/span><br\/>$/;"	a
sq	lf/IndProp.html	/^&nbsp;&nbsp;| <a name="sq"><span class="id" type="constructor">sq<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>, <a class="idref" href="IndProp.html#square_of"><span class="id" type="inductive">square_of<\/span><\/a> <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> (<a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a> * <a class="idref" href="IndProp.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
sqrt_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="sqrt_correct"><span class="id" type="lemma">sqrt_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
sqrt_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="sqrt_dec"><span class="id" type="definition">sqrt_dec<\/span><\/a> <span class="id" type="var">m<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
square	lf/Tactics.html	/^<span class="id" type="keyword">Definition<\/span> <a name="square"><span class="id" type="definition">square<\/span><\/a> <span class="id" type="var">n<\/span> := <a class="idref" href="Tactics.html#n"><span class="id" type="variable">n<\/span><\/a> * <a class="idref" href="Tactics.html#n"><span class="id" type="variable">n<\/span><\/a>.<br\/>$/;"	a
square_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="square_dec"><span class="id" type="definition">square_dec<\/span><\/a> (<span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
square_dec'	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="square_dec'"><span class="id" type="definition">square_dec'<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
square_dec'_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="square_dec'_correct"><span class="id" type="lemma">square_dec'_correct<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>,<br\/>$/;"	a
square_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="square_dec_correct"><span class="id" type="lemma">square_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
square_mult	lf/Tactics.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="square_mult"><span class="id" type="lemma">square_mult<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span>, <a class="idref" href="Tactics.html#square"><span class="id" type="definition">square<\/span><\/a> (<a class="idref" href="Tactics.html#n"><span class="id" type="variable">n<\/span><\/a> * <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a>) = <a class="idref" href="Tactics.html#square"><span class="id" type="definition">square<\/span><\/a> <a class="idref" href="Tactics.html#n"><span class="id" type="variable">n<\/span><\/a> * <a class="idref" href="Tactics.html#square"><span class="id" type="definition">square<\/span><\/a> <a class="idref" href="Tactics.html#m"><span class="id" type="variable">m<\/span><\/a>.<br\/>$/;"	a
square_of	lf/IndProp.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="square_of"><span class="id" type="inductive">square_of<\/span><\/a> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
square_simpler_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="square_simpler_dec"><span class="id" type="definition">square_simpler_dec<\/span><\/a> (<span class="id" type="var">m<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
square_simpler_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="square_simpler_dec_correct"><span class="id" type="lemma">square_simpler_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span>,<br\/>$/;"	a
st<sub	lf/Auto.html	/^<span class="id" type="keyword">Definition<\/span> <a name="st<sub>12<\/sub>"><span class="id" type="definition">st<sub>12<\/sub><\/span><\/a> := <a class="idref" href="Maps.html#t_update"><span class="id" type="definition">t_update<\/span><\/a> (<a class="idref" href="Maps.html#t_update"><span class="id" type="definition">t_update<\/span><\/a> <a class="idref" href="Imp.html#empty_state"><span class="id" type="definition">empty_state<\/span><\/a> <a class="idref" href="Imp.html#X"><span class="id" type="definition">X<\/span><\/a> 1) <a class="idref" href="Imp.html#Y"><span class="id" type="definition">Y<\/span><\/a> 2.<br\/>$/;"	a
st<sub	lf/Auto.html	/^<span class="id" type="keyword">Definition<\/span> <a name="st<sub>21<\/sub>"><span class="id" type="definition">st<sub>21<\/sub><\/span><\/a> := <a class="idref" href="Maps.html#t_update"><span class="id" type="definition">t_update<\/span><\/a> (<a class="idref" href="Maps.html#t_update"><span class="id" type="definition">t_update<\/span><\/a> <a class="idref" href="Imp.html#empty_state"><span class="id" type="definition">empty_state<\/span><\/a> <a class="idref" href="Imp.html#X"><span class="id" type="definition">X<\/span><\/a> 2) <a class="idref" href="Imp.html#Y"><span class="id" type="definition">Y<\/span><\/a> 1.<br\/><hr class='doublespaceincode'\/>$/;"	a
stack	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="stack"><span class="id" type="definition">stack<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>.<br\/>$/;"	a
stack_multistep	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="stack_multistep"><span class="id" type="definition">stack_multistep<\/span><\/a> <span class="id" type="var">st<\/span> := <a class="idref" href="Smallstep.html#multi"><span class="id" type="inductive">multi<\/span><\/a> (<a class="idref" href="Smallstep.html#stack_step"><span class="id" type="inductive">stack_step<\/span><\/a> <a class="idref" href="Smallstep.html#st"><span class="id" type="variable">st<\/span><\/a>).<br\/>$/;"	a
stack_step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="stack_step"><span class="id" type="inductive">stack_step<\/span><\/a> : <span class="id" type="definition">state<\/span> → <a class="idref" href="Smallstep.html#prog"><span class="id" type="definition">prog<\/span><\/a> * <a class="idref" href="Smallstep.html#stack"><span class="id" type="definition">stack<\/span><\/a> → <a class="idref" href="Smallstep.html#prog"><span class="id" type="definition">prog<\/span><\/a> * <a class="idref" href="Smallstep.html#stack"><span class="id" type="definition">stack<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
stack_step_deterministic	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="stack_step_deterministic"><span class="id" type="lemma">stack_step_deterministic<\/span><\/a> : ∀ <span class="id" type="var">st<\/span>,<br\/>$/;"	a
star_app	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="star_app"><span class="id" type="lemma">star_app<\/span><\/a>: ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>),<br\/>$/;"	a
star_app	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="star_app"><span class="id" type="lemma">star_app<\/span><\/a>: ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<\/span> : @<a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>),<br\/>$/;"	a
star_app	lf/IndProp.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="star_app"><span class="id" type="lemma">star_app<\/span><\/a>: ∀ <span class="id" type="var">T<\/span> (<span class="id" type="var">s<sub>1<\/sub><\/span> <span class="id" type="var">s<sub>2<\/sub><\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="IndProp.html#T"><span class="id" type="variable">T<\/span><\/a>) (<span class="id" type="var">re<\/span> <span class="id" type="var">re'<\/span> : <a class="idref" href="IndProp.html#reg_exp"><span class="id" type="inductive">reg_exp<\/span><\/a>),<br\/>$/;"	a
state	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="state"><span class="id" type="definition">state<\/span><\/a> := <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
state	lf/imp.ml	/^type state = int total_map$/;"	t
state	lf/imp.mli	/^type state = int total_map$/;"	t
state	lf/imp1.ml	/^type state = nat total_map$/;"	t
state	lf/imp1.mli	/^type state = nat total_map$/;"	t
state	lf/imp2.ml	/^type state = int total_map$/;"	t
state	lf/imp2.mli	/^type state = int total_map$/;"	t
step	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
step	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
step	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
step	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
step	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="step"><span class="id" type="inductive">step<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
step__eval	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step__eval"><span class="id" type="lemma">step__eval<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
step_deterministic	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step_deterministic"><span class="id" type="lemma">step_deterministic<\/span><\/a> :<br\/>$/;"	a
step_deterministic	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="step_deterministic"><span class="id" type="lemma">step_deterministic<\/span><\/a> :<br\/>$/;"	a
step_deterministic	plf/Types.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="step_deterministic"><span class="id" type="lemma">step_deterministic<\/span><\/a>:<br\/>$/;"	a
step_normal_form	plf/Norm.html	/^<span class="id" type="keyword">Notation<\/span> <a name="step_normal_form"><span class="id" type="abbreviation">step_normal_form<\/span><\/a> := (<a class="idref" href="Smallstep.html#normal_form"><span class="id" type="definition">normal_form<\/span><\/a> <a class="idref" href="Norm.html#step"><span class="id" type="inductive">step<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
step_normal_form	plf/Smallstep.html	/^<span class="id" type="keyword">Definition<\/span> <a name="step_normal_form"><span class="id" type="definition">step_normal_form<\/span><\/a> := <a class="idref" href="Smallstep.html#normal_form"><span class="id" type="definition">normal_form<\/span><\/a> <a class="idref" href="Smallstep.html#step"><span class="id" type="inductive">step<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
step_normal_form	plf/Types.html	/^<span class="id" type="keyword">Notation<\/span> <a name="step_normal_form"><span class="id" type="abbreviation">step_normal_form<\/span><\/a> := (<a class="idref" href="Smallstep.html#normal_form"><span class="id" type="definition">normal_form<\/span><\/a> <a class="idref" href="Types.html#step"><span class="id" type="inductive">step<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
step_normalizing	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="step_normalizing"><span class="id" type="lemma">step_normalizing<\/span><\/a> :<br\/>$/;"	a
step_preserves_R	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step_preserves_R"><span class="id" type="lemma">step_preserves_R<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>, (<a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> ==&gt; <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a>) → <a class="idref" href="Norm.html#R"><span class="id" type="definition">R<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> → <a class="idref" href="Norm.html#R"><span class="id" type="definition">R<\/span><\/a> <a class="idref" href="Norm.html#T"><span class="id" type="variable">T<\/span><\/a> <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a>.<br\/>$/;"	a
step_preserves_R'	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step_preserves_R'"><span class="id" type="lemma">step_preserves_R'<\/span><\/a> : ∀ <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>,<br\/>$/;"	a
step_preserves_halting	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step_preserves_halting"><span class="id" type="lemma">step_preserves_halting<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">t'<\/span>, (<a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> ==&gt; <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a>) → (<a class="idref" href="Norm.html#halts"><span class="id" type="definition">halts<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> ↔ <a class="idref" href="Norm.html#halts"><span class="id" type="definition">halts<\/span><\/a> <a class="idref" href="Norm.html#t'"><span class="id" type="variable">t'<\/span><\/a>).<br\/>$/;"	a
step_preserves_record_tm	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="step_preserves_record_tm"><span class="id" type="lemma">step_preserves_record_tm<\/span><\/a> : ∀ <span class="id" type="var">tr<\/span> <span class="id" type="var">tr'<\/span>,<br\/>$/;"	a
string	lf/imp1.ml	/^type string =$/;"	t
string	lf/imp1.mli	/^type string =$/;"	t
string	lf/imp2.ml	/^type string =$/;"	t
string	lf/imp2.mli	/^type string =$/;"	t
string_dec	lf/imp.mli	/^val string_dec : char list -> char list -> bool$/;"	v
string_dec	lf/imp1.ml	/^let rec string_dec s s0 =$/;"	v
string_dec	lf/imp1.mli	/^val string_dec : string -> string -> sumbool$/;"	v
string_dec	lf/imp2.ml	/^let rec string_dec s s0 =$/;"	v
string_dec	lf/imp2.mli	/^val string_dec : string -> string -> sumbool$/;"	v
string_of_list	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="string_of_list"><span class="id" type="definition">string_of_list<\/span><\/a> (<span class="id" type="var">xs<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a> :=<br\/>$/;"	a
string_of_list	lf/imp.mli	/^val string_of_list : char list -> char list$/;"	v
strong_progress	plf/Smallstep.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="strong_progress"><span class="id" type="lemma">strong_progress<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
stuck	plf/Types.html	/^<span class="id" type="keyword">Definition<\/span> <a name="stuck"><span class="id" type="definition">stuck<\/span><\/a> (<span class="id" type="var">t<\/span>:<a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
sub	lf/imp.ml	/^let rec sub n0 m =$/;"	v
sub	lf/imp.mli	/^val sub : int -> int -> int$/;"	v
sub	lf/imp1.mli	/^val sub : nat -> nat -> nat$/;"	v
sub	lf/imp2.ml	/^let rec sub n m =$/;"	v
sub	lf/imp2.mli	/^val sub : int -> int -> int$/;"	v
sub_inversion_Bool	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sub_inversion_Bool"><span class="id" type="lemma">sub_inversion_Bool<\/span><\/a> : ∀ <span class="id" type="var">U<\/span>,<br\/>$/;"	a
sub_inversion_arrow	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sub_inversion_arrow"><span class="id" type="lemma">sub_inversion_arrow<\/span><\/a> : ∀ <span class="id" type="var">U<\/span> <span class="id" type="var">V<sub>1<\/sub><\/span> <span class="id" type="var">V<sub>2<\/sub><\/span>,<br\/>$/;"	a
sub_inversion_arrow	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sub_inversion_arrow"><span class="id" type="lemma">sub_inversion_arrow<\/span><\/a> : ∀ <span class="id" type="var">U<\/span> <span class="id" type="var">V<sub>1<\/sub><\/span> <span class="id" type="var">V<sub>2<\/sub><\/span>,<br\/>$/;"	a
subst	plf/Norm.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
subst	plf/RecordSub.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) (<span class="id" type="var">t<\/span>:<a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
subst	plf/Sub.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="subst"><span class="id" type="definition">subst<\/span><\/a> (<span class="id" type="var">x<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">s<\/span>:<a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>)  (<span class="id" type="var">t<\/span>:<a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
subst_aexp	plf/Equiv.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="subst_aexp"><span class="id" type="definition">subst_aexp<\/span><\/a> (<span class="id" type="var">i<\/span> : <span class="id" type="inductive">id<\/span>) (<span class="id" type="var">u<\/span> : <span class="id" type="inductive">aexp<\/span>) (<span class="id" type="var">a<\/span> : <span class="id" type="inductive">aexp<\/span>) : <span class="id" type="inductive">aexp<\/span> :=<br\/>$/;"	a
subst_aexp_ex	plf/Equiv.html	/^<span class="id" type="keyword">Example<\/span> <a name="subst_aexp_ex"><span class="id" type="definition">subst_aexp_ex<\/span><\/a> :<br\/>$/;"	a
subst_closed	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="subst_closed"><span class="id" type="lemma">subst_closed<\/span><\/a>: ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
subst_equiv_property	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="subst_equiv_property"><span class="id" type="definition">subst_equiv_property<\/span><\/a> := ∀ <span class="id" type="var">i<sub>1<\/sub><\/span> <span class="id" type="var">i<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
subst_inequiv	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="subst_inequiv"><span class="id" type="lemma">subst_inequiv<\/span><\/a> :<br\/>$/;"	a
subst_msubst	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="subst_msubst"><span class="id" type="lemma">subst_msubst<\/span><\/a>: ∀ <span class="id" type="var">env<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span>, <a class="idref" href="Norm.html#closed"><span class="id" type="definition">closed<\/span><\/a> <a class="idref" href="Norm.html#v"><span class="id" type="variable">v<\/span><\/a> → <a class="idref" href="Norm.html#closed_env"><span class="id" type="definition">closed_env<\/span><\/a> <a class="idref" href="Norm.html#env"><span class="id" type="variable">env<\/span><\/a> →<br\/>$/;"	a
subst_not_afi	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="subst_not_afi"><span class="id" type="lemma">subst_not_afi<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
substitution_preserves_typing	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
substitution_preserves_typing	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
substitution_preserves_typing	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="substitution_preserves_typing"><span class="id" type="lemma">substitution_preserves_typing<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">U<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">t<\/span> <span class="id" type="var">S<\/span>,<br\/>$/;"	a
subtract_3_from_5_slowly	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="subtract_3_from_5_slowly"><span class="id" type="definition">subtract_3_from_5_slowly<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
subtract_slowly	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="subtract_slowly"><span class="id" type="definition">subtract_slowly<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
subtract_slowly_body	lf/Imp.html	/^<span class="id" type="keyword">Definition<\/span> <a name="subtract_slowly_body"><span class="id" type="definition">subtract_slowly_body<\/span><\/a> : <a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a> :=<br\/>$/;"	a
subtract_slowly_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Example<\/span> <a name="subtract_slowly_dec"><span class="id" type="definition">subtract_slowly_dec<\/span><\/a> (<span class="id" type="var">m<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) (<span class="id" type="var">p<\/span>:<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> := (<br\/>$/;"	a
subtract_slowly_dec_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="subtract_slowly_dec_correct"><span class="id" type="lemma">subtract_slowly_dec_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">p<\/span>,<br\/>$/;"	a
subtype	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="subtype"><span class="id" type="inductive">subtype<\/span><\/a> : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
subtype	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="subtype"><span class="id" type="inductive">subtype<\/span><\/a> : <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
subtype	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="subtype"><span class="id" type="axiom">subtype<\/span><\/a> : <a class="idref" href="UseAuto.html#typ"><span class="id" type="axiom">typ<\/span><\/a> → <a class="idref" href="UseAuto.html#typ"><span class="id" type="axiom">typ<\/span><\/a> → <span class="id" type="keyword">Prop<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
subtype__wf	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="subtype__wf"><span class="id" type="lemma">subtype__wf<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
subtype_refl	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="subtype_refl"><span class="id" type="axiom">subtype_refl<\/span><\/a> : ∀ <span class="id" type="var">T<\/span>,<br\/>$/;"	a
subtype_trans	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="subtype_trans"><span class="id" type="axiom">subtype_trans<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">U<\/span>,<br\/>$/;"	a
succ_hastype_nat__hastype_nat	plf/Types.html	/^<span class="id" type="keyword">Example<\/span> <a name="succ_hastype_nat__hastype_nat"><span class="id" type="definition">succ_hastype_nat__hastype_nat<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
succ_inj	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="succ_inj"><span class="id" type="lemma">succ_inj<\/span><\/a> : <a class="idref" href="Logic.html#injective"><span class="id" type="definition">injective<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#S"><span class="id" type="constructor">S<\/span><\/a>.<br\/>$/;"	a
sumbool	lf/imp1.ml	/^type sumbool =$/;"	t
sumbool	lf/imp1.mli	/^type sumbool =$/;"	t
sumbool	lf/imp2.ml	/^type sumbool =$/;"	t
sumbool	lf/imp2.mli	/^type sumbool =$/;"	t
sunday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="sunday"><span class="id" type="constructor">sunday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a>.<br\/>$/;"	a
support.shrinkWrapBlocks	lf/common/jquery-ui/external/jquery/jquery.js	/^	var shrinkWrapBlocksVal;$/;"	f
support.shrinkWrapBlocks	plf/common/jquery-ui/external/jquery/jquery.js	/^	var shrinkWrapBlocksVal;$/;"	f
swap	lf/common/jquery-ui/external/jquery/jquery.js	/^var swap = function( elem, options, callback, args ) {$/;"	f
swap	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="swap"><span class="id" type="definition">swap<\/span><\/a> : <span class="id" type="inductive">com<\/span> :=<br\/>$/;"	a
swap	plf/common/jquery-ui/external/jquery/jquery.js	/^var swap = function( elem, options, callback, args ) {$/;"	f
swap_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="swap_correct"><span class="id" type="lemma">swap_correct<\/span><\/a> : ∀ <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span>,<br\/>$/;"	a
swap_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="swap_dec"><span class="id" type="definition">swap_dec<\/span><\/a> <span class="id" type="var">m<\/span> <span class="id" type="var">n<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> :=<br\/>$/;"	a
swap_exercise	plf/Hoare.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="swap_exercise"><span class="id" type="lemma">swap_exercise<\/span><\/a> :<br\/>$/;"	a
swap_if_branches	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="swap_if_branches"><span class="id" type="lemma">swap_if_branches<\/span><\/a>: ∀ <span class="id" type="var">b<\/span> <span class="id" type="var">e<sub>1<\/sub><\/span> <span class="id" type="var">e<sub>2<\/sub><\/span>,<br\/>$/;"	a
swap_noninterfering_assignments	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="swap_noninterfering_assignments"><span class="id" type="lemma">swap_noninterfering_assignments<\/span><\/a>: ∀ <span class="id" type="var">l<sub>1<\/sub><\/span> <span class="id" type="var">l<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span>,<br\/>$/;"	a
swap_program	plf/Hoare.html	/^<span class="id" type="keyword">Definition<\/span> <a name="swap_program"><span class="id" type="definition">swap_program<\/span><\/a> : <span class="id" type="inductive">com<\/span> <br\/>$/;"	a
swap_subst	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="swap_subst"><span class="id" type="lemma">swap_subst<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">v<sub>1<\/sub><\/span>,<br\/>$/;"	a
swing	lf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:jQuery.easing
swing	plf/common/jquery-ui/external/jquery/jquery.js	/^	},$/;"	m	class:jQuery.easing
sym_aequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sym_aequiv"><span class="id" type="lemma">sym_aequiv<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>),<br\/>$/;"	a
sym_bequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sym_bequiv"><span class="id" type="lemma">sym_bequiv<\/span><\/a> : ∀ (<span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>),<br\/>$/;"	a
sym_cequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="sym_cequiv"><span class="id" type="lemma">sym_cequiv<\/span><\/a> : ∀ (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> : <span class="id" type="inductive">com<\/span>),<br\/>$/;"	a
symmetric	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="symmetric"><span class="id" type="definition">symmetric<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
t_apply_empty	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="t_apply_empty"><span class="id" type="lemma">t_apply_empty<\/span><\/a>:  ∀ <span class="id" type="var">A<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">v<\/span>, @<a class="idref" href="Maps.html#t_empty"><span class="id" type="definition">t_empty<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a> <a class="idref" href="Maps.html#v"><span class="id" type="variable">v<\/span><\/a> <a class="idref" href="Maps.html#x"><span class="id" type="variable">x<\/span><\/a> = <a class="idref" href="Maps.html#v"><span class="id" type="variable">v<\/span><\/a>.<br\/>$/;"	a
t_empty	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="t_empty"><span class="id" type="definition">t_empty<\/span><\/a> {<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">v<\/span> : <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>) : <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a> :=<br\/>$/;"	a
t_empty	lf/imp.ml	/^let t_empty v _ =$/;"	v
t_empty	lf/imp.mli	/^val t_empty : 'a1 -> 'a1 total_map$/;"	v
t_update	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="t_update"><span class="id" type="definition">t_update<\/span><\/a> {<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">m<\/span> : <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>)<br\/>$/;"	a
t_update	lf/imp.ml	/^let t_update m x v x' =$/;"	v
t_update	lf/imp.mli	/^val t_update : 'a1 total_map -> id -> 'a1 -> id -> 'a1$/;"	v
t_update	lf/imp1.ml	/^let t_update m x v x' =$/;"	v
t_update	lf/imp1.mli	/^val t_update : 'a1 total_map -> id -> 'a1 -> id -> 'a1$/;"	v
t_update	lf/imp2.ml	/^let t_update m x v x' =$/;"	v
t_update	lf/imp2.mli	/^val t_update : 'a1 total_map -> id -> 'a1 -> id -> 'a1$/;"	v
t_update_eq	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="t_update_eq"><span class="id" type="lemma">t_update_eq<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">m<\/span>: <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>) <span class="id" type="var">x<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
t_update_neq	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="t_update_neq"><span class="id" type="lemma">t_update_neq<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) <span class="id" type="var">v<\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span><br\/>$/;"	a
t_update_permute	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="t_update_permute"><span class="id" type="lemma">t_update_permute<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span><br\/>$/;"	a
t_update_same	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="t_update_same"><span class="id" type="lemma">t_update_same<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> <span class="id" type="var">x<\/span> (<span class="id" type="var">m<\/span> : <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="Maps.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
t_update_shadow	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="t_update_shadow"><span class="id" type="lemma">t_update_shadow<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">m<\/span>: <a class="idref" href="Maps.html#total_map"><span class="id" type="definition">total_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>) <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">x<\/span>,<br\/>$/;"	a
tabs	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tabs	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tabs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tabs"><span class="id" type="constructor">tabs<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tapp	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tapp	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tapp	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tapp"><span class="id" type="constructor">tapp<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tass	plf/Norm.html	/^<span class="id" type="keyword">Definition<\/span> <a name="tass"><span class="id" type="definition">tass<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> (<span class="id" type="inductive">id<\/span> * <a class="idref" href="Norm.html#ty"><span class="id" type="inductive">ty<\/span><\/a>).<br\/><hr class='doublespaceincode'\/>$/;"	a
teardown	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.change
teardown	lf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.submit
teardown	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.change
teardown	plf/common/jquery-ui/external/jquery/jquery.js	/^		},$/;"	m	class:jQuery.event.special.submit
test	lf/impdriver.ml	/^let test s =$/;"	v
testParsing	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="testParsing"><span class="id" type="definition">testParsing<\/span><\/a> {<span class="id" type="var">X<\/span> : <span class="id" type="keyword">Type<\/span>}<br\/>$/;"	a
test_andb31	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_andb31"><span class="id" type="definition">test_andb31<\/span><\/a>:                 (<a class="idref" href="Basics.html#andb3"><span class="id" type="axiom">andb3<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_andb32	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_andb32"><span class="id" type="definition">test_andb32<\/span><\/a>:                 (<a class="idref" href="Basics.html#andb3"><span class="id" type="axiom">andb3<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_andb33	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_andb33"><span class="id" type="definition">test_andb33<\/span><\/a>:                 (<a class="idref" href="Basics.html#andb3"><span class="id" type="axiom">andb3<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_andb34	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_andb34"><span class="id" type="definition">test_andb34<\/span><\/a>:                 (<a class="idref" href="Basics.html#andb3"><span class="id" type="axiom">andb3<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_anon_fun'	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_anon_fun'"><span class="id" type="definition">test_anon_fun'<\/span><\/a>:<br\/>$/;"	a
test_blt_nat1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_blt_nat1"><span class="id" type="definition">test_blt_nat1<\/span><\/a>:             (<a class="idref" href="Basics.html#blt_nat"><span class="id" type="axiom">blt_nat<\/span><\/a> 2 2) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_blt_nat2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_blt_nat2"><span class="id" type="definition">test_blt_nat2<\/span><\/a>:             (<a class="idref" href="Basics.html#blt_nat"><span class="id" type="axiom">blt_nat<\/span><\/a> 2 4) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_blt_nat3	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_blt_nat3"><span class="id" type="definition">test_blt_nat3<\/span><\/a>:             (<a class="idref" href="Basics.html#blt_nat"><span class="id" type="axiom">blt_nat<\/span><\/a> 4 2) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_ceval	lf/ImpCEvalFun.html	/^<span class="id" type="keyword">Definition<\/span> <a name="test_ceval"><span class="id" type="definition">test_ceval<\/span><\/a> (<span class="id" type="var">st<\/span>:<a class="idref" href="Imp.html#state"><span class="id" type="definition">state<\/span><\/a>) (<span class="id" type="var">c<\/span>:<a class="idref" href="Imp.html#com"><span class="id" type="inductive">com<\/span><\/a>) :=<br\/>$/;"	a
test_countoddmembers'1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_countoddmembers'1"><span class="id" type="definition">test_countoddmembers'1<\/span><\/a>:   <a class="idref" href="Poly.html#countoddmembers'"><span class="id" type="definition">countoddmembers'<\/span><\/a> [1;0;3;1;4;5] = 4.<br\/>$/;"	a
test_countoddmembers'2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_countoddmembers'2"><span class="id" type="definition">test_countoddmembers'2<\/span><\/a>:   <a class="idref" href="Poly.html#countoddmembers'"><span class="id" type="definition">countoddmembers'<\/span><\/a> [0;2;4] = 0.<br\/>$/;"	a
test_countoddmembers'3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_countoddmembers'3"><span class="id" type="definition">test_countoddmembers'3<\/span><\/a>:   <a class="idref" href="Poly.html#countoddmembers'"><span class="id" type="definition">countoddmembers'<\/span><\/a> <a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a> = 0.<br\/>$/;"	a
test_doit3times	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_doit3times"><span class="id" type="definition">test_doit3times<\/span><\/a>: <a class="idref" href="Poly.html#doit3times"><span class="id" type="definition">doit3times<\/span><\/a> <a class="idref" href="Basics.html#minustwo"><span class="id" type="definition">minustwo<\/span><\/a> 9 = 3.<br\/>$/;"	a
test_doit3times'	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_doit3times'"><span class="id" type="definition">test_doit3times'<\/span><\/a>: <a class="idref" href="Poly.html#doit3times"><span class="id" type="definition">doit3times<\/span><\/a> <a class="idref" href="Basics.html#negb"><span class="id" type="definition">negb<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_factorial1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_factorial1"><span class="id" type="definition">test_factorial1<\/span><\/a>:          (<a class="idref" href="Basics.html#factorial"><span class="id" type="axiom">factorial<\/span><\/a> 3) = 6.<br\/>$/;"	a
test_factorial2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_factorial2"><span class="id" type="definition">test_factorial2<\/span><\/a>:          (<a class="idref" href="Basics.html#factorial"><span class="id" type="axiom">factorial<\/span><\/a> 5) = (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#mult"><span class="id" type="abbreviation">mult<\/span><\/a> 10 12).<br\/>$/;"	a
test_filter1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_filter1"><span class="id" type="definition">test_filter1<\/span><\/a>: <a class="idref" href="Poly.html#filter"><span class="id" type="definition">filter<\/span><\/a> <a class="idref" href="Basics.html#evenb"><span class="id" type="definition">evenb<\/span><\/a> [1;2;3;4] = [2;4].<br\/>$/;"	a
test_filter2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_filter2"><span class="id" type="definition">test_filter2<\/span><\/a>:<br\/>$/;"	a
test_filter2'	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_filter2'"><span class="id" type="definition">test_filter2'<\/span><\/a>:<br\/>$/;"	a
test_filter_even_gt7_1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_filter_even_gt7_1"><span class="id" type="definition">test_filter_even_gt7_1<\/span><\/a> :<br\/>$/;"	a
test_filter_even_gt7_2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_filter_even_gt7_2"><span class="id" type="definition">test_filter_even_gt7_2<\/span><\/a> :<br\/>$/;"	a
test_flat_map1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_flat_map1"><span class="id" type="definition">test_flat_map1<\/span><\/a>:<br\/>$/;"	a
test_hd_error1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_hd_error1"><span class="id" type="definition">test_hd_error1<\/span><\/a> : <a class="idref" href="Poly.html#hd_error"><span class="id" type="axiom">hd_error<\/span><\/a> [1;2] = <a class="idref" href="Poly.html#Some"><span class="id" type="constructor">Some<\/span><\/a> 1.<br\/>$/;"	a
test_hd_error2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_hd_error2"><span class="id" type="definition">test_hd_error2<\/span><\/a> : <a class="idref" href="Poly.html#hd_error"><span class="id" type="axiom">hd_error<\/span><\/a>  [[1];[2]]  = <a class="idref" href="Poly.html#Some"><span class="id" type="constructor">Some<\/span><\/a> [1].<br\/>$/;"	a
test_leb1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_leb1"><span class="id" type="definition">test_leb1<\/span><\/a>:             (<a class="idref" href="Basics.html#leb"><span class="id" type="definition">leb<\/span><\/a> 2 2) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_leb2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_leb2"><span class="id" type="definition">test_leb2<\/span><\/a>:             (<a class="idref" href="Basics.html#leb"><span class="id" type="definition">leb<\/span><\/a> 2 4) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_leb3	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_leb3"><span class="id" type="definition">test_leb3<\/span><\/a>:             (<a class="idref" href="Basics.html#leb"><span class="id" type="definition">leb<\/span><\/a> 4 2) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_length1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_length1"><span class="id" type="definition">test_length1<\/span><\/a>: <a class="idref" href="Poly.html#length"><span class="id" type="definition">length<\/span><\/a> (<a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 1 (<a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 2 (<a class="idref" href="Poly.html#cons"><span class="id" type="constructor">cons<\/span><\/a> 3 <a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a>))) = 3.<br\/>$/;"	a
test_map1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_map1"><span class="id" type="definition">test_map1<\/span><\/a>: <a class="idref" href="Poly.html#map"><span class="id" type="definition">map<\/span><\/a> (<span class="id" type="keyword">fun<\/span> <span class="id" type="var">x<\/span> ⇒ <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> 3 <a class="idref" href="Poly.html#x"><span class="id" type="variable">x<\/span><\/a>) [2;0;2] = [5;3;5].<br\/>$/;"	a
test_map2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_map2"><span class="id" type="definition">test_map2<\/span><\/a>:<br\/>$/;"	a
test_map3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_map3"><span class="id" type="definition">test_map3<\/span><\/a>:<br\/>$/;"	a
test_multistep_1	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="test_multistep_1"><span class="id" type="lemma">test_multistep_1<\/span><\/a>:<br\/>$/;"	a
test_multistep_1'	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="test_multistep_1'"><span class="id" type="lemma">test_multistep_1'<\/span><\/a>:<br\/>$/;"	a
test_multistep_2	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="test_multistep_2"><span class="id" type="lemma">test_multistep_2<\/span><\/a>:<br\/>$/;"	a
test_multistep_3	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="test_multistep_3"><span class="id" type="lemma">test_multistep_3<\/span><\/a>:<br\/>$/;"	a
test_multistep_4	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="test_multistep_4"><span class="id" type="lemma">test_multistep_4<\/span><\/a>:<br\/>$/;"	a
test_nandb1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nandb1"><span class="id" type="definition">test_nandb1<\/span><\/a>:               (<a class="idref" href="Basics.html#nandb"><span class="id" type="axiom">nandb<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_nandb2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nandb2"><span class="id" type="definition">test_nandb2<\/span><\/a>:               (<a class="idref" href="Basics.html#nandb"><span class="id" type="axiom">nandb<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_nandb3	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nandb3"><span class="id" type="definition">test_nandb3<\/span><\/a>:               (<a class="idref" href="Basics.html#nandb"><span class="id" type="axiom">nandb<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_nandb4	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nandb4"><span class="id" type="definition">test_nandb4<\/span><\/a>:               (<a class="idref" href="Basics.html#nandb"><span class="id" type="axiom">nandb<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_next_weekday	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_next_weekday"><span class="id" type="definition">test_next_weekday<\/span><\/a>:<br\/>$/;"	a
test_nostutter_1	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nostutter_1"><span class="id" type="definition">test_nostutter_1<\/span><\/a>: <a class="idref" href="IndProp.html#nostutter"><span class="id" type="inductive">nostutter<\/span><\/a> [3;1;4;1;5;6].<br\/>$/;"	a
test_nostutter_2	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nostutter_2"><span class="id" type="definition">test_nostutter_2<\/span><\/a>:  <a class="idref" href="IndProp.html#nostutter"><span class="id" type="inductive">nostutter<\/span><\/a> (@<a class="idref" href="Poly.html#nil"><span class="id" type="constructor">nil<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>).<br\/>$/;"	a
test_nostutter_3	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nostutter_3"><span class="id" type="definition">test_nostutter_3<\/span><\/a>:  <a class="idref" href="IndProp.html#nostutter"><span class="id" type="inductive">nostutter<\/span><\/a> [5].<br\/>$/;"	a
test_nostutter_4	lf/IndProp.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nostutter_4"><span class="id" type="definition">test_nostutter_4<\/span><\/a>:      <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Logic.html#not"><span class="id" type="definition">not<\/span><\/a> (<a class="idref" href="IndProp.html#nostutter"><span class="id" type="inductive">nostutter<\/span><\/a> [3;1;1;4]).<br\/>$/;"	a
test_nth_error1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nth_error1"><span class="id" type="definition">test_nth_error1<\/span><\/a> : <a class="idref" href="Poly.html#nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [4;5;6;7] 0 = <a class="idref" href="Poly.html#Some"><span class="id" type="constructor">Some<\/span><\/a> 4.<br\/>$/;"	a
test_nth_error2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nth_error2"><span class="id" type="definition">test_nth_error2<\/span><\/a> : <a class="idref" href="Poly.html#nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [[1];[2]] 1 = <a class="idref" href="Poly.html#Some"><span class="id" type="constructor">Some<\/span><\/a> [2].<br\/>$/;"	a
test_nth_error3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_nth_error3"><span class="id" type="definition">test_nth_error3<\/span><\/a> : <a class="idref" href="Poly.html#nth_error"><span class="id" type="definition">nth_error<\/span><\/a> [<a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>] 2 = <a class="idref" href="Poly.html#None"><span class="id" type="constructor">None<\/span><\/a>.<br\/>$/;"	a
test_oddb1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_oddb1"><span class="id" type="definition">test_oddb1<\/span><\/a>:    <a class="idref" href="Basics.html#oddb"><span class="id" type="definition">oddb<\/span><\/a> 1 = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_oddb2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_oddb2"><span class="id" type="definition">test_oddb2<\/span><\/a>:    <a class="idref" href="Basics.html#oddb"><span class="id" type="definition">oddb<\/span><\/a> 4 = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_orb1	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_orb1"><span class="id" type="definition">test_orb1<\/span><\/a>:  (<a class="idref" href="Basics.html#orb"><span class="id" type="definition">orb<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>  <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_orb2	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_orb2"><span class="id" type="definition">test_orb2<\/span><\/a>:  (<a class="idref" href="Basics.html#orb"><span class="id" type="definition">orb<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) = <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
test_orb3	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_orb3"><span class="id" type="definition">test_orb3<\/span><\/a>:  (<a class="idref" href="Basics.html#orb"><span class="id" type="definition">orb<\/span><\/a> <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>)  = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_orb4	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_orb4"><span class="id" type="definition">test_orb4<\/span><\/a>:  (<a class="idref" href="Basics.html#orb"><span class="id" type="definition">orb<\/span><\/a> <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>  <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>)  = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_orb5	lf/Basics.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_orb5"><span class="id" type="definition">test_orb5<\/span><\/a>:  <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> || <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a> || <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a> = <a class="idref" href="Basics.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
test_partition1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_partition1"><span class="id" type="definition">test_partition1<\/span><\/a>: <a class="idref" href="Poly.html#partition"><span class="id" type="axiom">partition<\/span><\/a> <a class="idref" href="Basics.html#oddb"><span class="id" type="definition">oddb<\/span><\/a> [1;2;3;4;5] = ([1;3;5], [2;4]).<br\/>$/;"	a
test_partition2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_partition2"><span class="id" type="definition">test_partition2<\/span><\/a>: <a class="idref" href="Poly.html#partition"><span class="id" type="axiom">partition<\/span><\/a> (<span class="id" type="keyword">fun<\/span> <span class="id" type="var">x<\/span> ⇒ <a class="idref" href="Basics.html#false"><span class="id" type="constructor">false<\/span><\/a>) [5;9;0] = ([], [5;9;0]).<br\/>$/;"	a
test_pe_aexp1	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_pe_aexp1"><span class="id" type="definition">test_pe_aexp1<\/span><\/a>:<br\/>$/;"	a
test_pe_bexp1	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_pe_bexp1"><span class="id" type="definition">test_pe_bexp1<\/span><\/a>:<br\/>$/;"	a
test_pe_bexp2	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_pe_bexp2"><span class="id" type="definition">test_pe_bexp2<\/span><\/a>: ∀ <span class="id" type="var">b<\/span>,<br\/>$/;"	a
test_pe_update	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_pe_update"><span class="id" type="definition">test_pe_update<\/span><\/a>:<br\/>$/;"	a
test_plus3	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_plus3"><span class="id" type="definition">test_plus3<\/span><\/a> :    <a class="idref" href="Poly.html#plus3"><span class="id" type="definition">plus3<\/span><\/a> 4 = 7.<br\/>$/;"	a
test_plus3'	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_plus3'"><span class="id" type="definition">test_plus3'<\/span><\/a> :   <a class="idref" href="Poly.html#doit3times"><span class="id" type="definition">doit3times<\/span><\/a> <a class="idref" href="Poly.html#plus3"><span class="id" type="definition">plus3<\/span><\/a> 0 = 9.<br\/>$/;"	a
test_plus3''	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_plus3''"><span class="id" type="definition">test_plus3''<\/span><\/a> :  <a class="idref" href="Poly.html#doit3times"><span class="id" type="definition">doit3times<\/span><\/a> (<a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Peano.html#plus"><span class="id" type="abbreviation">plus<\/span><\/a> 3) 0 = 9.<br\/>$/;"	a
test_repeat1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_repeat1"><span class="id" type="definition">test_repeat1<\/span><\/a> :<br\/>$/;"	a
test_repeat2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_repeat2"><span class="id" type="definition">test_repeat2<\/span><\/a> :<br\/>$/;"	a
test_rev1	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_rev1"><span class="id" type="definition">test_rev1<\/span><\/a> :<br\/>$/;"	a
test_rev2	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_rev2"><span class="id" type="definition">test_rev2<\/span><\/a>:<br\/>$/;"	a
test_split	lf/Poly.html	/^<span class="id" type="keyword">Example<\/span> <a name="test_split"><span class="id" type="definition">test_split<\/span><\/a>:<br\/>$/;"	a
text_pe_aexp2	plf/PE.html	/^<span class="id" type="keyword">Example<\/span> <a name="text_pe_aexp2"><span class="id" type="definition">text_pe_aexp2<\/span><\/a>:<br\/>$/;"	a
tfalse	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tfalse	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tfalse	plf/Types.html	/^&nbsp;&nbsp;| <a name="tfalse"><span class="id" type="constructor">tfalse<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tfst	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tfst"><span class="id" type="constructor">tfst<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
that	lf/IndPrinciples.v	/^    function that, when applied to a type [X], gives us back an$/;"	f
that	lf/Maps.v	/^    function that can be used to look up [id]s, yielding [A]s. *)$/;"	f
that	plf/Maps.v	/^    function that can be used to look up [id]s, yielding [A]s. *)$/;"	f
that	plf/Sub.v	/^    function that requires just a single-field record. *)$/;"	f
they	plf/Hoare.v	/^    time they see it.  If it still seems puzzling, it may help$/;"	r
thursday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="thursday"><span class="id" type="constructor">thursday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
tif	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
tif	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tif	plf/Types.html	/^&nbsp;&nbsp;| <a name="tif"><span class="id" type="constructor">tif<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tiszero	plf/Types.html	/^&nbsp;&nbsp;| <a name="tiszero"><span class="id" type="constructor">tiszero<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
tlookup	plf/RecordSub.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="tlookup"><span class="id" type="definition">tlookup<\/span><\/a> (<span class="id" type="var">i<\/span>:<span class="id" type="inductive">id<\/span>) (<span class="id" type="var">tr<\/span>:<a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#option"><span class="id" type="inductive">option<\/span><\/a> <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> :=<br\/>$/;"	a
tm	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
tm	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
tm	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
tm	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
tm	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tm"><span class="id" type="inductive">tm<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
to	plf/Hoare.v	/^    module to prevent polluting the global name space.) *)$/;"	m
to	plf/Stlc.v	/^    function [extend] to add a binding to a partial map. *)$/;"	f
toggleDisplay	lf/common/toggleproofs.js	/^function toggleDisplay(id)$/;"	f
toggleDisplay	plf/common/toggleproofs.js	/^function toggleDisplay(id)$/;"	f
token	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="token"><span class="id" type="definition">token<\/span><\/a> := <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
token	lf/imp.mli	/^type token = char list$/;"	t
tokenize	lf/ImpParser.html	/^<span class="id" type="keyword">Definition<\/span> <a name="tokenize"><span class="id" type="definition">tokenize<\/span><\/a> (<span class="id" type="var">s<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a>) : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.String.html#string"><span class="id" type="inductive">string<\/span><\/a> :=<br\/>$/;"	a
tokenize	lf/imp.ml	/^let tokenize s =$/;"	v
tokenize	lf/imp.mli	/^val tokenize : char list -> char list list$/;"	v
tokenize_ex<sub	lf/ImpParser.html	/^<span class="id" type="keyword">Example<\/span> <a name="tokenize_ex<sub>1<\/sub>"><span class="id" type="definition">tokenize_ex<sub>1<\/sub><\/span><\/a> :<br\/>$/;"	a
tokenize_helper	lf/ImpParser.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="tokenize_helper"><span class="id" type="definition">tokenize_helper<\/span><\/a> (<span class="id" type="var">cls<\/span> : <a class="idref" href="ImpParser.html#chartype"><span class="id" type="inductive">chartype<\/span><\/a>) (<span class="id" type="var">acc<\/span> <span class="id" type="var">xs<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Strings.Ascii.html#ascii"><span class="id" type="inductive">ascii<\/span><\/a>)<br\/>$/;"	a
tokenize_helper	lf/imp.mli	/^val tokenize_helper : chartype -> char list -> char list -> char list list$/;"	v
total_map	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="total_map"><span class="id" type="definition">total_map<\/span><\/a> (<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>) := <a class="idref" href="Maps.html#id"><span class="id" type="inductive">id<\/span><\/a> → <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>.<br\/>$/;"	a
total_map	lf/imp.ml	/^type 'a total_map = id -> 'a$/;"	t
total_map	lf/imp.mli	/^type 'a total_map = id -> 'a$/;"	t
total_map	lf/imp1.ml	/^type 'a total_map = id -> 'a$/;"	t
total_map	lf/imp1.mli	/^type 'a total_map = id -> 'a$/;"	t
total_map	lf/imp2.ml	/^type 'a total_map = id -> 'a$/;"	t
total_map	lf/imp2.mli	/^type 'a total_map = id -> 'a$/;"	t
tp	lf/imp.ml	/^           let tp = Alpha in$/;"	v
tp	lf/imp.ml	/^           let tp = Digit in$/;"	v
tp	lf/imp.ml	/^           let tp = Other in$/;"	v
tpair	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tpair"><span class="id" type="constructor">tpair<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tpred	plf/Types.html	/^&nbsp;&nbsp;| <a name="tpred"><span class="id" type="constructor">tpred<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tproj	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="tproj"><span class="id" type="constructor">tproj<\/span><\/a> : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tr_rev	lf/Logic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="tr_rev"><span class="id" type="definition">tr_rev<\/span><\/a> {<span class="id" type="var">X<\/span>} (<span class="id" type="var">l<\/span> : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a>) : <a class="idref" href="Poly.html#list"><span class="id" type="inductive">list<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> :=<br\/>$/;"	a
tr_rev_correct	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="tr_rev_correct"><span class="id" type="lemma">tr_rev_correct<\/span><\/a> : ∀ <span class="id" type="var">X<\/span>, @<a class="idref" href="Logic.html#tr_rev"><span class="id" type="definition">tr_rev<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a> = @<a class="idref" href="Poly.html#rev"><span class="id" type="definition">rev<\/span><\/a> <a class="idref" href="Logic.html#X"><span class="id" type="variable">X<\/span><\/a>.<br\/>$/;"	a
trans_aequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="trans_aequiv"><span class="id" type="lemma">trans_aequiv<\/span><\/a> : ∀ (<span class="id" type="var">a<sub>1<\/sub><\/span> <span class="id" type="var">a<sub>2<\/sub><\/span> <span class="id" type="var">a<sub>3<\/sub><\/span> : <span class="id" type="inductive">aexp<\/span>),<br\/>$/;"	a
trans_bequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="trans_bequiv"><span class="id" type="lemma">trans_bequiv<\/span><\/a> : ∀ (<span class="id" type="var">b<sub>1<\/sub><\/span> <span class="id" type="var">b<sub>2<\/sub><\/span> <span class="id" type="var">b<sub>3<\/sub><\/span> : <span class="id" type="inductive">bexp<\/span>),<br\/>$/;"	a
trans_cequiv	plf/Equiv.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="trans_cequiv"><span class="id" type="lemma">trans_cequiv<\/span><\/a> : ∀ (<span class="id" type="var">c<sub>1<\/sub><\/span> <span class="id" type="var">c<sub>2<\/sub><\/span> <span class="id" type="var">c<sub>3<\/sub><\/span> : <span class="id" type="inductive">com<\/span>),<br\/>$/;"	a
trans_eq	lf/Tactics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="trans_eq"><span class="id" type="lemma">trans_eq<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> : <a class="idref" href="Tactics.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
trans_eq_example	lf/Tactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="trans_eq_example"><span class="id" type="definition">trans_eq_example<\/span><\/a> : ∀ (<span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">d<\/span> <span class="id" type="var">e<\/span> <span class="id" type="var">f<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
trans_eq_example'	lf/Tactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="trans_eq_example'"><span class="id" type="definition">trans_eq_example'<\/span><\/a> : ∀ (<span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> <span class="id" type="var">d<\/span> <span class="id" type="var">e<\/span> <span class="id" type="var">f<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
trans_eq_exercise	lf/Tactics.html	/^<span class="id" type="keyword">Example<\/span> <a name="trans_eq_exercise"><span class="id" type="definition">trans_eq_exercise<\/span><\/a> : ∀ (<span class="id" type="var">n<\/span> <span class="id" type="var">m<\/span> <span class="id" type="var">o<\/span> <span class="id" type="var">p<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>),<br\/>$/;"	a
transitive	lf/Rel.html	/^<span class="id" type="keyword">Definition<\/span> <a name="transitive"><span class="id" type="definition">transitive<\/span><\/a> {<span class="id" type="var">X<\/span>: <span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">R<\/span>: <a class="idref" href="Rel.html#relation"><span class="id" type="definition">relation<\/span><\/a> <a class="idref" href="Rel.html#X"><span class="id" type="variable">X<\/span><\/a>) :=<br\/>$/;"	a
transitivity_bad_hint_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="transitivity_bad_hint_1"><span class="id" type="lemma">transitivity_bad_hint_1<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
transitivity_workaround_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="transitivity_workaround_1"><span class="id" type="lemma">transitivity_workaround_1<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>3<\/sub><\/span> <span class="id" type="var">T<sub>4<\/sub><\/span>,<br\/>$/;"	a
transitivity_workaround_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="transitivity_workaround_2"><span class="id" type="lemma">transitivity_workaround_2<\/span><\/a> : ∀ <span class="id" type="var">S<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
trcons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="trcons"><span class="id" type="constructor">trcons<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a>.<br\/>$/;"	a
tree	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="tree"><span class="id" type="inductive">tree<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
trnil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="trnil"><span class="id" type="constructor">trnil<\/span><\/a> :  <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
true	lf/Basics.html	/^&nbsp;&nbsp;| <a name="true"><span class="id" type="constructor">true<\/span><\/a> : <a class="idref" href="Basics.html#bool"><span class="id" type="inductive">bool<\/span><\/a><br\/>$/;"	a
tsnd	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tsnd"><span class="id" type="constructor">tsnd<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tsucc	plf/Types.html	/^&nbsp;&nbsp;| <a name="tsucc"><span class="id" type="constructor">tsucc<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ttrue	plf/Norm.html	/^&nbsp;&nbsp;| <a name="ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ttrue	plf/Sub.html	/^&nbsp;&nbsp;| <a name="ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
ttrue	plf/Types.html	/^&nbsp;&nbsp;| <a name="ttrue"><span class="id" type="constructor">ttrue<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tuesday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="tuesday"><span class="id" type="constructor">tuesday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
tunit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tunit"><span class="id" type="constructor">tunit<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> <br\/>$/;"	a
tvar	plf/Norm.html	/^&nbsp;&nbsp;| <a name="tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tvar	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
tvar	plf/Sub.html	/^&nbsp;&nbsp;| <a name="tvar"><span class="id" type="constructor">tvar<\/span><\/a> : <span class="id" type="inductive">id<\/span> → <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
two_loops_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="two_loops_correct"><span class="id" type="lemma">two_loops_correct<\/span><\/a> : ∀ <span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span>,<br\/>$/;"	a
two_loops_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="two_loops_dec"><span class="id" type="definition">two_loops_dec<\/span><\/a> (<span class="id" type="var">a<\/span> <span class="id" type="var">b<\/span> <span class="id" type="var">c<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a> :=<br\/>$/;"	a
ty	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
ty	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
ty	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
ty	plf/Types.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="ty"><span class="id" type="inductive">ty<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
typ	plf/UseAuto.html	/^<span class="id" type="keyword">Parameter<\/span> <a name="typ"><span class="id" type="axiom">typ<\/span><\/a> : <span class="id" type="keyword">Type<\/span>.<br\/><hr class='doublespaceincode'\/>$/;"	a
typable_empty__closed	plf/Norm.html	/^<span class="id" type="keyword">Corollary<\/span> <a name="typable_empty__closed"><span class="id" type="lemma">typable_empty__closed<\/span><\/a> : ∀ <span class="id" type="var">t<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
type	lf/ProofObjects.v	/^    function type, one interesting point becomes apparent: The second$/;"	f
typing_inversion_abs	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_abs"><span class="id" type="lemma">typing_inversion_abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_abs	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_abs"><span class="id" type="lemma">typing_inversion_abs<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">S<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_app	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_app"><span class="id" type="lemma">typing_inversion_app<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
typing_inversion_app	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_app"><span class="id" type="lemma">typing_inversion_app<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
typing_inversion_false	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_false"><span class="id" type="lemma">typing_inversion_false<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_if	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_if"><span class="id" type="lemma">typing_inversion_if<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">t<sub>2<\/sub><\/span> <span class="id" type="var">t<sub>3<\/sub><\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_proj	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_proj"><span class="id" type="lemma">typing_inversion_proj<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">t<sub>1<\/sub><\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
typing_inversion_rcons	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_rcons"><span class="id" type="lemma">typing_inversion_rcons<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">i<\/span> <span class="id" type="var">ti<\/span> <span class="id" type="var">tr<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_true	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_true"><span class="id" type="lemma">typing_inversion_true<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_unit	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_unit"><span class="id" type="lemma">typing_inversion_unit<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_var	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_var"><span class="id" type="lemma">typing_inversion_var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
typing_inversion_var	plf/Sub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="typing_inversion_var"><span class="id" type="lemma">typing_inversion_var<\/span><\/a> : ∀ <span class="id" type="var">Gamma<\/span> <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span>,<br\/>$/;"	a
tzero	plf/Types.html	/^&nbsp;&nbsp;| <a name="tzero"><span class="id" type="constructor">tzero<\/span><\/a> : <a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a><br\/>$/;"	a
update	lf/Maps.html	/^<span class="id" type="keyword">Definition<\/span> <a name="update"><span class="id" type="definition">update<\/span><\/a> {<span class="id" type="var">A<\/span>:<span class="id" type="keyword">Type<\/span>} (<span class="id" type="var">m<\/span> : <a class="idref" href="Maps.html#partial_map"><span class="id" type="definition">partial_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>)<br\/>$/;"	a
update_eq	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="update_eq"><span class="id" type="lemma">update_eq<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">m<\/span>: <a class="idref" href="Maps.html#partial_map"><span class="id" type="definition">partial_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>) <span class="id" type="var">x<\/span> <span class="id" type="var">v<\/span>,<br\/>$/;"	a
update_example1	lf/Maps.html	/^<span class="id" type="keyword">Example<\/span> <a name="update_example1"><span class="id" type="definition">update_example1<\/span><\/a> : <a class="idref" href="Maps.html#examplemap"><span class="id" type="definition">examplemap<\/span><\/a> (<a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "baz") = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
update_example2	lf/Maps.html	/^<span class="id" type="keyword">Example<\/span> <a name="update_example2"><span class="id" type="definition">update_example2<\/span><\/a> : <a class="idref" href="Maps.html#examplemap"><span class="id" type="definition">examplemap<\/span><\/a> (<a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "foo") = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
update_example3	lf/Maps.html	/^<span class="id" type="keyword">Example<\/span> <a name="update_example3"><span class="id" type="definition">update_example3<\/span><\/a> : <a class="idref" href="Maps.html#examplemap"><span class="id" type="definition">examplemap<\/span><\/a> (<a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "quux") = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#false"><span class="id" type="constructor">false<\/span><\/a>.<br\/>$/;"	a
update_example4	lf/Maps.html	/^<span class="id" type="keyword">Example<\/span> <a name="update_example4"><span class="id" type="definition">update_example4<\/span><\/a> : <a class="idref" href="Maps.html#examplemap"><span class="id" type="definition">examplemap<\/span><\/a> (<a class="idref" href="Maps.html#Id"><span class="id" type="constructor">Id<\/span><\/a> "bar") = <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#true"><span class="id" type="constructor">true<\/span><\/a>.<br\/>$/;"	a
update_neq	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="update_neq"><span class="id" type="lemma">update_neq<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) <span class="id" type="var">v<\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span><br\/>$/;"	a
update_permute	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="update_permute"><span class="id" type="lemma">update_permute<\/span><\/a> : ∀ (<span class="id" type="var">X<\/span>:<span class="id" type="keyword">Type<\/span>) <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">x<sub>1<\/sub><\/span> <span class="id" type="var">x<sub>2<\/sub><\/span><br\/>$/;"	a
update_same	lf/Maps.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="update_same"><span class="id" type="lemma">update_same<\/span><\/a> : ∀ <span class="id" type="var">X<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">x<\/span> (<span class="id" type="var">m<\/span> : <a class="idref" href="Maps.html#partial_map"><span class="id" type="definition">partial_map<\/span><\/a> <a class="idref" href="Maps.html#X"><span class="id" type="variable">X<\/span><\/a>),<br\/>$/;"	a
update_shadow	lf/Maps.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="update_shadow"><span class="id" type="lemma">update_shadow<\/span><\/a> : ∀ <span class="id" type="var">A<\/span> (<span class="id" type="var">m<\/span>: <a class="idref" href="Maps.html#partial_map"><span class="id" type="definition">partial_map<\/span><\/a> <a class="idref" href="Maps.html#A"><span class="id" type="variable">A<\/span><\/a>) <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span> <span class="id" type="var">x<\/span>,<br\/>$/;"	a
v_abs	plf/Norm.html	/^&nbsp;&nbsp;| <a name="v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<sub>11<\/sub><\/span> <span class="id" type="var">t<sub>12<\/sub><\/span>,<br\/>$/;"	a
v_abs	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
v_abs	plf/Sub.html	/^&nbsp;&nbsp;| <a name="v_abs"><span class="id" type="constructor">v_abs<\/span><\/a> : ∀ <span class="id" type="var">x<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">t<\/span>,<br\/>$/;"	a
v_const	plf/Smallstep.html	/^&nbsp;&nbsp;| <a name="v_const"><span class="id" type="constructor">v_const<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <a class="idref" href="Smallstep.html#value"><span class="id" type="inductive">value<\/span><\/a> (<a class="idref" href="Smallstep.html#C"><span class="id" type="constructor">C<\/span><\/a> <a class="idref" href="Smallstep.html#n"><span class="id" type="variable">n<\/span><\/a>).<br\/>$/;"	a
v_false	plf/Norm.html	/^&nbsp;&nbsp;| <a name="v_false"><span class="id" type="constructor">v_false<\/span><\/a> : <a class="idref" href="Norm.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Norm.html#tfalse"><span class="id" type="constructor">tfalse<\/span><\/a><br\/>$/;"	a
v_false	plf/Sub.html	/^&nbsp;&nbsp;| <a name="v_false"><span class="id" type="constructor">v_false<\/span><\/a> :<br\/>$/;"	a
v_pair	plf/Norm.html	/^&nbsp;&nbsp;| <a name="v_pair"><span class="id" type="constructor">v_pair<\/span><\/a> : ∀ <span class="id" type="var">v<sub>1<\/sub><\/span> <span class="id" type="var">v<sub>2<\/sub><\/span>,<br\/>$/;"	a
v_rcons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="v_rcons"><span class="id" type="constructor">v_rcons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">v<\/span> <span class="id" type="var">vr<\/span>,<br\/>$/;"	a
v_rnil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="v_rnil"><span class="id" type="constructor">v_rnil<\/span><\/a> : <a class="idref" href="RecordSub.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="RecordSub.html#trnil"><span class="id" type="constructor">trnil<\/span><\/a><br\/>$/;"	a
v_true	plf/Norm.html	/^&nbsp;&nbsp;| <a name="v_true"><span class="id" type="constructor">v_true<\/span><\/a> : <a class="idref" href="Norm.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Norm.html#ttrue"><span class="id" type="constructor">ttrue<\/span><\/a><br\/>$/;"	a
v_true	plf/Sub.html	/^&nbsp;&nbsp;| <a name="v_true"><span class="id" type="constructor">v_true<\/span><\/a> :<br\/>$/;"	a
v_unit	plf/Sub.html	/^&nbsp;&nbsp;| <a name="v_unit"><span class="id" type="constructor">v_unit<\/span><\/a> :<br\/>$/;"	a
vacuous_substitution	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="vacuous_substitution"><span class="id" type="lemma">vacuous_substitution<\/span><\/a> : ∀  <span class="id" type="var">t<\/span> <span class="id" type="var">x<\/span>,<br\/>$/;"	a
value	plf/Norm.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Norm.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
value	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="RecordSub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
value	plf/Smallstep.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Smallstep.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
value	plf/Sub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="value"><span class="id" type="inductive">value<\/span><\/a> : <a class="idref" href="Sub.html#tm"><span class="id" type="inductive">tm<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
value	plf/Types.html	/^<span class="id" type="keyword">Definition<\/span> <a name="value"><span class="id" type="definition">value<\/span><\/a> (<span class="id" type="var">t<\/span>:<a class="idref" href="Types.html#tm"><span class="id" type="inductive">tm<\/span><\/a>) := <a class="idref" href="Types.html#bvalue"><span class="id" type="inductive">bvalue<\/span><\/a> <a class="idref" href="Types.html#t"><span class="id" type="variable">t<\/span><\/a> ∨ <a class="idref" href="Types.html#nvalue"><span class="id" type="inductive">nvalue<\/span><\/a> <a class="idref" href="Types.html#t"><span class="id" type="variable">t<\/span><\/a>.<br\/><hr class='doublespaceincode'\/>$/;"	a
value__normal	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="value__normal"><span class="id" type="lemma">value__normal<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>, <a class="idref" href="Norm.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a> → <a class="idref" href="Norm.html#step_normal_form"><span class="id" type="abbreviation">step_normal_form<\/span><\/a> <a class="idref" href="Norm.html#t"><span class="id" type="variable">t<\/span><\/a>.<br\/>$/;"	a
value_halts	plf/Norm.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="value_halts"><span class="id" type="lemma">value_halts<\/span><\/a> : ∀ <span class="id" type="var">v<\/span>, <a class="idref" href="Norm.html#value"><span class="id" type="inductive">value<\/span><\/a> <a class="idref" href="Norm.html#v"><span class="id" type="variable">v<\/span><\/a> → <a class="idref" href="Norm.html#halts"><span class="id" type="definition">halts<\/span><\/a> <a class="idref" href="Norm.html#v"><span class="id" type="variable">v<\/span><\/a>.<br\/>$/;"	a
value_is_nf	plf/Smallstep.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="value_is_nf"><span class="id" type="lemma">value_is_nf<\/span><\/a> : ∀ <span class="id" type="var">v<\/span>,<br\/>$/;"	a
value_is_nf	plf/Types.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="value_is_nf"><span class="id" type="lemma">value_is_nf<\/span><\/a> : ∀ <span class="id" type="var">t<\/span>,<br\/>$/;"	a
var_not_used_in_aexp	plf/Equiv.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="var_not_used_in_aexp"><span class="id" type="inductive">var_not_used_in_aexp<\/span><\/a> (<span class="id" type="var">X<\/span>:<span class="id" type="inductive">id<\/span>) : <span class="id" type="inductive">aexp<\/span> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
variable_E	plf/coqindex.html	/^<a name="variable_E"><\/a><h2>E <\/h2>$/;"	a
vendorPropName	lf/common/jquery-ui/external/jquery/jquery.js	/^function vendorPropName( name ) {$/;"	f
vendorPropName	plf/common/jquery-ui/external/jquery/jquery.js	/^function vendorPropName( name ) {$/;"	f
verification_conditions	plf/Hoare2.html	/^<span class="id" type="keyword">Fixpoint<\/span> <a name="verification_conditions"><span class="id" type="definition">verification_conditions<\/span><\/a> (<span class="id" type="var">P<\/span> : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) (<span class="id" type="var">d<\/span>:<a class="idref" href="Hoare2.html#dcom"><span class="id" type="inductive">dcom<\/span><\/a>)<br\/>$/;"	a
verification_conditions_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Definition<\/span> <a name="verification_conditions_dec"><span class="id" type="definition">verification_conditions_dec<\/span><\/a> (<span class="id" type="var">dec<\/span> : <a class="idref" href="Hoare2.html#decorated"><span class="id" type="inductive">decorated<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
verification_correct	plf/Hoare2.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="verification_correct"><span class="id" type="lemma">verification_correct<\/span><\/a> : ∀ <span class="id" type="var">d<\/span> <span class="id" type="var">P<\/span>,<br\/>$/;"	a
verification_correct_dec	plf/Hoare2.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="verification_correct_dec"><span class="id" type="lemma">verification_correct_dec<\/span><\/a> : ∀ <span class="id" type="var">dec<\/span>,<br\/>$/;"	a
version	lf/common/jquery-ui/jquery-ui.js	/^var version = $.ui.version = "1.12.1";$/;"	v
version	plf/common/jquery-ui/jquery-ui.js	/^var version = $.ui.version = "1.12.1";$/;"	v
visible	lf/common/jquery-ui/jquery-ui.js	/^function visible( element ) {$/;"	f
visible	plf/common/jquery-ui/jquery-ui.js	/^function visible( element ) {$/;"	f
vo_to_obj	lf/Makefile	/^vo_to_obj = $(addsuffix .o,\\$/;"	m
vo_to_obj	plf/Makefile	/^vo_to_obj = $(addsuffix .o,\\$/;"	m
wednesday	lf/Basics.html	/^&nbsp;&nbsp;| <a name="wednesday"><span class="id" type="constructor">wednesday<\/span><\/a> : <a class="idref" href="Basics.html#day"><span class="id" type="inductive">day<\/span><\/a><br\/>$/;"	a
well_formed_ty	plf/RecordSub.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="well_formed_ty"><span class="id" type="inductive">well_formed_ty<\/span><\/a> : <a class="idref" href="RecordSub.html#ty"><span class="id" type="inductive">ty<\/span><\/a> → <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
wfTArrow	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="wfTArrow"><span class="id" type="constructor">wfTArrow<\/span><\/a> : ∀ <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
wfTBase	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="wfTBase"><span class="id" type="constructor">wfTBase<\/span><\/a> : ∀ <span class="id" type="var">i<\/span>,<br\/>$/;"	a
wfTRCons	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="wfTRCons"><span class="id" type="constructor">wfTRCons<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<sub>1<\/sub><\/span> <span class="id" type="var">T<sub>2<\/sub><\/span>,<br\/>$/;"	a
wfTRNil	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="wfTRNil"><span class="id" type="constructor">wfTRNil<\/span><\/a> :<br\/>$/;"	a
wfTTop	plf/RecordSub.html	/^&nbsp;&nbsp;| <a name="wfTTop"><span class="id" type="constructor">wfTTop<\/span><\/a> :<br\/>$/;"	a
wf_rcd_lookup	plf/RecordSub.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="wf_rcd_lookup"><span class="id" type="lemma">wf_rcd_lookup<\/span><\/a> : ∀ <span class="id" type="var">i<\/span> <span class="id" type="var">T<\/span> <span class="id" type="var">Ti<\/span>,<br\/>$/;"	a
when	lf/IndPrinciples.v	/^    function that, when applied to a type [X], gives us back an$/;"	f
where	plf/Stlc.v	/^    function application, where we will need to substitute the$/;"	f
which	lf/Imp.v	/^    function which performs that transformation on [bexp]s, and prove$/;"	f
which	plf/Imp.v	/^    function which performs that transformation on [bexp]s, and prove$/;"	f
which	plf/References.v	/^    function which calls itself.  We first make a function which calls$/;"	f
which	plf/References.v	/^   function which binds it to the name [r], and assigns to it the$/;"	f
while_example	plf/Hoare.html	/^<span class="id" type="keyword">Example<\/span> <a name="while_example"><span class="id" type="definition">while_example<\/span><\/a> :<br\/>$/;"	a
white	lf/Basics.html	/^&nbsp;&nbsp;| <a name="white"><span class="id" type="constructor">white<\/span><\/a> : <a class="idref" href="Basics.html#color"><span class="id" type="inductive">color<\/span><\/a><br\/>$/;"	a
widget	lf/common/jquery-ui/jquery-ui.js	/^var widget = $.widget;$/;"	v
widget	plf/common/jquery-ui/jquery-ui.js	/^var widget = $.widget;$/;"	v
widgetEventPrefix	lf/common/jquery-ui/jquery-ui.js	/^	widgetName: "widget",$/;"	p	class:$.Widget
widgetEventPrefix	plf/common/jquery-ui/jquery-ui.js	/^	widgetName: "widget",$/;"	p	class:$.Widget
widgetName	lf/common/jquery-ui/jquery-ui.js	/^$.Widget.prototype = {$/;"	p	class:$.Widget
widgetName	plf/common/jquery-ui/jquery-ui.js	/^$.Widget.prototype = {$/;"	p	class:$.Widget
widgetSlice	lf/common/jquery-ui/jquery-ui.js	/^var widgetSlice = Array.prototype.slice;$/;"	v
widgetSlice	plf/common/jquery-ui/jquery-ui.js	/^var widgetSlice = Array.prototype.slice;$/;"	v
widgetUuid	lf/common/jquery-ui/jquery-ui.js	/^var widgetUuid = 0;$/;"	v
widgetUuid	plf/common/jquery-ui/jquery-ui.js	/^var widgetUuid = 0;$/;"	v
winnow	lf/common/jquery-ui/external/jquery/jquery.js	/^function winnow( elements, qualifier, not ) {$/;"	f
winnow	plf/common/jquery-ui/external/jquery/jquery.js	/^function winnow( elements, qualifier, not ) {$/;"	f
working_of_auto_1	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="working_of_auto_1"><span class="id" type="lemma">working_of_auto_1<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
working_of_auto_2	plf/UseAuto.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="working_of_auto_2"><span class="id" type="lemma">working_of_auto_2<\/span><\/a> : ∀ (<span class="id" type="var">P<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>→<span class="id" type="keyword">Prop<\/span>),<br\/>$/;"	a
would	lf/Preface.v	/^    function would take the original list and return a _new_ list$/;"	f
wp	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Definition<\/span> <a name="wp"><span class="id" type="definition">wp<\/span><\/a> (<span class="id" type="var">c<\/span>:<span class="id" type="inductive">com<\/span>) (<span class="id" type="var">Q<\/span>:<a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a>) : <a class="idref" href="Hoare.html#Assertion"><span class="id" type="definition">Assertion<\/span><\/a> :=<br\/>$/;"	a
wp_is_precondition	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="wp_is_precondition"><span class="id" type="lemma">wp_is_precondition<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span>,<br\/>$/;"	a
wp_is_weakest	plf/HoareAsLogic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="wp_is_weakest"><span class="id" type="lemma">wp_is_weakest<\/span><\/a>: ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">Q<\/span> <span class="id" type="var">P'<\/span>,<br\/>$/;"	a
wrong_ev	lf/IndProp.html	/^<span class="id" type="var">Fail<\/span> <span class="id" type="keyword">Inductive<\/span> <a name="wrong_ev"><span class="id" type="inductive">wrong_ev<\/span><\/a> (<span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>) : <span class="id" type="keyword">Prop<\/span> :=<br\/>$/;"	a
wrong_ev_0	lf/IndProp.html	/^| <a name="wrong_ev_0"><span class="id" type="constructor">wrong_ev_0<\/span><\/a> : <a class="idref" href="IndProp.html#wrong_ev"><span class="id" type="inductive">wrong_ev<\/span><\/a> 0<br\/>$/;"	a
wrong_ev_SS	lf/IndProp.html	/^| <a name="wrong_ev_SS"><span class="id" type="constructor">wrong_ev_SS<\/span><\/a> : ∀ <span class="id" type="var">n<\/span>, <span class="id" type="var">wrong_ev<\/span> <span class="id" type="var">n<\/span> → <span class="id" type="var">wrong_ev<\/span> (<span class="id" type="var">S<\/span> (<span class="id" type="var">S<\/span> <span class="id" type="var">n<\/span>)).<br\/>$/;"	a
yes	lf/IndPrinciples.html	/^&nbsp;&nbsp;| <a name="yes"><span class="id" type="constructor">yes<\/span><\/a> : <a class="idref" href="IndPrinciples.html#yesno"><span class="id" type="inductive">yesno<\/span><\/a><br\/>$/;"	a
yesno	lf/IndPrinciples.html	/^<span class="id" type="keyword">Inductive<\/span> <a name="yesno"><span class="id" type="inductive">yesno<\/span><\/a> : <span class="id" type="keyword">Type<\/span> :=<br\/>$/;"	a
zero_nbeq_plus_1	lf/Basics.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="zero_nbeq_plus_1"><span class="id" type="lemma">zero_nbeq_plus_1<\/span><\/a> : ∀ <span class="id" type="var">n<\/span> : <a class="idref" href="http:\/\/coq.inria.fr\/library\/Coq.Init.Datatypes.html#nat"><span class="id" type="inductive">nat<\/span><\/a>,<br\/>$/;"	a
zero_not_one	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="zero_not_one"><span class="id" type="lemma">zero_not_one<\/span><\/a> : ~(0 = 1).<br\/>$/;"	a
zero_not_one'	lf/Logic.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="zero_not_one'"><span class="id" type="lemma">zero_not_one'<\/span><\/a> : 0 ≠ 1.<br\/>$/;"	a
zero_or_succ	lf/Logic.html	/^<span class="id" type="keyword">Lemma<\/span> <a name="zero_or_succ"><span class="id" type="lemma">zero_or_succ<\/span><\/a> :<br\/>$/;"	a
zprop	plf/Equiv.html	/^<span class="id" type="keyword">Definition<\/span> <a name="zprop"><span class="id" type="definition">zprop<\/span><\/a> (<span class="id" type="var">c<\/span> : <span class="id" type="inductive">com<\/span>) : <span class="id" type="keyword">Prop<\/span><br\/>$/;"	a
zprop_preserving	plf/Equiv.html	/^<span class="id" type="keyword">Theorem<\/span> <a name="zprop_preserving"><span class="id" type="lemma">zprop_preserving<\/span><\/a> : ∀ <span class="id" type="var">c<\/span> <span class="id" type="var">c'<\/span>,<br\/>$/;"	a
